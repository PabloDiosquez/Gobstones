// Comidas Gobianas 游꼴游볧游볫游꼼

type ComidaGobiana is record {
    /*
        PROP칍SITO:
            * Modela una comida que come un gobiano.
        INV. DE REP.:
            * El nombre de la comida no puede estar vac칤o.
            * calor칤as es un n칰mero mayor a cero.
    */

    field nombre   // String
    field origen   // Continente
    field calor칤as // N칰mero
}

type Continente is variant {
    /*
        PROP칍SITO:
            * Modela un continente de donde puede proceder una comida gobiana.
    */

    case 츼frica     {}
    case Am칠rica    {}
    case Asia       {}
    case Europa     {}
    case Ocean칤a    {}
}

// Ejercicio 1)
// Como primer ejercicio queremos modelar dos de las comidas Gobianas m치s t칤picas, las Bolitas de Fraile, y las Bolitas de Queso. Las primeras son una comida originaria de Am칠rica, y tiene 500 calor칤as. La segunda, son de Europa, y tienen tan s칩lo 150 calor칤as. Se pide implementar entonces:
// a. bolitasDeFraile, una funci칩n que describe la comida gobiana Bolitas de Fraile.
// b. bolitasDeQueso, una funci칩n que describe la comida gobiana Bolitas de Queso.

// 1) a.

function bolitasDeFraile() {
    /*
        PROP칍SITO:
            * Describe la comida gobiana Bolitas de Fraile, de Am칠rica con 500 calor칤as.
        TIPO: ComidaGobiana.
        PRECONDICIONES:
            * No tiene (es una funci칩n total).
    */
    
    return (
        ComidaGobiana(
                        nombre   <- "Bolitas de Fraile",
                        origen   <- Am칠rica,
                        calor칤as <- 500
                    )
    )
}

// 1) b.

function bolitasDeQueso() {
    /*
        PROP칍SITO:
            * Describe la comida gobiana Bolitas de Queso, de Europa con 150 calor칤as.
        TIPO: ComidaGobiana.
        PRECONDICIONES:
            * No tiene (es una funci칩n total).
    */
    
    return (
        ComidaGobiana(
                        nombre   <- "Bolitas de Queso",
                        origen   <- Europa,
                        calor칤as <- 150
                    )
    )
}

// Ejercicio 2)
// Deseamos determinar si, dadas dos comidas gobianas, la primera tiene m치s calor칤as que la segunda. Para ello, realizar la funci칩n tieneM치sCalor칤as_Que_ que dadas dos comidas gobianas, indica si la primera tiene m치s calor칤as que la segunda.

function tieneM치sCalor칤as_Que_(primerComida, segundaComida) {
    /*
        PROP칍SITO:
            * Dadas dos comidas gobianas, indica si la primer comida tiene m치s calor칤as que la segunda comida.
        PAR츼METROS:
            * primerComida:  ComidaGobiana.
            * segundaComida: ComidaGobiana.
        TIPO: Booleano.
        PRECONDICIONES:
            * No tiene (es una funci칩n total).
    */
    
    return (calor칤as(primerComida) > calor칤as(segundaComida))
}

// Ejercicio 3)
// Adem치s, queremos poder elegir de forma autom치tica la comida m치s saludable, dadas dos comidas gobianas. Para ello, queremos crear lal funci칩n comidaM치sSaludableEntre_Y_ que describe la comida gobiana m치s saludable de las dos comidas dadas. La comida m치s saludable es aquella que tiene menos calor칤as.

function comidaM치sSaludableEntre_Y_(primerComida, segundaComida) {
    /*
        PROP칍SITO:
            * Describe la comida m치s saludable de las dos comidas dadas.
        PAR츼METROS:
            * primerComida:  ComidaGobiana.
            * segundaComida: ComidaGobiana.
        TIPO: ComidaGobiana.
        PRECONDICIONES:
            * No tiene (es una funci칩n total).
        OBSERVACIONES:
            * La comida m치s saludable es aquella que tiene menos calor칤as.
    */
    
    return (
            choose primerComida  when (tieneM치sCalor칤as_Que_(segundaComida, primerComida))
                   segundaComida otherwise 
    )
}

// Ejercicio 4)
// Algunos fan치ticos de las comidas gobianas s칩lo comen comidas si provienen de determinadas regiones. Por ello, deseamos poder crear la funci칩n proviene_De_ que dada una comida y un continente indica si una comida proviene del continente dado.

function proviene_De_(comida, origenDeComida) {
    /*
        PROP칍SITO:
            * Indica si **comida** proviene de **continente**.
        PAR츼METROS:
            * comida:         ComidaGobiana.
            * origenDeComida: Continente
        TIPO: Booleano.
        PRECONDICIONES:
            * No tiene (es una funci칩n total).
    */
    
    return (origen(comida) == origenDeComida)
}

// Ejercicio 5)
// Hay gente que tiene la idea de que si le unta manteca a la comida, 칠sta se vuelve mucho mejor. Por ese motivo, se quiere hacer la funci칩n enmantecar_ que describe una nueva comida, igual que la dada pero donde las calor칤as aumentan en 200. Por ejemplo, enmantecar una bolita de fraile, produce una bolita de fraile de 700 calor칤as.

function enmantecar_(comidaAEnmantecar) {
    /*
        PROP칍SITO:
            * Describe una nueva comida gobiana, igual que la dada pero con 200 calor칤as m치s.
        PAR츼METROS:
            * comida: ComidaGobiana.
        TIPO: ComidaGobiana.
        PRECONDICIONES:
            * No tiene (es una funci칩n total).
    */
    
    return (ComidaGobiana(comidaAEnmantecar | calor칤as <- calor칤as(comidaAEnmantecar) + 200))
}

// Ejercicio 6)
// Una albondigueada es un tipo de plato que consiste en una serie de alb칩ndigas de carne donde cada una tiene m치s calor칤as que la anterior. Se sirven un total de 5 alb칩ndigas con calor칤as que comienzan en 300 y aumentan de a 100. Se pide que escriba la funci칩n albondigueada que describe una lista de 5 comidas gobianas donde todas las comidas son alb칩ndigas provenientes de Europa, y donde tienen 300, 400, 500, 600 y 700 calor칤as. 

function albondigueada() {
    /*
        PROP칍SITO:
            * Describe una lista de comidas gobianas con alb칩ndigas europeas con diferentes calor칤as, comenzando con 300 y cada una con 100 calor칤as m치s que la anterior.
        TIPO: [ComidaGobiana] (Lista de ComidaGobiana).
        PRECONDICIONES:
            * No tiene (es una funci칩n total).
    */
    
    listaDeAlb칩ndigas := []

    calor칤asDePr칩ximaAlb칩ndiga := 300

    repeat (5) {
        listaDeAlb칩ndigas := listaDeAlb칩ndigas ++ [alb칩ndigaCon_Calor칤as(calor칤asDePr칩ximaAlb칩ndiga)]

        calor칤asDePr칩ximaAlb칩ndiga := calor칤asDePr칩ximaAlb칩ndiga + 100
    }

    return (listaDeAlb칩ndigas)
}

function alb칩ndigaCon_Calor칤as(calor칤as) {
    /*
        PROP칍SITO:
            * Describe una alb칩ndiga europea con **calor칤as** calor칤as.
        PAR츼METROS:
            * calor칤as: N칰mero.
        TIPO: ComidaGobiana.
        PRECONDICIONES:
            * **calor칤as** debe ser >= 0.
    */
    
    return (
        ComidaGobiana(
                    nombre   <- "Alb칩ndiga",
                    origen   <- Europa,
                    calor칤as <- calor칤as
                    )
    )
}

// Ejercicio 7)
// Hay gobianos que s칩lo comen bolitas de fraile. Si les das una pila de comida, primero buscan a ver si hay efectivamente una bolita de fraile, y si hay, se quedan con la pila de comida, sino, la descartan. Por eso, queremos hacer la funci칩n hayUnaBolitaDeFraileEn_ que dada una lista de comidas, indica si en la pila hay alguna cuyo nombre sea "Bolita de Fraile".

function hayUnaBolitaDeFraileEn_(listaDeComidas) {
    /*
        PROP칍SITO:
            * Indica si en la lista de comidas dada hay alguna cuyo nombre sea "Bolita de Fraile".
        PAR츼METROS:
            * listaDeComidas: [ComidaGobiana].
        TIPO: Booleano.
        PRECONDICIONES:
            * No tiene (es una funci칩n total).
        OBSERVACIONES:
            * Recorrido de b칰squeda sobre listas.
    */
    
    lasComidasPorMirar := listaDeComidas

    while (not esVac칤a(lasComidasPorMirar) && 
                nombre(primero(listaDeComidas)) /= "Bolitas de Fraile") {
        
        lasComidasPorMirar := resto(lasComidasPorMirar)
    }

    return (not esVac칤a(lasComidasPorMirar))
}

// Ejercicio 8
// A los gobianos hay que cuidarlos, por eso, cuando se les lleva comida, hay que analizar si no se est치 pasando de la cantidad de calor칤as que un ser humano normal puede consumir. Por eso, queremos hacer la funci칩n cantidadDeCalor칤asDe_ que dada una lista de comidas, describe la cantidad total de calor칤as de los elementos de dicha lista. 

function cantidadDeCalor칤asDe_(listaDeComidas) {
    /*
        PROP칍SITO:
            * Describe la cantidad total de calor칤as de las comidas de la lista de comidas dada.
        PAR츼METROS:
            * listaDeComidas: [ComidaGobiana].
        TIPO: N칰mero.
        PRECONDICIONES:
            * No tiene (es una funci칩n total).
    */

    comidasPorMirar = listaDeComidas

    calor칤asQueYaCont칠 := calor칤as(primero(comidasPorMirar))

    while (not esVac칤a(comidasPorMirar)) {
        listaDeComidasQueFaltan := resto(comidasPorMirar)

        calor칤asQueYaCont칠 := calor칤asQueYaCont칠 + calor칤as(primero(comidasPorMirar))
    }

    return (calor칤asQueYaCont칠)
}

// Ejercicio 9
// Los fan치ticos de la manteca son tan obsesivos que si les das un mont칩n de comida, la enmantecan toda, sin miramientos. Por eso, queremos hacer la funci칩n comidasDe_Enmantecadas que dada una lista de comidas, describe una lista del mismo tama침o que la original, donde cada elemento se corresponde con la comida en dicha lista, pero enmantecada. 

function comidasDe_Enmantecadas(listaDeComidas) {
    /*
        PROP칍SITO:
            * Describe una nueva lista de comidas, del mismo tama침o que la lista de comidas original dada, donde cada elemento se corresponde con la comida en la lista dada, pero enmantecada.
        PAR츼METROS:
            * listaDeComidas: [ComidaGobiana].
        TIPO: [ComidaGobiana].
        PRECONDICIONES:
            * No tiene (es una funci칩n total).
    */
    
    lasComidasPorMirar := listaDeComidas

    lasComidasEnmantecadasHastaAhora := [enmantecar(primerComida(lasComidasPorMirar))]

    while (not esVac칤a(lasComidasPorMirar)) {
        lasComidasPorMirar := resto(lasComidasPorMirar)
        
        lasComidasEnmantecadasHastaAhora := lasComidasEnmantecadasHastaAhora ++ [enmantecar(primero(lasComidasPorMirar))]
    }

    return (lasComidasEnmantecadasHastaAhora)
}