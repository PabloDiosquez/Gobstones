// Se desea modelar una parte de un juego de Pókemon mediante los siguientes tipos:

type TipoDePókemon is variant{
    /* 
    PROPÓSITO:
        * Modelar los tipos de Pókemon posibles */
    case Tierra {}
    case Agua {}
    case Fuego {}
}

type Pókemon is record {
    /*
     PROPÓSITO: 
        *Modelar un Pókemon
    INV.REP.: 
        * La fuerza y el nivel son mayores o iguales a 0
        * Si está debilitado, su fuerza es cero.
     */

    field tipo // TipoDePókemon
    field fuerza // Número
    field estáVivo // Booleano.
    field nivel // Número
}

// Ejercicios con Registros y Variantes
// Definir las siguientes funciones:
// a) _esMásFuerteQue_, que dados dos Pókemon indica si el primero tiene más
// fuerza que el segundo.

function _esMásFuerteQue_(pókemon1, pókemon2) {
    /*
        PROPÓSITO:
            * Indica si el primer pókemon dado tiene más fuerza que el segundo dado.
        PARÁMETROS:
            * pókemon1: Pókemon
            * pókemon2: Pókemon
        TIPO: Booleano
        PRECONDICIONES:
            * No tiene (es una función total).
    */
    
    return (fuerza(pókemon1) > fuerza(pókemon2))
}

// b) esDeMayorNivel_Que_, que dados dos Pókemon indica si el si el primero
// tiene un nivel más alto que el segundo.

function esDeMayorNivel_Que_(pókemon1, pókemon2) {
    /*
        PROPÓSITO:
            * Indica si el primer pókemon dado tiene un nivel más alto que el segundo pókemon dado.
        PARÁMETROS:
            * pókemon1: Pókemon
            * pókemon2: Pókemon
        TIPO: Booleano
        PRECONDICIONES:
            * No tiene (es una función total).
    */
    
    return (nivel(pókemon1) > nivel(pókemon2))
}

// c) pókemon_PotenciadoEn_, que dado un Pókemon y un número, describe el
// Pókemon resultante de multiplicar la fuerza y el nivel del Pókemon dado por ese
// número.

function pókemon_PotenciadoEn_(pókemon, número) {
    /*
        PROPÓSITO:
            * Describe el pókemon resultante de multiplicar la fuerza y el nivel del pókemon dado por el número dado.
        PARÁMETROS:
            * pókemon: Pókemon
            * número: Número
        TIPO: Pókemon
        PRECONDICIONES:
            * **número** debe ser >= 0.
    */
    
    return (
        Pokémon(pókemon | 
                          fuerza <- fuerza(pókemon)*número
                        , nivel  <- nivel(pókemon) *número 
        )
    )
}

// d) pókemon_ConValoresDuplicados, que dado un Pókemon, describe el
// Pókemon resultante de duplicar la fuerza y el nivel del Pokémon dado.

function pókemon_ConValoresDuplicados(pókemon) {
    /*
        PROPÓSITO:
            * Describe el pókemon que resulta de duplicar los valores de fuerza y de nivel del pókemon dado.
        PARÁMETROS:
            * pókemon: Pókemon
        TIPO: Pókemon
        PRECONDICIONES:
            * No tiene (es una función total).
    */
    
    return (pókemon_PotenciadoEn_(pókemon, 2))
}

// e) pókemon_PotenciadoSiEsDeTipo_En(pokémon , tipo,n), que dado un
// Pókemon, un tipo de Pókemon y un número, describe el Pokémon resultante de
// potenciar el dado en el número dado, solamente si es del tipo recibido, y el
// original si no.

function pókemon_PotenciadoSiEsDeTipo_En_(pókemon, tipo, número) {
    /*
        PROPÓSITO:
            * Describe el pókemon resultante de potenciar en el número dado al pókemon dado, sólo si es del tipo recibido; en caso contrario, describe el pókemon original.
        PARÁMETROS:
            * pókemon: Pókemon
            * tipo: TipoDePókemon
            * número: Número
        TIPO: Pókemon
        PRECONDICIONES:
            * **número** debe ser >= 0.
    */
    
    return (choose pókemon_PotenciadoEn_(pókemon, número) when (_esDeTipo_(pokémon, tipo))
                   pókemon otherwise
    )
}

function _esDeTipo_(pókemon, tipoDado) {
    /*
        PROPÓSITO:
            * Indica si el pókemon dado es del tipo dado.
        PARÁMETROS:
            * pókemon: Pókemon
            * tipoDado: TipoDePókemon
        TIPO: Booleano.
        PRECONDICIONES:
            * No tiene (es una función total).
    */
    
    return (tipo(pokémon) == tipoDado)
}

// f) pókemon_Derrotado, que dado un Pókemon, describe el Pokémon resultante
// de debilitar al Pókemon dado (o sea, su fuerza será 0 y su estado, debilitado).

function pókemon_Derrotado(pókemon) {
    /*
        PROPÓSITO:
            * Describe el pókemon que resulta de debilitar al pókemon dado.
        PARÁMETROS:
            * pókemon: Pókemon
        TIPO: Pókemon
        PRECONDICIONES:
            * No tiene (es una función total).
        OBSERVACIONES:
            * Si el pókemon está debilitado, su fuerza es cero.
    */
    
    return (Pókemon(pókemon | fuerza <- 0))
}


// Ejercicios con Listas de Registros
// Definir las siguientes funciones:
// a) pókemonDe_Entrenados_, que dada una lista de Pókemon y un número,
// describe la lista resultante de potenciar cada Pókemon de la lista dada en la
// cantidad dada.

function pókemonDe_Entrenados_(pókemons, número) {
    /*
        PROPÓSITO:
            * Describe la lista que resulta de potenciar en el número dado los pókemons de la lista dada.
        PARÁMETROS:
            * pókemons: [Pókemon]
            * número: Número
        TIPO: [Pókemon]
        PRECONDICIONES:
            * **número** debe ser >= 0.
    */
    
    pókemonsPotenciadosAlMomento := []

    foreach pókemon in pókemons {
        pókemonsPotenciadosAlMomento := pókemonsPotenciadosAlMomento ++
                                        [pókemon_PotenciadoEn_(pókemon, número)]
    }

    return (pókemonsPotenciadosAlMomento)
}

// b) pókemonDe_DelTipo_, que dada una lista de Pókemon y un tipo de Pókemon,
// describe la lista de aquellos Pókemon de la lista dada que son del tipo dado.

function pókemonDe_DelTipo_(pókemons, tipoDado) {
    /*
        PROPÓSITO:
            * Describe la lista de los pókemons de la lista dada que son del tipo dado.
        PARÁMETROS:
            * pókemons: [Pókemon]
            * tipoDado: TipoDePókemon
        TIPO: [Pókemon]
        PRECONDICIONES:
            * No tiene (es una función total).
    */
    
    pókemonsDelTipoDadoAlMomento := []

    foreach pókemon in pókemons {
        pókemonsDelTipoDadoAlMomento := pókemonsDelTipoDadoAlMomento ++
                                        singular_Si_(pókemon, _esDeTipo_(pókemon, tipo))
    }

    return (pókemonsDelTipoDadoAlMomento)
}

// c) elMásFuerteDe_, que dada una lista de Pókemon, describe el pókemon de
// nivel más alto de toda la lista; si hay dos o más del mismo nivel más alto, da lo
// mismo cual se describe. ¿Qué precondición se debe exigir?

function elMásFuerteDe_(pókemons) {
    /*
        PROPÓSITO:
            * Describe el pókemon de nivel más alto de la lista de pókemons dada.
        PARÁMETROS:
            * pókemons: [Pókemon]
        TIPO: Pókemon
        PRECONDICIONES:
            * La lista de pókemons dada no debe ser vacía.
    */
    
    elMásFuerteAlMomento := primero(pókemons)

    foreach pókemon in resto(pókemons) {
        elMásFuerteAlMomento := elMásFuerteEntre_Y_(elMásFuerteAlMomento, pókemon)
    }

    return (elMásFuerteAlMomento)
}

function elMásFuerteEntre_Y_(pókemon1, pókemon2) {
    /*
        PROPÓSITO:
            * Describe el pókemon de nivel más alto entre los dos pókemons dados.
        PARÁMETROS:
            * pókemon1: Pókemon
            * pókemon2: Pókemon
        TIPO: Pókemon
        PRECONDICIONES:
            * No tiene (es una función total).
    */
    
    return (choose pókemon1 when(nivel(pókemon1) > nivel(pókemon2))
                   pókemon2 otherwise
    )
}

// d) pókemonDe_DelTipo_Duplicados, que dada una lista de Pókemons y un tipo
// de Pókemon, describe lista de Pókemon resultante de duplicar aquellos
// Pókemon de la lista original que son del tipo dado, dejando los demás
// exactamente igual. El orden en la lista resultante debe ser el mismo que en la
// lista dada.

function pókemonDe_DelTipo_Duplicados(pókemons, tipo) {
    /*
        PROPÓSITO:
            * Describe la lista de pókemons que resulta de duplicar aquellos pókemons de la lista dada que son del tipo dado, dejando los demás exactamente igual.
        PARÁMETROS:
            * pókemons: [Pókemon]
            * tipo: tipoDePókemon
        TIPO: [Pókemon]
        PRECONDICIONES:
            * No tiene (es una función total).
    */
    
    pókemonsDelTipoDadoAlMomento := []

    foreach pókemon in pókemons {
        pókemonsDelTipoDadoAlMomento := pókemonsDelTipoDadoAlMomento ++ 
                                        singular_Si_(pókemon, es_DelTipo_(pókemon, tipo))
    }

    return (pókemonsDe_Duplicados(pókemonsDelTipoDadoAlMomento))
}

function pókemonsDe_Duplicados(pókemons) {
    /*
        PROPÓSITO:
            * Describe la lista que resulta de duplicar los valores de fuerza y nivel de cada pókemon de la lista dada.
        PARÁMETROS:
            * pókemons: [Pókemon]
        TIPO: [Pókemon]
        PRECONDICIONES:
            * No tiene (es una función total).
    */
    
    pókemonsDuplicadosAlMomento := []

    foreach pókemon in pókemons {
        pókemonsDuplicadosAlMomento := pókemonsDuplicadosAlMomento ++ [pókemon_ConValoresDuplicados(pókemon)]
    }

    return (pókemonsDebilitadosAlMomento)
}


// e) elPókemonMásDébilDe_, que dada una lista de Pókemon describe al
// Pókemon de nivel más bajo de toda la lista; si hay dos o más del mismo nivel
// más bajo, da lo mismo cual se describe. ¿Cuál es la precondición de esta
// función?

function elPókemonMásDébilDe_(pókemons) {
    /*
        PROPÓSITO:
            * Describe el pókemon de nivel más bajo de la lista de pókemons dada.
        PARÁMETROS:
            * pókemons: [Pókemon]
        TIPO: Pókemon
        PRECONDICIONES:
            * La lista de pókemons dada debe ser no vacía.
    */
    
    pókemonMásDébilAlMomento := primero(pókemons)

    foreach pókemon in resto(pókemons) {
        pókemonMásDébilAlMomento := elMásDébilEntre_Y_(pókemonMásDébilAlMomento, pókemon)
    }

    return (pókemonMásDébilAlMomento)
}

function elMásDébilEntre_Y_(pókemon1, pókemon2) {
    /*
        PROPÓSITO:
            * Describe el pókemon de nivel más bajo de los dos pókemons dados.
        PARÁMETROS:
            * pókemon1: Pókemon
            * pókemon2: Pókemon
        TIPO: Pókemon
        PRECONDICIONES:
            * No tiene (es una función total).
    */
    
    return (choose pókemon1 when (nivel(pókemon1) < nivel(pókemon2))
                   pókemon2 otherwise
    )
}

// f) pókemonsDebilitadosDe_, que dada una lista de Pókemon, describe la lista
// de aquellos pókemons de la lista dada que están debilitados.

function pókemonsDebilitadosDe_(pókemons) {
    /*
        PROPÓSITO:
            * Describe la lista de pókemons debilitados de la lista dada. 
        PARÁMETROS:
            * pókemons: [Pókemon]
        TIPO: [Pókemon]
        PRECONDICIONES:
            * No tiene (es una función total).
    */

    pókemonsDebilitadosAlMomento := []

    foreach pókemon in pókemons {
        pókemonsDebilitadosAlMomento := pókemonsDebilitadosAlMomento ++ 
                                                singular_Si_(pókemon, estáDebilitado_(pókemon))
    }
    
    return (pókemonsDebilitadosAlMomento)
}

function estáDebilitado_(pókemon) {
    /*
        PROPÓSITO:
            * Indica si el pókemon dado está debilitado.
        PARÁMETROS:
            * pókemon: Pókemon
        TIPO: Booleano
        PRECONDICIONES:
            * No tiene (es una función total).
    */
    
    return (fuerza(pókemon) == 0)
}

// g) cantidadDePókemonSaludablesEn_, que dada una lista de Pókemon,
// describe la cantidad de Pókemon de la lista que no están debilitados.

function cantidadDePókemonSaludablesEn_(pókemons) {
    /*
        PROPÓSITO:
            * Describe la cantidad de pókemons saludables de la lista de pókemons dada.
        PARÁMETROS:
            * pókemons: [Pókemon]
        TIPO: Número
        PRECONDICIONES:
            * No tiene (es una función total).
        OBSERVACIONES: 
            * Recorrido de acumulación sobre la lista de pókemons dada.
    */
    
    cantidadDePókemonSaludablesAlMomento := 0

    foreach pókemon in pókemons {
        cantidadDePókemonSaludablesAlMomento := cantidadDePókemonSaludablesAlMomento + 
                                                            unoSi_CeroSino(estáSaludable_(pókemon))
    }

    return (cantidadDePókemonSaludablesAlMomento)
}

function estáSaludable_(pókemon) {
    /*
        PROPÓSITO:
            * Indica si el pókemon dado está saludable.
        PARÁMETROS:
            * pókemon: Pókemon
        TIPO: Booleano
        PRECONDICIONES:
            * No tiene (es una función total).
    */
    
    return (fuerza(pókemon) > 0)
}


// h) existePókemonEn_ConFuerza_Tipo_YNivel_, que dada una lista de
// Pókemon, un número para indicar una fuerza, un tipo de Pókemon y un número
// para indicar un nivel, indica si en la lista dada existe algun Pókemon de ese tipo
// con esa fuerza y ese nivel.

function existePókemonEn_ConFuerza_Tipo_YNivel_(pókemons, fuerza, tipo, nivel) {
    /*
        PROPÓSITO:
            * Indica si existe un pókemon del tipo dado, con la fuerza dada y el nivel dado, en la lista de pókemons dada. 
        PARÁMETROS:
            * pókemons: [Pókemon]
            * fuerza: Número
            * tipo: tipoDePókemon
            * nivel: Número
        TIPO: Booleano
        PRECONDICIONES:
            * **fuerza** debe ser >= 0.
            * **nivel**  debe ser >= 0.
        OBSERVACIONES:
            * Recorrido de búsqueda sobre la lista de pókemons dada.
    */

    pókemonsPorRecorrer := pókemons 

    while (not esVacía(pókemonsPorRecorrer) && not _esDeTipo_ConFuerza_YNivel_(pókemon, tipo, fuerza, nivel)) {
        pókemonsPorRecorrer := resto(pókemonsPorRecorrer)
    }
    
    return (not esVacía(pókemonsPorRecorrer))
}

function _esDeTipo_ConFuerza_YNivel_(pókemon, tipoDado, fuerzaDada, nivelDado) {
    /*
        PROPÓSITO:
            * Indica si el pókemon dado es de tipo **tipoDado**, con fuerza **fuerzaDada** y nivel **nivelDado**.
        PARÁMETROS:
            * pókemon: Pókemon
            * tipoDado: tipoDePókemon
            * fuerzaDada: Número
            * nivelDado: Número
        TIPO: Booleano
        PRECONDICIONES:
            * **fuerza** debe ser >= 0.
            * **nivel**  debe ser >= 0.
    */
    
    return (tipo(pókemon) == tipoDado && fuerza(pókemon) == fuerzaDada && nivel(pókemon) == nivelDado)
}

// Ejercicio con Registros y Listas.
// Supongamos además que se definen el siguiente tipo:

type Entrenador is record{
    /* 
        PROPÓSITO: 
            * Modelar un entrenador de Pókemon.
        INV.REP.: 
            * Identificador es un número > 0 */

        field lista // [Pokemon]
        field identificador // Número
        field esTáctico // Booleano
}

// Definir las siguientes funciones, sin olvidar establecer adecuadamente las
// precondiciones:

// a) entrenador__, que dados un identificador y un booleano que indica si el
// entrenador es táctico, describe un Entrenador con los datos dados. Notar que
// por defecto el entrenador no tiene Pókemon para entrenar.

function entrenador__(identificador, esTáctico) {
    /*
        PROPÓSITO:
            * Describe un entrenador con los datos dados.
        PARÁMETROS:
            * identificador: Número
            * esTáctico: Booleano
        TIPO: Entrenador
        PRECONDICIONES:
            * **identificador** es un número > 0
    */
    
    return (
            Entrenador(
                        lista <- listaVacía()
                    ,   identificador <- identificador
                    ,   esTáctico <- esTáctico
            )
    )
}


// b) entrenador_ConPókemon_Agregado, que dados un entrenador y un
// Pókemon, describe al entrenador resultante de agregar al Pókemon dado a la
// lista de Pókemon del entrenador dado.

function entrenador_ConPókemon_Agregado(entrenador, pókemon) {
    /*
        PROPÓSITO:
            * Describe al entrenador dado con su lista de pókemons actualizada por el agregado del pókemon dado.
        PARÁMETROS:
            * entrenador: Entrenador
            * pókemon: Pókemon
        TIPO: Entrenador
        PRECONDICIONES:
            * No tiene (es una función total).
    */
    
    return (Entrenador(entrenador | lista <- lista(entrenador) ++ [pókemon]))
}

// c) cantidadDePókemonDe_, que dado un entrenador, describe la cantidad de
// Pókemon del entrenador recibido.


function cantidadDePókemonDe_(entrenador) {
    /*
        PROPÓSITO:
            * Describe la cantidad de pókemons del entrenador dado.
        PARÁMETROS:
            * entrenador: Entrenador
        TIPO: Número
        PRECONDICIONES:
            * No tiene (es una función total).
    */
    
    return (cantidadDeElementosDe_(lista(entrenador)))
}

// d) cantidadTotalDePókemonEn_, que dada una lista de entrenadores, describe
// la cantidad total de Pókemon entre todos los entrenadores de la lista.

function cantidadTotalDePókemonEn_(entrenadores) {
    /*
        PROPÓSITO:
            * Describe la cantidad total de pókemons entre todos los entrenadores de la lista dada.
        PARÁMETROS:
            * entrenadores: [Entrenador]
        TIPO: Número
        PRECONDICIONES:
            * No tiene (es una función total).
    */
    
    cantidadDePókemonsAlMomento := 0

    foreach entrenador in entrenadores {
        cantidadDePókemonsAlMomento := cantidadDePókemonsAlMomento ++ cantidadDePókemonDe_(entrenador)
    }

    return (cantidadDePókemonsAlMomento)
}

// e) entrenadorMásAntiguoEntre_Y_, que dados dos entrenadores, describe al
// entrenador más antiguo de ambos (o sea, el que tiene menor número de
// identificación).

function entrenadorMásAntiguoEntre_Y_(primerEntrenador, segundoEntrenador) {
    /*
        PROPÓSITO:
            * Describe al entrenador más antiguo entre los dos entrenadores dados.
        PARÁMETROS:
            * primerEntrenador:  Entrenador
            * segundoEntrenador: Entrenador
        TIPO: Entrenador
        PRECONDICIONES:
            * No tiene (es una función total).
        OBSERVACIONES:
            * El entrenador más antiguo es el que tiene el menor número de identificación.
    */
    
    return (choose primerEntrenador  when (identificación(primerEntrenador) < identificación(segundoEntrenador))
                   segundoEntrenador otherwise
    )
}

// f) elMásAntiguoEn_, que dada una lista de entrenadores, describe al entrenador
// más antiguo de la lista dada.

function elMásAntiguoEn_(entrenadores) {
    /*
        PROPÓSITO:
            * Describe al entrenador más antiguo de la lista de entrenadores dada.
        PARÁMETROS:
            * entrenadores: [Entrenador]
        TIPO: Entrenador
        PRECONDICIONES:
            * La lista de entrenadores dada no debe ser vacía.
        OBSERVACIONES:
            * Recorrido de búsqueda de un mínimo sobre la lista de entrenadores.
    */
    
    entrenadorMásAntiguoVisto := primero(entrenadores)

    foreach entrenador in entrenadores {
        entrenadorMásAntiguoVisto := entrenadorMásAntiguoEntre_Y_(entrenadorMásAntiguoVisto, entrenador)
    }

    return (entrenadorMásAntiguoVisto)
}


// g) entrenadorGanadorDeDesafíoEntre_Y_, que dados dos entrenadores,
// describe al Entrenador ganador del desafío.
// El desafío consiste en que compitan un Pókemon de cada entrenador hasta que
// se acaben los Pókemon de uno de ellos, resultando en batallas del primero con
// el primero, el segundo con el segundo, etc. En cada pelea entre dos Pókemon
// siempre gana el más fuerte, y si tienen igual fuerza, la pelea no cuenta para
// ninguno de los dos. Gana el desafío el entrenador que consiga ganar más
// batallas, o de haber empate en la cantidad de peleas ganadas, el de mayor
// antigüedad.

function entrenadorGanadorDeDesafíoEntre_Y_(primerEntrenador, segundoEntrenador) {
    /*
        PROPÓSITO:
            * Describe al entrenador ganador del desafío entre los dos entrenadores dados.
        PARÁMETROS:
            * primerEntrenador:  Entrenador
            * segundoEntrenador: Entrenador
        TIPO: Entrenador
        PRECONDICIONES:
            * La lista de pókemons de los entrenadores dados no debe ser vacía.
    */
    
    cantidadDePeleasPókemonGanadasPorElPrimerEntrenador  := cantidadDePeleasPókemonGanadasPor_Contra_(lista(primerEntrenador), lista(segundoEntrenador))
    
    cantidadDePeleasPókemonGanadasPorElSegundoEntrenador := cantidadDePeleasPókemonGanadasPor_Contra_(lista(segundoEntrenador), lista(primerEntrenador))

    return (
             choose primerEntrenador when (cantidadDePeleasPókemonGanadasPorElPrimerEntrenador > cantidadDePeleasPókemonGanadasPorElSegundoEntrenador)
             segundoEntrenador       when (cantidadDePeleasPókemonGanadasPorElSegundoEntrenador > cantidadDePeleasPókemonGanadasPorElPrimerEntrenador)
             entrenadorMásAntiguoEntre_Y_(primerEntrenador, segundoEntrenador) otherwise 
    )
}

function cantidadDePeleasPókemonGanadasPor_Contra_(pókemons1, pókemons2) {
    /*
        PROPÓSITO:
            * Describe la cantidad de combates ganados por la primer lista de pókemons dada vs. la segunda lista de pókemons dada. 
        PARÁMETROS:
            * pókemons1: [Pókemon]
            * pókemons2: [Pókemon]
        TIPO: Número
        PRECONDICIONES:
            * No tiene (es una función total).
        OBSERVACIONES:
            * Pelean un pókemon de cada lista hasta que se acaben los Pókemon de una de ellos, resultando en batallas del primero con el primero, el segundo con el segundo, etc.
            * En cada pelea entre dos Pókemon siempre gana el más fuerte, y si tienen igual fuerza, la pelea no cuenta para ninguno de los dos.
    */

    pókemonsDeLaPrimerListaPorRecorrer  := pókemons1
    pókemonsDeLaSegundaListaPorRecorrer := pókemons2

    cantidadDePeleasGanadasPorLaPrimerListaAlMomento := 0

    while (not esVacía(pókemonsDeLaPrimerListaPorRecorrer) && not esVacía(pókemonsDeLaSegundaListaPorRecorrer)) {
        
        cantidadDePeleasGanadasPorLaPrimerListaAlMomento := cantidadDePeleasGanadasPorLaPrimerListaAlMomento ++
        unoSi_CeroSino(es_MásFuerteQue_(primero(pókemonsDeLaPrimerListaPorRecorrer), primero(pókemonsDeLaSegundaListaPorRecorrer)))

        pókemonsDeLaPrimerListaPorRecorrer  := resto(pókemonsDeLaPrimerListaPorRecorrer)
        pókemonsDeLaSegundaListaPorRecorrer := resto(pókemonsDeLaSegundaListaPorRecorrer)
    }
    
    return (cantidadDePeleasGanadasPorLaPrimerListaAlMomento)
}


// h) entrenadorGanadorDeDesafioEn_, que dada una lista de entrenadores,
// describe al entrenador ganador del desafío entre todos los entrenadores.
// El desafío de cada par de entrenadores es idéntico al que se describió en el
// punto anterior. En primer lugar compiten el primer entrenador con el segundo, y
// luego de cada pelea el entrenador que gana compite con el siguiente de la lista,
// hasta que no haya más entrenadores para competir. El ganador del desafío es el
// entrenador que gana la última batalla.

function entrenadorGanadorDeDesafioEn_(entrenadores) {
    /*
        PROPÓSITO:
            * Describe al entrenador ganador del desafío entre todos los entrenadores de la lista dada.
        PARÁMETROS:
            * entrenadores: [Entrenador]
        TIPO: Entrenador
        PRECONDICIONES:
            * La lista de entrenadores dada no debe ser vacía.
    */
    
    entrenadorGanadorAlMomento := primero(entrenadores)

    foreach entrenador in resto(entrenadores) {
        entrenadorGanadorAlMomento := entrenadorGanadorDeDesafíoEntre_Y_(entrenadorGanadorAlMomento, entrenador)
    }

    return (entrenadorGanadorAlMomento)
}

// i) fuerzaTotalDe_, que dado un entrenador, describe el número que es la suma
// de la fuerza de todos los Pókemon de ese entrenador.

function fuerzaTotalDe_(entrenador) {
    /*
        PROPÓSITO:
            * Describe la suma de la fuerza de todos los pókemons del entrenador dado.
        PARÁMETROS:
            * entrenador: Entrenador
        TIPO: Número
        PRECONDICIONES:
            * No tiene (es una función total).
    */
    
    fuerzaTotalAlMomento := 0

    foreach pókemon in lista(entrenador) {
        fuerzaTotalAlMomento := fuerzaTotalAlMomento + fuerza(pókemon)
    }

    return (fuerzaTotalAlMomento)
}

// j) fuerzaTotalEnBatallaEn_, que dada una lista de entrenadores, describe el
// número que es la suma de la fuerza de todos los Pókemon de todos los
// entrenadores recibidos.

function fuerzaTotalEnBatallaEn_(entrenadores) {
    /*
        PROPÓSITO:
            * Describe la suma de la fuerza de todos los pókemons de los entrenadores de la lista dada.
        PARÁMETROS:
            * entrenadores: [Entrenador]
        TIPO: Número
        PRECONDICIONES:
            * No tiene (es una función total).
    */
    
    fuerzaTotalDeLosPókemonsAlMomento := 0

    foreach entrenador in entrenadores {
        fuerzaTotalDeLosPókemonsAlMomento := fuerzaTotalDeLosPókemonsAlMomento + fuerzaTotalDe_(entrenador)
    }

    return (fuerzaTotalDeLosPókemonsAlMomento)
}

// k) mejorPókemonDe_ParaJugada, que dado un entrenador, si el entrenador es
// Táctico describe a su Pokémon de mayor nivel con sus valores duplicados, y si
// no es táctico describe al primero de su lista de Pókemon.

function mejorPókemonDe_ParaJugada(entrenador) {
    /*
        PROPÓSITO:
            * Describe el pókemon de mayor nivel del entrenador dado con sus valores duplicados, si éste es táctico; en caso contrario, describe el primero de su lista de pókemons.
        PARÁMETROS:
            * entrenador: Entrenador
        TIPO: Pókemon
        PRECONDICIONES:
            * La lista de pókemons del entrenador dado no debe ser vacía.
    */
    
    return (choose pókemon_ConValoresDuplicados(pókemonDeMayorDeNivelDe_(entrenador)) when (esTáctico(entrenador))
                   primero(lista(entrenador)) otherwise
        )
}

function pókemonDeMayorDeNivelDe_(entrenador) {
    /*
        PROPÓSITO:
            * Describe el pókemon de mayor nivel del entrenador dado.
        PARÁMETROS:
            * entrenador: Entrenador
        TIPO: Pókemon
        PRECONDICIONES:
            * La lista de pókemons del entrenador dado no debe ser vacía.
    */
    
    return (pókemonDeMayorNivelDe_(lista(entrenador)))
}

function pókemonDeMayorDeNivelDe_(pókemons) {
    /*
        PROPÓSITO:
            * Describe el pókemon de mayor nivel de la lista de pókemons dada.
        PARÁMETROS:
            * pókemons: [Pókemon]
        TIPO: Pókemon
        PRECONDICIONES:
            * La lista de pókemons dada no debe ser vacía.
    */
    
    pókemonDeMayorNivelVisto := primero(pókemons)

    foreach pókemon in resto(pókemons) {
        pókemonDeMayorNivelVisto := pókemonDeMayorNivelEntre_Y_(pókemonDeMayorNivelVisto, pókemon)
    }

    return (pókemonDeMayorNivelVisto)
}

function pókemonDeMayorNivelEntre_Y_(primerPókemon, segundoPókemon) {
    /*
        PROPÓSITO:
            * 
        PARÁMETROS:
            * primerPókemon:  Pókemon
            * segundoPókemon: Pókemon
        TIPO: Pókemon
        PRECONDICIONES:
            * No tiene (es una función total).
    */
    
    return (choose primerPókemon when (nivel(primerPókemon) > nivel(segundoPókemon))
                   segundoPókemon otherwise
        )
}

// l) ganadorDeDesafíoInteligenteDe_CombatesEntre_Y_, que dados un
// número de combates y dos entrenadores, describe al entrenador ganador del
// desafío inteligente entre ambos.
// A diferencia del desafío común, un desafío inteligente consiste solamente en la
// cantidad de combates dada. En cada combate el entrenador usa su mejor
// Pókemon para esa jugada, que luego no vuelve a competir. Notar que no juegan
// todos los Pókemon de la lista como en el desafío común, sino solamente la
// cantidad dada. Nuevamente, gana el que más combates gana, y si hay empate,
// el de mayor antigüedad.
// m) ganadorDeDesafíoInteligenteDe_CombatesEn_, que dados un número
// de combates por desafío y una lista de entrenadores, describe al entrenador
// ganador del desafío inteligente entre todos los entrenadores dados.
// El desafío inteligente entre varios entrenadores sigue la misma mecánica que el
// común, pero en el desafío entre cada par de entrenadores, se realiza un desafío
// inteligente.

// FUNCIONES AUXILIARES 🐱‍🏍

function unoSi_CeroSino(condición) {
    /*
        PROPÓSITO:
            * Describe 1 si se cumple la condición dada; describe 0 en caso contrario.
        PARÁMETROS:
            * condición: Booleano
        TIPO: Número (0 o 1)
        PRECONDICIONES:
            * No tiene (es una función total).
    */
    
    return (choose 1 when (condición)
                   0 otherwise
    )
}

function listaVacía() {
    /*
        PROPÓSITO:
            * Describe la lista vacía.
        TIPO: [Elemento]
        PRECONDICIONES:
            * No tiene (es una función total).
    */
    
    return ([])
}

function cantidadDeElementosDe_(lista) {
    /*
        PROPÓSITO:
            * Describe la cantidad de elementos de la lista dada.
        PARÁMETROS:
            * lista: [Elemento]
        TIPO: Número
        PRECONDICIONES:
            * No tiene (es una función total).
        OBSERVACIONES:
            * Recorrido de acumulación de la cantidad de elementos de la lista dada.
    */
    
    cantidadDeElementosAlMomento := 0

    foreach elemento in lista {
        cantidadDeElementosAlMomento := cantidadDeElementosAlMomento + 1
    }

    return (cantidadDeElementosAlMomento)
}
