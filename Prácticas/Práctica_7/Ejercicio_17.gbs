// El casino, parte 2
// En el marco del ejercicio del casino de la práctica 6, escribir las siguientes
// operaciones. En cada caso, recordar escribir primero el contrato, y expresar la
// estrategia usando subtareas (preferentemente con la metodología top-down).
// a. estáElJugador_(nroJugador), que denota verdadero si el jugador
// indicado tiene registrada, al menos, una apuesta.
// b. alguienJugóA_MasDe_(nroApostado, cantidadMínima), que denota
// verdadero si algún jugador apostó al número indicado por un monto mayor a
// cantidadMínima.

// a.

function estáElJugador_(nroJugador) {
    /*
        PROPÓSITO:
            * Indica si el jugador **nroJugador** tiene registrada, al menos una apuesta.
        PARÁMETROS:
            * nroJugador: Número - El número del jugador del que se indica si tiene registrada una apuesta en la mesa de apuestas actual.
        TIPO: Booleano.
        PRECONDICIONES:
            * Debe haber una representación válida de una mesa de apuestas en el tablero.
            * La celda actual debe tener una representación válida de una apuesta.
            * **nroJugador** debe ser mayor o igual a cero.
        OBSERVACIONES:
            * Recorrido de búsqueda de la celda que tiene un registro de una apuesta del jugador **nroJugador**. 
    */

    IrAPrimeraCeldaEnUnRecorridoAl_Y_(Este,Norte)

    while (not estáElJugador_Acá(nroJugador) && haySiguienteCeldaEnUnRecorridoAl_Y_(Este,Norte)) {

        IrASiguienteCeldaEnUnRecorridoAl_Y_(Este,Norte)
    }

    return (estáElJugador_Acá(nroJugador))
}

function estáElJugador_Acá(nroJugador) {
    /*
        PROPÓSITO:
            * Indica si el jugador **nroJugador** está en el registro de la apuesta actual.
         PARÁMETROS:
            * nroJugador: Número - El número del jugador del cual se indica si está en la celda actual. 
        TIPO: Booleano.
        PRECONDICIONES:
            * La celda actual debe tener una representación válida de una apuesta.
            * **nroJugador** debe ser mayor o igual a cero.
    */
    
    return (nroJugador() == nroJugador)
}

function nroJugador() {
    /*
        PROPÓSITO:  
            * Describe el número de jugador en la apuesta actual.
        TIPO: Número.
        PRECONDICIONES:
            * La celda actual debe tener una representación válida de una apuesta.
    */
    
    return (nroBolitas(colorJugador()))
}

function colorJugador() {
    /*
        PROPÓSITO:
            * Describe el color que representa al jugador de la posición actual.
        TIPO: Color.
        PRECONDICIONES:
            * No tiene (es una función total).
    */
    return (Rojo)
}
// b.

function alguienJugóA_MasDe_(nroApostado, cantidadMínima) {
    /*
        PROPÓSITO:
            * Indica si algún jugador de la mesa apostó por el número **nroApostado** por un monto mayor a  **cantidadMínima**.
        PARÁMETROS:
            * nroApostado:    Número - El número del cual se indica si existe algún jugador de la mesa actual que haya realizado una apuesta por él.
            * cantidadMínima: Número - La cantidad de dinero que se 
        TIPO: Booleano.
        PRECONDICIONES:
            * Debe haber una representación válida de una mesa de apuestas en el tablero.
            * **nroApostado** debe ser mayor o igual a cero.
            * **cantidadMínima** debe ser mayor o igual a cero.
    */
    
    IrAPrimeraCeldaEnUnRecorridoAl_Y_(Este,Norte)

    while (not elJugadorActualJugóA_MásDe_(nroApostado, cantidadMínima) && haySiguienteCeldaEnUnRecorridoAl_Y_(Este,Norte)) {

        IrASiguienteCeldaEnUnRecorridoAl_Y_(Este,Norte)
    }

    return (elJugadorActualJugóA_MásDe_(nroApostado, cantidadMínima))
}

function elJugadorActualJugóA_MásDe_(nroApostado, monto) {
    /*
        PROPÓSITO:
            * Indica si el jugador de la celda actual realizó una apuesta al número **nroApostado** por un monto mayor a **monto**.
        PARÁMETROS:
            * nroApostado:    Número - El número del cual se indica si el jugador de la posición actual realizó una apuesta. 
            * monto:          Número - La cantidad de dinero a comparar con el monto de la apuesta actual.
        PRECONDICIONES:
            * Debe haber un registro de una apuesta válida en la celda actual.
            * **nroApostado** debe ser mayor o igual a cero.
            * **monto** debe ser mayor o igual a cero.
    */
    
    return (nroApostado() == nroApostado && montoDeLaApuestaActual() > monto)
}

function nroApostado() {
    /*
        PROPÓSITO:
            * Describe el número apostado en la apuesta actual.
        TIPO: Número.
        PRECONDICIONES:
            * Debe haber una apuesta válida en la celda actual.
    */
    return (nroBolitas(colorNroApostado()))
}

function montoDeLaApuestaActual() {
    /*
        PROPÓSITO:
            * Describe el monto de la apuesta actual.
        PRECONDICIONES:
            * Debe haber una apuesta válida en la celda actual.
    */ 
    return (nroBolitas(colorMonto()))
}

function colorNroApostado() {
    /*
        PROPÓSITO:
            * Describe el color que representa el número apostado.
        TIPO: Tipo
        PRECONDICIONES:
            * No tiene (es una función total).
    */
    
    return (Azul)
}

function colorMonto() {
    /*
        PROPÓSITO:
            * Describe el color que representa al monto de la apuesta actual.
        TIPO: Color.
        PRECONDICIONES:
            * No tiene (es una función total).
    */
    return (Verde)
}