type ProtectoraDeAnimales is record {
/*
    PROPÓSITO: Modela una entidad protectora de animales.
    Inv. Rep.:
    * No hay dos animales con el mismo nombre.
    * No hay dos adoptantes con el mismo DNI
    * No hay dos cuidadores con el mismo nombre
    */

    field animales // [Animal]
    field cuidadores // [Cuidador]
    field adopciones // [Adopcion]
    field adoptantes // [Adoptante]
}

type Animal is record {
/*
    PROPÓSITO: Modela un Animal.
    INV.REP:
    * El campo nombre no puede estar
    vacio
    * mesesDeEdad es un número mayor o
    igual a cero.
    */

    field nombre // String
    field especie // Especie
    field mesesDeEdad // Número
    field vacunas // [Vacuna]
    field enRecuperacion // Booleano
}

type Adopción is record {
/*
    PROPÓSITO: Modela una adopción.
    INV.REP:
    * El campo dniAdoptante no puede estar
    vacio
    * El campo nombreAnimal no puede estar
    vacio
    */

    field dniAdoptante // String
    field nombreAnimal // String
    field fechaAdopcion // Fecha
}

type Cuidador is record {
/*
    PROPÓSITO: Modela un Cuidador.
    INV.REP:
    * El campo nombre no puede estar
    vacío
    * No hay dos animalesACargo
    iguales
    */

    field nombre // String
    field animalesACargo // [String]
}

type Especie is variant {
/*
    PROPÓSITO: Modela las especies de
    animales.
    */

    case Perro {}
    case Gato {}
    case Conejo {}
    case Pájaro {}
}

type TipoDeVacuna is variant {
/*
    PROPÓSITO: Modela los tipos de
    vacunas.
    */
    case Antirrábica {}
    case TripleFelina {}
    case Polivalente {}
    case Moquillo {}
}

type Adoptante is record {
/*
    PROPÓSITO: Modela los adoptantes.
    INV.REP:
    * El campo dni no puede estar vacío
    * El campo teléfono no puede estar vacío
    * El campo dirección no puede estar vacío
    */

    field dni // String
    field teléfono // String
    field dirección // String
}

type Vacuna is record {
    /*
    PROPÓSITO: Modela una Vacuna.
    */

    field tipo // TipoDeVacuna
    field fechaAplicacion //Fecha
}

// Punto 1)
// Escriba la función protectoraConAnimalesVacunadosConAntirrabicaSiCorrespondeEn_ que dada una
// protectora, describe la protectora con todos los animales que tienen más de 2 meses de edad con la Antirrábica
// incluida en sus vacunas, esta vacuna se aplica una unica vez, si ya fue aplicada, no debe aplicarse nuevamente.
// Para solucionar este problema puede hacer uso de la función primitiva contieneLaVacuna_En_, que dado un tipo
// de vacuna y una lista de vacunas, indica si la vacuna con el tipo dado existe en la lista dada.

function protectoraConAnimalesVacunadosConAntirrabicaSiCorrespondeEn_(protectora) {
    /*
        PROPÓSITO:
            * Describe la protectora con todos los animales que tienen más de 2 meses de edad con la Antirrábica incluída en sus vacunas
        PARÁMETROS:
            * protectora: ProtectoraDeAnimales
        TIPO: ProtectoraDeAnimales
        PRECONDICIONES:
            * No tiene (es una función total).
    */
    
    animalesDeMásDeDosMesesConLaAntirrábicaAlMomento := []

    foreach animal in animales(protectora) {
        animalesDeMásDeDosMesesConLaAntirrábicaAlMomento := animalesDeMásDeDosMesesConLaAntirrábicaAlMomento ++
        singular_Si_(animal, _tieneMásDe_MesesDeEdad(animal, 2) && contieneLaVacuna_En_(Antirrábica, vacunas(animal)))
    }

    return (ProtectoraDeAnimales(protectora | animales <- animalesDeMásDeDosMesesConLaAntirrábicaAlMomento))
}

function _tieneMásDe_MesesDeEdad(animal, meses) {
    /*
        PROPÓSITO:
            * Indica si la edad del animal dado es igual al número de meses dado.
        PARÁMETROS:
            * animal: Animal
            * meses: Número
        TIPO: Booleano
        PRECONDICIONES:
            * **meses** debe ser >= 0.
    */
    
    return (mesesDeEdad(animal) == meses)
}

// Punto 2)
// Escriba la función nombreDeAnimalesDisponiblesParaAdopcionEn_ que dada una protectora, describe una lista
// con los nombres de los animales que están aptos para ser adoptados. Un animal está apto para ser adoptado
// cuando tiene más de 2 meses de edad, no está en recuperación ,cuando entre sus vacunas tiene :
// - Para los gatos: La antirrábica, la triple felina y la de moquillo
// - Para los perros: la antirrábica, la polivalente y la del moquillo
// - para los conejos: la antirrábica y el moquillo
// - para los pájaros: ninguna.
// Como estrategia pensar una subtarea que dado un animal, reconoce la especie del animal y en base a esto evaluar
// si tiene las vacunas necesarias para ser adoptado

function nombreDeAnimalesDisponiblesParaAdopcionEn_(protectora) {
    /*
        PROPÓSITO:
            * Describe una lista con los nombres de los animales que están aptos para ser adoptados en la protectora dada.
        PARÁMETROS:
            * protectora: ProtectoraDeAnimales
        TIPO: [String]
        PRECONDICIONES:
            * No tiene (es una función total).
    */
    
    animalesAptosParaSerAdoptadosAlMomento := []

    foreach animal in animales(protectora) {
        animalesAptosParaSerAdoptadosAlMomento := animalesAptosParaSerAdoptadosAlMomento ++ 
        singular_Si_(animal, _tieneMásDe_MesesDeEdad(animal, 2) && not enRecuperacion(animal) && ...)
    }


    return (nombresDe_(animalesAptosParaSerAdoptadosAlMomento))
}

function nombresDe_(animales) {
    /*
        PROPÓSITO:
            * Describe la lista de nombres de la lista de animales dada.
        PARÁMETROS:
            * animales: [Animal]
        TIPO: [String]
        PRECONDICIONES:
            * No tiene (es una función total).
    */
    
    nombresDeLosAnimalesAlMomento := []

    foreach animal in animales {
        nombresDeLosAnimalesAlMomento := nombresDeLosAnimalesAlMomento ++ [nombre(animal)]
    }

    return (nombresDeLosAnimalesAlMomento)
}