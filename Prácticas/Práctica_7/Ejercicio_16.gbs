// La torre de control
// En este ejercicio las columnas del tablero representan canales aéreos por los que
// despegan y aterrizan aviones. Se considera que un canal está libre para aterrizar si
// no hay avión en ninguna de las posiciones de ese el canal. Los aviones se
// representan con tantas bolitas azules como el número de su vuelo, y con una bolita
// Roja en la misma celda si está aterrizando o con una bolita Verde si está
// despegando. El tablero representa a todo el aeropuerto; en cada celda hay a lo
// sumo un avión. Implementar las siguientes operaciones:

// a. La función cantidadDeCanalesLibres(), que devuelva la cantidad de
// canales sin aviones.

function cantidadDeCanalesLibres() {
    /*
        PROPÓSITO:
            * Devuelve la cantidad de canales libres que hay en el aeropuerto.
        TIPO: Número.
        PRECONDICIONES:
            * Debe existir una representación válida de un aeropuerto en el tablero.
        OBSERVACIONES:
            * Recorrido de acumulación por canales aéreos.
    */
    IrAlBorde(Oeste)

    cantidadDeCanalesLibresVistosYa := unoSi_CeroSino(esUnCanalLibre())

    while (puedeMover(Este)) {
        Mover(Este)
        cantidadDeCanalesLibresVistosYa := cantidadDeCanalesLibresVistosYa + unoSi_CeroSino(esUnCanalLibre())
    }

    return (cantidadDeCanalesLibresVistosYa + unoSi_CeroSino(esUnCanalLibre()))
}

function esUnCanalLibre() {
    /*
        PROPÓSITO:
            * Indica si el canal actual está libre o no.
        TIPO: Booleano.
        PRECONDICIONES:
            * Debe existir una representación válida de un canal aéreo en la columna actual.
            * En cada celda hay a lo sumo un avión.
        OBSERVACIONES:
            * Las columnas del tablero representan canales aéreos por los que despegan y aterrizan aviones.
            * Se considera que un canal está libre para aterrizar si no hay avión en ninguna de las posiciones de ese el canal.
            * Recorrido de búsqueda por celdas.
    */
    
    IrAlBorde(Norte)

    while (not hayAvión() && puedeMover(Sur)) {
        Mover(Sur)
    }

    return (not hayAvión())
}

function hayAvión() {
    /*
        PROPÓSITO: 
            * Indica si hay un avión en la posición actual.
        TIPO: Booleano.
        PRECONDICIONES:
            * Debe existir una representación válida de un aeropuerto en el tablero.
            * En cada celda hay a lo sumo un avión.
    */
    
    return (hayBolitas(colorAvión()))
}

function colorAvión() {
    /*
        PROPÓSITO:
            * Describe el color que representa a un avión.
        TIPO: Color.
        PRECONDICIONES:
            * Debe existir una representación válida de un aeropuerto en el tablero. 
    */
    
    return (Azul)
}

// b. La función cantidadDeAvionesDespegando(), que devuelva la cantidad
// total de aviones que están despegando en todo el aeropuerto.

function cantidadDeAvionesDespegando() {
    /*
        PROPÓSITO: 
            * Devuelve la cantidad total de aviones que están despegando en el aeropuerto.
        TIPO: Número.
        PRECONDICIONES:
            * Debe existir una representación válida de un aeropuerto en el tablero.
        OBSERVACIONES:
            * Los aviones se representan con tantas bolitas azules como el número de su vuelo, y con una bolita Verde si está despegando.
            * Recorrido de acumulación por celdas.
    */

    IrAPrimeraCeldaEnUnRecorridoAl_Y_(Este,Norte)

    cantidadDeAvionesDespegandoVistosYa := unoSi_CeroSino(hayAviónDespegando())

    while (haySiguienteCeldaEnUnRecorridoAl_Y_(Este,Norte)) {
        IrASiguienteCeldaEnUnRecorridoAl_Y_(Este,Norte)
        cantidadDeAvionesDespegandoVistosYa := cantidadDeAvionesDespegandoVistosYa + unoSi_CeroSino(hayAviónDespegando())
    }

    return (cantidadDeAvionesDespegandoVistosYa + unoSi_CeroSino(hayAviónDespegando()))
}

function hayAviónDespegando() {
    /*
        PROPÓSITO:
            * Indica si hay un avión despegando en la posición actual.
        TIPO: Booleano.
        PRECONDICIONES:
            * Debe existir una representación válida de un aeropuerto en el tablero.
    */
    
    return (hayAvión() && elAviónEstáDespegando())
}

function elAviónEstáDespegando() {
    /*
        PROPÓSITO:
            * Indica si el avión de la posición actual está despegando.
        TIPO: Booleano.
        PRECONDICIONES:
            * Debe existir una representación válida de un aeropuerto en el tablero.
            * Debe haber un avión en la celda actual.
    */
    
    return (hayBolitas(Verde))
}

// c. El procedimiento IrACanalLibreParaDespegar(), que deje el cabezal
// en el primer canal libre más cercano al Sureste del aeropuerto.

procedure IrACanalLibreParaDespegar() {
    /*
        PROPÓSITO:
            * Deja el cabezal en el primer canal libre más cercano al Sureste del Aeropuerto.
        PRECONDICIONES:
            * Debe existir una representación válida de un aeropuerto en el tablero.
            * Debe haber al menos un canal libre en el aeropuerto.
        OBSERVACIONES:
            * Recorrido de búsqueda.
    */
    
    IrAlBorde(Este)
    IrAlBorde(Sur)

    while (not esUnCanalLibre() && puedeMover(Oeste)) {
        Mover(Oeste)
    }
}

// d. La función cantidadDeAvionesTotales(), que devuelva la cantidad
// total de aviones que están despegando/o aterrizando en todo el aeropuerto.

function cantidadDeAvionesTotales() {
    /*
        PROPÓSITO:
            * Devuelve la cantidad total de aviones que están despegando o aterrizando en todo el aeropuerto.
        TIPO: Número.
        PRECONDICIONES:
            * Debe existir una representación válida de un aeropuerto en el tablero.
        OBSERVACIONES:
            * Recorrido de acumulación por celdas.
    */
    
    IrAPrimeraCeldaEnUnRecorridoAl_Y_(Este,Norte)

    cantidadDeAvionesVistosYa := unoSi_CeroSino(hayAvión())

    while (haySiguienteCeldaEnUnRecorridoAl_Y_(Este,Norte)) {
        IrASiguienteCeldaEnUnRecorridoAl_Y_(Este,Norte)
        cantidadDeAvionesVistosYa := cantidadDeAvionesVistosYa + unoSi_CeroSino(hayAvión())
    }

    return (cantidadDeAvionesVistosYa + unoSi_CeroSino(hayAvión()))
}

// e. El procedimiento IrACanalLibreParaAterrizar(), que debe dejar al
// cabezal en el primer canal libre más cercano al Noroeste del aeropuerto.

procedure IrACanalLibreParaAterrizar() {
    /*
        PROPÓSITO:
            * Deja el cabezal en el primer canal libre más cercano al Noroeste del aeropuerto.
        PRECONDICIONES:
            * Debe existir una representación válida de un aeropuerto en el tablero.
            * Debe haber al menos un canal libre en el aeropuerto.
        OBSERVACIONES:
            * Recorrido de búsqueda.
    */
    IrAlBorde(Oeste)
    IrAlBorde(Norte)

    while (not esUnCanalLibre() && puedeMover(Este)) {
        Mover(Este)
    }
}

// f. La función cantidadDeCanalesConColisiónInminente(), que
// devuelva la cantidad de carriles con posibles colisiones en todo el
// aeropuerto. Se considera que hay una colisión posible si en el mismo carril
// hay un avión que está despegando debajo de un avión que está aterrizando.
// g. El procedimiento IrACanalConColisiónInminente(), que deje el
// cabezal en el primer Carril con una colisión inminente (desde el extremo
// Suroeste del aeropuerto).
// h. La función mayorNroDeVueloDespegando(), que retorne el número de
// vuelo más grande que esté despegando en el aeropuerto.

 function mayorNroDeVueloDespegando() {
    /*
        PROPÓSITO:
            * Describe el número de vuelo más grande que esté despegando en el aeropuerto.
        TIPO: Número.
        PRECONDICIONES:
            * Debe existir una representación válida de un aeropuerto en el tablero.
            * Debe haber al menos un avión despegando en el aeropuerto.
        OBSERVACIONES:
            * Recorrido de búsqueda por celdas.
    */
    
    mayorNroDeAviónDespegandoHastaAhora := nroPrimerAviónEncontradoDespegando()

    while (haySiguienteCeldaEnUnRecorridoAl_Y_(Este,Norte)) {
        IrASiguienteCeldaEnUnRecorridoAl_Y_(Este,Norte)

        if (hayAviónDespegando()) {
            mayorNroDeAviónDespegandoHastaAhora := máximoEntre_Y_(mayorNroDeAviónDespegandoHastaAhora, nroDeVuelo())
        } // Usar un choose acá...
    }
    
    return (máximoEntre_Y_(mayorNroDeAviónDespegandoHastaAhora, nroDeVuelo()))
 }

 function nroPrimerAviónEncontradoDespegando() {
    /*
        PROPÓSITO:
            * Describe el número del primer avión encontrado despegando.
              Deja el cabezal en la posición donde se encontró el avión despegando.
        TIPO: Número.
        PRECONDICIONES:
            * Debe existir una representación válida de un aeropuerto en el tablero.
            * Debe haber al menos un avión despegando en el aeropuerto.
        OBSERVACIONES:
            * Recorrido de búsqueda por celdas.
    */
    
    IrAPrimeraCeldaEnUnRecorridoAl_Y_(Este,Norte)

    while (not hayAviónDespegando() && haySiguienteCeldaEnUnRecorridoAl_Y_(Este,Norte)) {
        IrASiguienteCeldaEnUnRecorridoAl_Y_(Este,Norte)
    }

    return (nroDeVuelo())
 }

function nroDeVuelo() {
    /*
        PROPÓSITO:
            *
        TIPO: Número.
        PRECONDICIONES:
            * 
    */
    
    return (nroBolitas(Azul))
}


// Funciones auxiliares.

function unoSi_CeroSino(condición) {
    /*
        PROPÓSITO:
            * Describe el número uno si la condición dada es verdadera; en caso contrario, describe el cero.
        PARÁMETROS:
            * condición: Booleano - Describe la condición a validar.
        TIPO: Número (0 o 1).
        PRECONDICIONES:
            * No tiene (es una función total).
    */
    
    return (choose 1 when (condición)
                   0 otherwise
    )
}

procedure IrAPrimeraCeldaEnUnRecorridoAl_Y_(dirPrincipal, dirSecundaria) {
    /*
        PROPÓSITO:
            * Ubica el cabezal en el inicio de un recorrido de direcciones **dirPrincipal** y **dirSecundaria**.
        PARÁMETROS:
            * dirPrincipal: Dirección - Describe la primera dirección del recorrido.
            * dirSecundaria: Dirección - Describe la segunda dirección del recorrido.
        PRECONDICIONES:
            * Las direcciones dadas no deben ser ni iguales ni opuestas.
    */
    IrAlBorde(opuesto(dirPrincipal))
    IrAlBorde(opuesto(dirSecundaria))
}

// b.
function haySiguienteCeldaEnUnRecorridoAl_Y_(dirPrincipal, dirSecundaria) {
    /*
        PROPÓSITO:
            * Indica si existe una celda siguiente en un recorrido de direcciones **dirPrincipal** y **dirSecundaria**.
        PARÁMETROS:
            * dirPrincipal: Dirección - Describe la primera dirección del recorrido.
            * dirSecundaria: Dirección - Describe la segunda dirección del recorrido.
        TIPO: Booleano.
        PRECONDICIONES:
            * Las direcciones dadas no deben ser ni iguales ni opuestas.
    */  
    return (puedeMover(dirPrincipal) || puedeMover(dirSecundaria))
}

// c.
procedure IrASiguienteCeldaEnUnRecorridoAl_Y_(dirPrincipal, dirSecundaria) {
    /*
        PROPÓSITO:
            * Mueve el cabezal a la siguiente celda de un recorrido de direcciones **dirPrincipal** y **dirSecundaria**.
        PARÁMETROS:
            * dirPrincipal: Dirección - Describe la primera dirección del recorrido.
            * dirSecundaria: Dirección - Describe la segunda dirección del recorrido.
        PRECONDICIONES:
            * Debe existir al menos una celda siguiente en el recorrido.
            * Las direcciones dadas no deben ser ni iguales ni opuestas.
    */
    if (puedeMover(dirPrincipal)){
        Mover(dirPrincipal)
    }
    else {
        IrAlBorde(opuesto(dirPrincipal))
        Mover(dirSecundaria)
    }
}