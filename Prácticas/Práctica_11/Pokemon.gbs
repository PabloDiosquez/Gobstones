// Se desea modelar una parte de un juego de Pókemon mediante los siguientes tipos:

type TipoDePókemon is variant{
    /* 
    PROPÓSITO:
        * Modelar los tipos de Pókemon posibles */
    case Tierra {}
    case Agua {}
    case Fuego {}
}

type Pókemon is record {
    /*
     PROPÓSITO: 
        *Modelar un Pókemon
    INV.REP.: 
        * La fuerza y el nivel son mayores o iguales a 0
        * Si está debilitado, su fuerza es cero.
     */

    field tipo // TipoDePókemon
    field fuerza // Número
    field estáVivo // Booleano.
    field nivel // Número
}

// Ejercicios con Registros y Variantes
// Definir las siguientes funciones:
// a) _esMásFuerteQue_, que dados dos Pókemon indica si el primero tiene más
// fuerza que el segundo.

function _esMásFuerteQue_(pókemon1, pókemon2) {
    /*
        PROPÓSITO:
            * Indica si el primer pókemon dado tiene más fuerza que el segundo dado.
        PARÁMETROS:
            * pókemon1: Pókemon
            * pókemon2: Pókemon
        TIPO: Booleano
        PRECONDICIONES:
            * No tiene (es una función total).
    */
    
    return (fuerza(pókemon1) > fuerza(pókemon2))
}

// b) esDeMayorNivel_Que_, que dados dos Pókemon indica si el si el primero
// tiene un nivel más alto que el segundo.

function esDeMayorNivel_Que_(pókemon1, pókemon2) {
    /*
        PROPÓSITO:
            * Indica si el primer pókemon dado tiene un nivel más alto que el segundo pókemon dado.
        PARÁMETROS:
            * pókemon1: Pókemon
            * pókemon2: Pókemon
        TIPO: Booleano
        PRECONDICIONES:
            * No tiene (es una función total).
    */
    
    return (nivel(pókemon1) > nivel(pókemon2))
}

// c) pókemon_PotenciadoEn_, que dado un Pókemon y un número, describe el
// Pókemon resultante de multiplicar la fuerza y el nivel del Pókemon dado por ese
// número.

function pókemon_PotenciadoEn_(pókemon, número) {
    /*
        PROPÓSITO:
            * Describe el pókemon resultante de multiplicar la fuerza y el nivel del pókemon dado por el número dado.
        PARÁMETROS:
            * pókemon: Pókemon
            * número: Número
        TIPO: Pókemon
        PRECONDICIONES:
            * **número** debe ser >= 0.
    */
    
    return (
        Pokémon(pókemon | 
                          fuerza <- fuerza(pókemon)*número
                        , nivel  <- nivel(pókemon) *número 
        )
    )
}

// d) pókemon_ConValoresDuplicados, que dado un Pókemon, describe el
// Pókemon resultante de duplicar la fuerza y el nivel del Pokémon dado.

function pókemon_ConValoresDuplicados(pókemon) {
    /*
        PROPÓSITO:
            * Describe el pókemon que resulta de duplicar los valores de fuerza y de nivel del pókemon dado.
        PARÁMETROS:
            * pókemon: Pókemon
        TIPO: Pókemon
        PRECONDICIONES:
            * No tiene (es una función total).
    */
    
    return (pókemon_PotenciadoEn_(pókemon, 2))
}

// e) pókemon_PotenciadoSiEsDeTipo_En(pokémon , tipo,n), que dado un
// Pókemon, un tipo de Pókemon y un número, describe el Pokémon resultante de
// potenciar el dado en el número dado, solamente si es del tipo recibido, y el
// original si no.

function pókemon_PotenciadoSiEsDeTipo_En_(pókemon, tipo, número) {
    /*
        PROPÓSITO:
            * Describe el pókemon resultante de potenciar en el número dado al pókemon dado, sólo si es del tipo recibido; en caso contrario, describe el pókemon original.
        PARÁMETROS:
            * pókemon: Pókemon
            * tipo: TipoDePókemon
            * número: Número
        TIPO: Pókemon
        PRECONDICIONES:
            * **número** debe ser >= 0.
    */
    
    return (choose pókemon_PotenciadoEn_(pókemon, número) when (_esDeTipo_(pokémon, tipo))
                   pókemon otherwise
    )
}

function _esDeTipo_(pókemon, tipoDado) {
    /*
        PROPÓSITO:
            * Indica si el pókemon dado es del tipo dado.
        PARÁMETROS:
            * pókemon: Pókemon
            * tipoDado: TipoDePókemon
        TIPO: Booleano.
        PRECONDICIONES:
            * No tiene (es una función total).
    */
    
    return (tipo(pokémon) == tipoDado)
}

// f) pókemon_Derrotado, que dado un Pókemon, describe el Pokémon resultante
// de debilitar al Pókemon dado (o sea, su fuerza será 0 y su estado, debilitado).

function pókemon_Derrotado(pókemon) {
    /*
        PROPÓSITO:
            * Describe el pókemon que resulta de debilitar al pókemon dado.
        PARÁMETROS:
            * pókemon: Pókemon
        TIPO: Pókemon
        PRECONDICIONES:
            * No tiene (es una función total).
        OBSERVACIONES:
            * Si el pókemon está debilitado, su fuerza es cero.
    */
    
    return (Pókemon(pókemon | fuerza <- 0))
}


// Ejercicios con Listas de Registros
// Definir las siguientes funciones:
// a) pókemonDe_Entrenados_, que dada una lista de Pókemon y un número,
// describe la lista resultante de potenciar cada Pókemon de la lista dada en la
// cantidad dada.

function pókemonDe_Entrenados_(pókemons, número) {
    /*
        PROPÓSITO:
            * Describe la lista que resulta de potenciar en el número dado los pókemons de la lista dada.
        PARÁMETROS:
            * pókemons: [Pókemon]
            * número: Número
        TIPO: [Pókemon]
        PRECONDICIONES:
            * **número** debe ser >= 0.
    */
    
    pókemonsPotenciadosAlMomento := []

    foreach pókemon in pókemons {
        pókemonsPotenciadosAlMomento := pókemonsPotenciadosAlMomento
                                             ++ [pókemon_PotenciadoEn_(pókemon, número)]
    }

    return (pókemonsPotenciadosAlMomento)
}

// b) pókemonDe_DelTipo_, que dada una lista de Pókemon y un tipo de Pókemon,
// describe la lista de aquellos Pókemon de la lista dada que son del tipo dado.

function pókemonDe_DelTipo_(pókemons, tipoDado) {
    /*
        PROPÓSITO:
            * Describe la lista de los pókemons de la lista dada que son del tipo dado.
        PARÁMETROS:
            * pókemons: [Pókemon]
            * tipoDado: TipoDePókemon
        TIPO: [Pókemon]
        PRECONDICIONES:
            * No tiene (es una función total).
    */
    
    pókemonsDelTipoDadoAlMomento := []

    foreach pókemon in pókemons {
        pókemonsDelTipoDadoAlMomento := pókemonsDelTipoDadoAlMomento ++
                                                singular_Si_(pókemon, _esDeTipo_(pókemon, tipo))
    }

    return (pókemonsDelTipoDadoAlMomento)
}

// c) elMásFuerteDe_, que dada una lista de Pókemon, describe el pókemon de
// nivel más alto de toda la lista; si hay dos o más del mismo nivel más alto, da lo
// mismo cual se describe. ¿Qué precondición se debe exigir?

function elMásFuerteDe_(pókemons) {
    /*
        PROPÓSITO:
            * Describe el pókemon de nivel más alto de la lista de pókemons dada.
        PARÁMETROS:
            * pókemons: [Pókemon]
        TIPO: Pókemon
        PRECONDICIONES:
            * La lista de pókemons dada no debe ser vacía.
    */
    
    elMásFuerteAlMomento := primero(pókemons)

    foreach pókemon in resto(pókemons) {
        elMásFuerteAlMomento := elMásFuerteEntre_Y_(elMásFuerteAlMomento, pókemon)
    }

    return (elMásFuerteAlMomento)
}

function elMásFuerteEntre_Y_(pókemon1, pókemon2) {
    /*
        PROPÓSITO:
            * Describe el pókemon de nivel más alto entre los dos pókemons dados.
        PARÁMETROS:
            * pókemon1: Pókemon
            * pókemon2: Pókemon
        TIPO: Pókemon
        PRECONDICIONES:
            * No tiene (es una función total).
    */
    
    return (choose pókemon1 when(nivel(pókemon1) > nivel(pókemon2))
                   pókemon2 otherwise
    )
}

// d) pókemonDe_DelTipo_Duplicados, que dada una lista de Pókemons y un tipo
// de Pókemon, describe lista de Pókemon resultante de duplicar aquellos
// Pókemon de la lista original que son del tipo dado, dejando los demás
// exactamente igual. El orden en la lista resultante debe ser el mismo que en la
// lista dada.




// e) elPókemonMásDébilDe_, que dada una lista de Pókemon describe al
// Pókemon de nivel más bajo de toda la lista; si hay dos o más del mismo nivel
// más bajo, da lo mismo cual se describe. ¿Cuál es la precondición de esta
// función?

function elPókemonMásDébilDe_(pókemons) {
    /*
        PROPÓSITO:
            * Describe el pókemon de nivel más bajo de la lista de pókemons dada.
        PARÁMETROS:
            * pókemons: [Pókemon]
        TIPO: Pókemon
        PRECONDICIONES:
            * La lista de pókemons dada debe ser no vacía.
    */
    
    pókemonMásDébilAlMomento := primero(pókemons)

    foreach pókemon in resto(pókemons) {
        pókemonMásDébilAlMomento := elMásDébilEntre_Y_(pókemonMásDébilAlMomento, pókemon)
    }

    return (pókemonMásDébilAlMomento)
}

function elMásDébilEntre_Y_(pókemon1, pókemon2) {
    /*
        PROPÓSITO:
            * Describe el pókemon de nivel más bajo de los dos pókemons dados.
        PARÁMETROS:
            * pókemon1: Pókemon
            * pókemon2: Pókemon
        TIPO: Pókemon
        PRECONDICIONES:
            * No tiene (es una función total).
    */
    
    return (choose pókemon1 when (nivel(pókemon1) < nivel(pókemon2))
                   pókemon2 otherwise
    )
}

// f) pókemonsDebilitadosDe_, que dada una lista de Pókemon, describe la lista
// de aquellos pókemons de la lista dada que están debilitados.

function pókemonsDebilitadosDe_(pókemons) {
    /*
        PROPÓSITO:
            * Describe la lista de pókemons debilitados de la lista dada. 
        PARÁMETROS:
            * pókemons: [Pókemon]
        TIPO: [Pókemon]
        PRECONDICIONES:
            * No tiene (es una función total).
    */

    pókemonsDebilitadosAlMomento := []

    foreach pókemon in pókemons {
        pókemonsDebilitadosAlMomento := pókemonsDebilitadosAlMomento ++ 
                                                singular_Si_(pókemon, estáDebilitado_(pókemon))
    }
    
    return (pókemonsDebilitadosAlMomento)
}

function estáDebilitado_(pókemon) {
    /*
        PROPÓSITO:
            * Indica si el pókemon dado está debilitado.
        PARÁMETROS:
            * pókemon: Pókemon
        TIPO: Booleano
        PRECONDICIONES:
            * No tiene (es una función total).
    */
    
    return (fuerza(pókemon) == 0)
}

// g) cantidadDePókemonSaludablesEn_, que dada una lista de Pókemon,
// describe la cantidad de Pókemon de la lista que no están debilitados.
// h) existePókemonEn_ConFuerza_Tipo_YNivel_, que dada una lista de
// Pókemon, un número para indicar una fuerza, un tipo de Pókemon y un número
// para indicar un nivel, indica si en la lista dada existe algun Pókemon de ese tipo
// con esa fuerza y ese nivel.