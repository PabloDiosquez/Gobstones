// Ms. Gobs-Man es la secuela del popular juego de video argentino desarrollado en Gobstones, Gobs-Man. Ms.
// Gobs-Man incorpora una serie de características que se esperan transformen al juego en un éxito inmediato.
// Esta vez el jugador se pondrá en la piel de Ms.Gobs-Man, la versión femenina de nuestro aclamado héroe
// comecocos. Como en la primera versión del juego, el objetivo será lograr que Ms. Gobs-Man se coma todos
// los cocos y las cerezas. Para ello contaremos con todas las primitivas que se presentaron en el primer juego,
// que ahora actúan sobre Ms.Gobs-Man, así como también la siguiente, que se agrega a las anteriores:

function hayCoco()
// PROPÓSITO: Indica cuando hay un coco en la celda actual.
// PRECONDICIÓNES: Ninguna.

// Esta vez, sin embargo, tanto los cocos como las cerezas otorgarán puntaje al jugador.

// Ejercicio 10)
// Dado que el cabezal se encuentra en alguna celda, se espera poder determinar cuántos puntos obtendrá Ms.
// Gobs-Man si come todo lo que hay en dicha celda. Note que la celda puede tener un coco, una cereza, ambos
// o estar vacía. Un coco otorga a Ms. Gobs-Man 100 puntos, y una cereza otorga 2000 puntos. Escriba la
// función: puntajeAObtenerEnCeldaActual() que describe los puntos a obtener en la celda actual.

function puntajeAObtenerEnCeldaActual() {
    /*
        PROPÓSITO:
            * Describe el puntaje que obtiene Ms. GobsMan si come todo lo que hay la celda actual.
        TIPO: Número
        PRECONDICIONES:
            * No tiene (es una función total).
        OBSERVACIONES:
            * La celda puede tener un coco, una cereza, ambos o estar vacía.
            * Un coco otorga 100 puntos y una cereza otorga 2000.
    */
    
    return (choose 2100 when (hayCoco() && hayCereza())
                   2000 when (hayCereza())
                   100  when (hayCoco())
                   0    otherwise 
    )
}

// Ejercicio 11)
// Se nos plantea ahora que además de cerezas y cocos, las celdas pueden contener frutillas (O fresas, si
// prefiere). Las frutillas otorgan 500 puntos solamente, pero pueden encontrarse en cualquier celda.
// Debe replantear la función puntajeAObtenerEnCeldaActual() para tener en cuenta dicha situación. Si su
// estrategia anterior fue buena, entonces este cambio no debería redundar en demasiado trabajo. Si por el
// contrario la solución no fue buena, le llevará más esfuerzo (Si fuera este último caso, lo invitamos a repensar
// si está separando el problema en las subtareas correctas, o ver si puede realizar más). Ah, por cierto, casi se
// nos olvida, también cuenta con la primitiva siguiente:

function hayFrutilla()
// PROPÓSITO: Indica cuando hay una frutilla en la celda actual.
// PRECONDICIÓNES: Ninguna.

// Atención: Piense si su solución escala correctamente si hubieran otras tres posibles frutas (ej. naranjas,
// bananas y manzanas)

function puntajeAObtenerEnCeldaActual() {
    /*
        PROPÓSITO:
            * Describe el puntaje que obtiene Ms. GobsMan si come todo lo que hay la celda actual.
        TIPO: Número
        PRECONDICIONES:
            * No tiene (es una función total).
        OBSERVACIONES:
            * La celda puede tener un coco, una cereza, ambos o estar vacía.
            * Un coco otorga 100 puntos y una cereza otorga 2000.
    */
    
    return (choose 2600 when  (hayCoco() && hayCereza() && hayFrutilla())
                   2500 when  (hayCereza() && hayFrutilla())
                   2100 when  (hayCoco() && hayCereza())
                   600  when  (hayCoco () && hayFrutilla())
                   2000 when  (hayCereza())
                   500  when  (hayFrutilla())
                   100  when  (hayCoco())
                   0    otherwise
    )
}

// Ejercicio 12)
// Por cierto, para mostrar esos cuadraditos verdes con los puntos que vimos en los ejemplos anteriores se
// utilizó una muy útil primitiva que nos proporcionaron:

procedure Mostrar_PuntosEnPantalla(cantidadDePuntosAMostrar)
// PROPÓSITO: Muestra en la pantalla la cantidad de puntos dados como
// argumento.
// OBSERVACIÓN: Los puntos se muestran como un número en un recuadro verde
// en la esquina de la celda.
// PRECONDICIÓNES:
// * No debe haber elementos para comer en la celda actual.
// * El cabezal se encuentra sobre Ms. Gobs-Man.
// PARÁMETROS:
// * cantidadDePuntosAMostrar: Número - Los puntos a mostrar en la pantalla.

// Ahora queremos asegurarnos de poder mostrar los puntos correspondientes a lo que Ms. Gobs-Man
// efectivamente vaya a comer en la celda actual.
// Se espera que usted cree el procedimiento ComerLoQueHayEnLaCeldaYMostrarPuntos() que haga que
// Ms. Gobs-Man coma todo lo que hay en la celda en donde está parada, y que se muestre en dicha celda los
// puntos que se obtienen tras comer lo que allí había.
// Probablemente necesite también del procedimiento siguiente como primitiva:

procedure ComerFrutilla()
// PROPÓSITO: Come la frutilla de la celda actual.
// PRECONDICIÓNES:
// * Hay una frutilla en la celda actual.
// * El cabezal se encuentra sobre Ms. Gobs-Man

procedure ComerLoQueHayEnLaCeldaYMostrarPuntos() {
    /*
        PROPÓSITO:
            * Ms. GobsMan come todo lo que hay en la celda actual y se muestra en dicha celda los puntos obtenidos tras comer todo lo que hay ahí.
        PRECONDICIONES:
            * Ms. GobsMan debe estar en la celda actual.
    */
    puntajeAObtenerEnLaCeldaActual := puntajeAObtenerEnCeldaActual()
    ComerCocoSiHay()
    ComerCerezaSiHay()
    ComerFrutillaSiHay()
    Mostrar_PuntosEnPantalla(puntajeAObtenerEnLaCeldaActual)
}

procedure ComerCocoSiHay() {
    /*
        PROPÓSITO:
            * Ms. GobsMan come un coco si hay en la celda actual.
        PRECONDICIONES:
            * Ms. GobsMan está en la celda actual.
    */
    if(hayCoco()){
        ComerCoco()
    }
}

procedure ComerCerezaSiHay() {
    /*
        PROPÓSITO:
            * Ms. GobsMan come una cereza si hay en la celda actual.
        PRECONDICIONES:
            * Ms. GobsMan está en la celda actual.
    */
    if(hayCereza()){
        ComerCereza()
    }
}

procedure ComerFrutillaSiHay() {
    /*
        PROPÓSITO:
            * Ms. GobsMan come una cereza si hay en la celda actual..
        PRECONDICIONES:
            * Ms. GobsMan está en la celda actual.
    */
    if(hayFrutilla()){
        ComerFrutilla()
    }
}

// Ejercicio 13)
// Se desea saber cuántos puntos es posible obtener en un nivel determinado. Esto dependerá por supuesto de
// la cantidad de celdas que haya en dicho nivel, así como de que haya en cada celda (cocos, cerezas, frutillas,
// combinaciones de estas o nada). Se pide entonces realice la función cantidadDePuntosEnElNivel()
// que indique la cantidad total de puntos que se pueden obtener en el nivel. Por ejemplo, en el siguiente nivel se
// obtienen 18700 puntos (considerando que en el lugar en donde inicia Ms. Gobs-Man no hay nada). Puede
// asumir que el cabezal se encuentra sobre Ms. Gobs-Man.

// Atención: Para calcular los puntos no es necesario mover a Ms. Gobs-Man, sino sólo el cabezal. Sin embargo,
// si movemos a Ms. Gobs-Man tampoco representará un problema, pues las funciones no tienen efecto, sino
// que describen valores.

function cantidadDePuntosEnElNivel() {
    /*
        PROPÓSITO:
            * Describe la cantidad de puntos que se pueden obtener en el nivel dado.
        TIPO: Número.
        PRECONDICIONES:
            * No tiene (es una función total).
        OBSERVACIONES:
            * Recorrido de acumulación sobre las celdas del nivel, acumulando la cantidad de puntos que se pueden obtener en cada celda.
    */
    
    IrAPrimeraCeldaEnUnRecorridoAl_Y_(Este, Norte)
    puntajeAlMomento := puntajeAObtenerEnCeldaActual()
    while(haySiguienteCeldaEnUnRecorridoAl_Y_(Este, Norte)){
        IrASiguienteCeldaEnUnRecorridoAl_Y_(Este, Norte)
        puntajeAlMomento:= puntajeAlMomento + puntajeAObtenerEnCeldaActual()
    }
    return (puntajeAlMomento)
}

// Ejercicio 14)
// Es interesante poder determinar si Ms. Gobs-Man va a morir a causa de cruzarse con un fantasma o no
// (Recordemos que en un nivel puede o no haber fantasmas). Se desea entonces la función
// hayAlgúnFantasmaEnElNivel() que indica si hay un fantasma en el nivel. Por cierto, puede asumir que el
// cabezal se encuentra sobre Ms. Gobs-Man.
// Pista: Esta función es muy parecida a buscar un fantasma y luego morir, pero en lugar de morir debo indicar si
// encontré o no el fantasma. Note que no necesita variables para resolver el problema.

function hayAlgúnFantasmaEnElNivel() {
    /*
        PROPÓSITO:
            * Indica si hay algún fantasma en el nivel.
        TIPO: Booleano
        PRECONDICIONES:
            * El cabezal se encuentra sobre Ms. GobsMan.
    */
    
    IrAPrimeraCeldaEnUnRecorridoAl_Y_(Este, Norte)
    while(haySiguienteCeldaEnUnRecorridoAl_Y_(Este, Norte) && not hayFantasma()){
        IrASiguienteCeldaEnUnRecorridoAl_Y_(Este, Norte)
    }
    return (hayFantasma())
}

// Ejercicio 15)
// Como Ms. Gobs-Man puede cruzarse con un fantasma en el camino, y en ese caso, el juego termina en ese
// momento. Es decir, los puntos totales que acumula Ms. Gobs-Man en un nivel no siempre son el total de las
// cosas que hay en el tablero, sino solamente aquellas que “come” hasta que encuentra el fantasma, si es que
// hubiera uno. En ese sentido, las direcciones hacia las cuales Ms. Gobs-Man realiza un recorrido comiendo lo
// que encuentra es importante. Si parte de la celda Sur-Oeste y se mueve primero al Este y luego al Norte, podría
// conseguir menos puntos (o más) que si parte de la celda Norte-Este y se mueve al Sur y al Oeste, por poner un
// ejemplo.
// Por eso es interesante poder calcular cuántos puntos obtendrá Ms. Gobs-Man hasta toparse con un fantasma
// (si hubiera uno), si realiza un recorrido en dos direcciones determinadas, dadas por parámetro.
// Se pide escriba cantidadDePuntosEnNivelHacia_Y_(direcciónPrincipal,
// direcciónSecundaria), una función que dadas dos direcciones indica cuántos puntos acumularía
// Ms.Gobs-Man en un recorrido en dicha dirección. Nuevamente, el cabezal arranca sobre Ms. Gobs-Man.
// En el ejemplo siguiente, si el recorrido se realiza hacia el Este y el Sur (partiendo de la esquina Norte-Oeste)
// solo se obtendrán 2900 puntos, mientras que si se realiza hacia el Oeste y el Sur (partiendo de la esquina
// Norte-Este) se obtendrán 5000. Otras direcciones darán otros puntajes.

function cantidadDePuntosEnNivelHacia_Y_(direcciónPrincipal, direcciónSecundaria) {
    /*
        PROPÓSITO:
            * Describe la cantidad de puntos que obtendría Ms. GobsMan en un recorrido de direcciones **direcciónPrincipal** y **direcciónSecundaria**.
        PARÁMETROS:
            * direcciónPrincipal: Dirección
            * direcciónSecundaria: Dirección
        TIPO: Número.
        PRECONDICIONES:
            * El cabezal se encuentra sobre Ms. GobsMan.
        OBSERVACIONES:
            * Recorrido de acumulación sobre las celdas del tablero, calculando el puntaje total obtenido por Ms. GobsMan al recorrer el nivel de una manera determinada.
    */

    IrAPrimeraCeldaEnUnRecorridoAl_Y_(direcciónPrincipal, direcciónSecundaria)
    puntajeAlMomento := puntajeAObtenerEnCeldaActual()
    while (haySiguienteCeldaEnUnRecorridoAl_Y_(direcciónPrincipal, direcciónSecundaria) && not hayFantasma()) {
        IrASiguienteCeldaEnUnRecorridoAl_Y_(direcciónPrincipal, direcciónSecundaria)
        puntajeAlMomento := puntajeAlMomento + puntajeAObtenerEnCeldaActual()
    }
    return (puntajeAlMomento)
}

// Ejercicio 16)
// Se desea saber cuál de dos opciones de recorridos es más conveniente realizar. Por ejemplo, es mejor
// recorrer hacia el Norte y el Este, que hacia el Sur y el Este (siempre considerando mejor aquel recorrido en
// donde se obtienen más puntos). Para determinarlo, se pide que escriba la función
// esMejorRecorridoHacia_Y_QueHacia_Y_(dirPrincipal1, dirSecundaria1, dirPrincipal2,
// dirSecundaria2) que indica si un recorrido en dirPrincipal1 y dirSecundaria1 acumula efectivamente más
// puntos que un recorrido en dirPrincipal2 y dirSecundaria2.
// Si consideramos el ejemplo anterior, la función llamada como
// esMejorRecorridoHacia_Y_QueHacia_Y_(Este, Sur, Oeste, Sur) describe Falso, pues en el
// recorrido Este Sur se acumulaban solo 2900 puntos, mientras que en el Oeste-Sur eran 5000.
// esMejorRecorridoHacia_Y_QueHacia_Y_(Oeste, Sur, Este, Sur) describe Verdadero por la
// misma razón.

function esMejorRecorridoHacia_Y_QueHacia_Y_(dirPrincipal1, dirSecundaria1, dirPrincipal2, dirSecundaria2) {
    /*
        PROPÓSITO:
            * Indica si el recorrido de direcciones **dirPrincipal1** y **dirSecundaria1** acumula más puntos que un recorrido de direcciones **dirPrincipal2** y **dirSecundaria2**.
        PARÁMETROS:
            * dirPrincipal1: Dirección
            * dirSecundaria1: Dirección
            * dirPrincipal2: Dirección
            * dirSecundaria2: Dirección
        TIPO: Booleano
        PRECONDICIONES:
            * ....
    */
    
    return (cantidadDePuntosEnNivelHacia_Y_(dirPrincipal1, dirSecundaria1) > cantidadDePuntosEnNivelHacia_Y_(dirPrincipal2, dirSecundaria2))
}

// Ejercicio 17)
// Queremos también poder determinar si Ms. Gobs-Man ha logrado llegar a un punto en donde está cerca de
// finalizar el nivel, en particular, si completó más de la mitad del mismo.
// Para esto, se le pide implementar la función másDeLaMitadDelNivelSiVaHacia_Y_(dirPrincipal,
// dirSecundaria) que indica si Ms. Gobs-Man pasó más de la mitad del nivel recorriendo hacia dirPrincipal y
// dirSecundaria. Note que sabemos nuevamente que el cabezal está sobre Ms. Gobs-Man, y también contamos
// con esta útil primitiva:

function tamañoDelTablero()
// PROPÓSITO: Denota el número total de celdas del tablero (nxm)
// PRECONDICIÓN: Ninguna

// Ayuda: Tené en cuenta que Ms.Gobs-Man viene de las direcciones opuestas a aquellas hacia las cuales está
// recorriendo, y queremos saber cuántas celdas ya visitó.

function másDeLaMitadDelNivelSiVaHacia_Y_(dirPrincipal, dirSecundaria) {
    /*
        PROPÓSITO:
            * Indica si Ms. GobsMan páso más de la mitad del nivel recorriendo hacia el **dirPrincipal** y el **dirSecundaria**.
        PARÁMETROS:
            * dirPrincipal: Dirección
            * dirSecundaria: Dirección
        TIPO: Booleano
        PRECONDICIONES:
            * El cabezal está sobre Ms. GobsMan.
            * Las direcciones dadas no debe ser ni iguales ni opuestas.
    */
    
    return (cantidadDeCeldasRecorridasAlMomentoEnUnRecorridoAl_Y_(dirPrincipal, direcciónSecundaria) > (tamañoDelTablero() div 2))
}

function cantidadDeCeldasRecorridasAlMomentoEnUnRecorridoAl_Y_(dirPrincipal, direcciónSecundaria) {
    /*
        PROPÓSITO:
            * Describe la cantidad de celdas recorridas por Ms. GobsMan desde el inicio del recorrido hasta llegar a la celda actual.
        TIPO: Número
        PRECONDICIONES:
            * El cabezal está sobre Ms. GobsMan.
    */

    cantidadDeCeldasRecorridasAlMomento := 0
    while (haySiguienteCeldaEnUnRecorridoAl_Y_(opuesto(dirPrincipal), opuesto(dirSecundaria))) {
        cantidadDeCeldasRecorridasAlMomento := cantidadDeCeldasRecorridasAlMomento + 1
        IrASiguienteCeldaEnUnRecorridoAl_Y_(opuesto(dirPrincipal), opuesto(direcciónSecundaria))
    }
    return (cantidadDeCeldasRecorridasAlMomento + 1)
}

// Ejercicio 19)
// No todo es diversión al programar a Ms.Gobs-Man, porque también tenemos que programar a los malos. En
// este caso el cabezal se encuentra sobre un fantasma, y queremos mover al fantasma hacia donde está Ms.
// Gobs-Man. Para ello, debemos calcular dónde está Ms.Gobs-Man y determinar hacia dónde mover el
// fantasma. Para ello contamos con las siguientes primitivas:

procedure PararCabezalEnMsGobsMan()
// PROPÓSITO: Posiciona el cabezal sobre Ms. Gobs-Man.
// PRECONDICIÓN: Ms. Gobs-Man está viva en el tablero.

procedure MoverFantasmaAl_(dirección)
// PROPÓSITO: Mueve al fantasma de la celda actual una celda hacia la
// dirección dada.
// PRECONDICIÓN: El cabezal se encuentra sobre un fantasma.
// PARÁMETRO:
// * dirección: Dirección - La dirección a la cual mover el fantasma.

// Se pide entonces que realice el procedimiento MoverFantasmaHaciaMsGobsMan() que mueve el fantasma
// hacia Ms.Gobs-Man una celda, utilizando el siguiente criterio.
// ● Si Ms. Gobs-Man se encuentra en una fila y columna distinta a la del fantasma, mueve el fantasma
// en diagonal hacia las direcciones en las que se encuentre Ms.Gobs-Man.
// ● Si Ms.Gobs-Man se encuentra en la misma fila que el fantasma, solo lo mueve una celda sobre la
// columna actual, en dirección a Ms.Gobs-Man.
// ● Si Ms.Gobs-Man se encuentra en la misma columna que el fantasma, solo lo mueve una celda sobre la
// columna actual, en dirección a Ms.Gobs-Man.

// Realizar ese procedimiento no es fácil, y es conveniente descomponer el problema en tareas mucho más
// pequeñas y simples. Es por eso que nuestro equipo de analistas ya ha planteado una serie de funciones que
// pueden serle útiles para solucionar el problema usando una estrategia top-down. A saber, se espera utilice
// estas funciones (y las implemente) para solucionar el procedimiento anteriormente mencionado:

// ● elFantasmaDebeMoverseHorizontalmente() que indica si el fantasma no se encuentra en la
// misma columna que Ms. Gobs-Man.
// ● elFantasmaDebeMoverseVerticalmente() que indica si el fantasma no se encuentra en la misma
// fila que Ms. Gobs-Man.
// ● direcciónHorizontalAMoverElFantasma() que dado que el fantasma no está en la misma
// columna que Ms. Gobs-Man, describe la dirección a la cual el fantasma se debería mover para quedar
// más cerca que Ms. Gobs-Man en términos de columnas (Este u Oeste).
// ● direcciónVerticalAMoverElFantasma() que dado que el fantasma no está en la misma fila que
// Ms. Gobs-Man, describe la dirección a la cual el fantasma se debería mover para quedar más cerca
// que Ms. Gobs-Man en términos de filas (Norte o Sur).

function elFantasmaDebeMoverseHorizontalmente() {
    /*
        PROPÓSITO:
            * Indica si el fantasma no se encuentra en la misma columna que Ms. GobsMan.
        TIPO: Booleano
        PRECONDICIONES:
            * El cabezal debe estar sobre el fantasma.
    */
    
    return (columnaDondeEstáElFantasma() /= columnaDondeEstáMsGobsMan())
}

function elFantasmaDebeMoverseVerticalmente() {
    /*
        PROPÓSITO:
            * Indica si el fantasma no se encuentra en la misma fila que Ms. GobsMan.
        TIPO: Booleano
        PRECONDICIONES:
            * El cabezal debe estar sobre el fantasma.
    */
    
    return (filaDondeEstáElFantasma() /= filaDondeEstáMsGobsMan())
}

function direcciónHorizontalAMoverElFantasma() {
    /*
        PROPÓSITO:
            * Describe la dirección a la cual el fantasma debe moverse para quedar más cerca de Ms. GobsMan en términos de columnas (Este u Oeste). 
        TIPO: Dirección
        PRECONDICIONES:
            * El cabezal debe estar sobre el fantasma.
            * El fantasma no está en la misma columna que Ms. GobsMan.
    */
    
    return (choose Este  when (columnaDondeEstáElFantasma() < columnaDondeEstáMsGobsMan())
                   Oeste otherwise
    )
}

function direcciónVerticalAMoverElFantasma() {
    /*
        PROPÓSITO:
            * Describe la dirección a la cual el fantasma debe moverse para quedar más cerca de Ms. GobsMan en términos de filas (Norte o Sur). 
        TIPO: Dirección
        PRECONDICIONES:
            * El cabezal debe estar sobre el fantasma.
            * El fantasma no está en la misma fila que Ms. GobsMan.
    */
    
    return (choose Norte when (filaDondeEstáElFantasma() < filaDondeEstáMsGobsMan())
                   Sur   otherwise
    )
}

// A su vez, se recomienda realizar las siguientes funciones para solucionar las anteriores:
// ● filaDondeEstáElFantasma() que describe el número de fila donde se encuentra el fantasma.
// ● columnaDondeEstáElFantasma() que describe el número de columna donde se encuentra el
// fantasma.
// ● filaDondeEstáMsGobsMan() que describe el número de fila donde se encuentra Ms.Gobs-Man.
// ● columnaDondeEstáMsGobsMan() que describe el número de columna donde se encuentra Ms.
// Gobs-Man.

function filaDondeEstáElFantasma() {
    /*
        PROPÓSITO:
            * Describe el número de fila en donde se encuentra el fantasma.
        TIPO: Número
        PRECONDICIONES:
            * El cabezal está sobre el fantasma.
    */

    númeroDeFilaAlMomento := 0
    while(puedeMover(Sur)){
        númeroDeFilaAlMomento := númeroDeFilaAlMomento + 1
        Mover(Sur)
    }
    return (númeroDeFilaAlMomento)
}

function columnaDondeEstáElFantasma() {
    /*
        PROPÓSITO:
            * Describe el número de columna en donde se encuentra el fantasma.
        TIPO: Número
        PRECONDICIONES:
            * El cabezal está sobre el fantasma.
    */
    
    númeroDeColumnaAlMomento := 0
    while(puedeMover(Oeste)){
        númeroDeColumnaAlMomento := númeroDeColumnaAlMomento + 1
        Mover(Oeste)
    }
    return (númeroDeColumnaAlMomento)
}

function filaDondeEstáMsGobsMan() {
    /*
        PROPÓSITO: 
            * Describe el número de fila donde se encuentra Ms. GobsMan.
        TIPO: Número
        PRECONDICIONES:
            * No tiene (es una función total).
    */

    PararCabezalEnMsGobsMan()
    númeroDeFilaAlMomento := 0
    while(puedeMover(Sur)){
        númeroDeFilaAlMomento := númeroDeFilaAlMomento + 1
        Mover(Sur)
    }
    return (númeroDeFilaAlMomento)
}

function columnaDondeEstáMsGobsMan() {
    /*
        PROPÓSITO: 
            * Describe el número de columna donde se encuentra Ms. GobsMan.
        TIPO: Número
        PRECONDICIONES:
            * No tiene (es una función total).
    */

    PararCabezalEnMsGobsMan()
    númeroDeColumnaAlMomento := 0
    while(puedeMover(Oeste)){
        númeroDeColumnaAlMomento := númeroDeColumnaAlMomento + 1
        Mover(Oeste)
    }
    return (númeroDeColumnaAlMomento)
}


// FUNCIONES AUXILIARES 🐱‍🏍

// a.
procedure IrAPrimeraCeldaEnUnRecorridoAl_Y_(dirPrincipal, dirSecundaria) {
    /*
        PROPÓSITO:
            * Ubica el cabezal en el inicio de un recorrido de direcciones **dirPrincipal** y **dirSecundaria**.
        PARÁMETROS:
            * dirPrincipal: Dirección - La primera dirección del recorrido.
            * dirSecundaria: Dirección - La segunda dirección del recorrido.
        PRECONDICIONES:
            * Las direcciones dadas no deben ser ni iguales ni opuestas.
    */
    IrAlBorde(opuesto(dirPrincipal))
    IrAlBorde(opuesto(dirSecundaria))
}

// b.
function haySiguienteCeldaEnUnRecorridoAl_Y_(dirPrincipal, dirSecundaria) {
    /*
        PROPÓSITO:
            * Indica si existe una celda siguiente en un recorrido de direcciones **dirPrincipal** y **dirSecundaria**.
        PARÁMETROS:
            * dirPrincipal: Dirección - La primera dirección del recorrido.
            * dirSecundaria: Dirección - La segunda dirección del recorrido.
        TIPO: Booleano.
        PRECONDICIONES:
            * Las direcciones dadas no deben ser ni iguales ni opuestas.
    */  
    return (puedeMover(dirPrincipal) || puedeMover(dirSecundaria))
}

// c.
procedure IrASiguienteCeldaEnUnRecorridoAl_Y_(dirPrincipal, dirSecundaria) {
    /*
        PROPÓSITO:
            * Mueve el cabezal a la siguiente celda de un recorrido de direcciones **dirPrincipal** y **dirSecundaria**.
        PARÁMETROS:
            * dirPrincipal: Dirección - Describe la primera dirección del recorrido.
            * dirSecundaria: Dirección - Describe la segunda dirección del recorrido.
        PRECONDICIONES:
            * Debe existir al menos una celda siguiente en el recorrido.
            * Las direcciones dadas no deben ser ni iguales ni opuestas.
    */
    if (puedeMover(dirPrincipal)){
        Mover(dirPrincipal)
    }
    else {
        IrAlBorde(opuesto(dirPrincipal))
        Mover(dirSecundaria)
    }
}