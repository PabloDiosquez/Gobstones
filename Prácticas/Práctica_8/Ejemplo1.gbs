// Escribir una función celdaActual que describa la representación de la celda actual como valor del tipo Celda.

type Celda is record {
    /*
        PROPÓSITO:
            * Modelar una celda del tablero.
        INVARIANTE DE REPRESENTACIÓN:
            * Los números son todos mayores o iguales a cero.
    */

    field cantidadDeAzules  // Un valor de tipo Número.
    field cantidadDeNegras  // Un valor de tipo Número.
    field cantidadDeRojas   // Un valor de tipo Número.
    field cantidadDeVerdes  // Un valor de tipo Número.
}

function celdaActual() {
    /*
        PROPÓSITO:
            * Describe la celda actual como un registro de tipo Celda.
        TIPO: Celda.
        PRECONDICIONES:
            * No tiene (es una funcipon total).
    */
    
    return (Celda(
        cantidadDeAzules <- nroBolitas(Azul),
        cantidadDeNegras <- nroBolitas(Negro),
        cantidadDeRojas  <- nroBolitas(Rojo),
        cantidadDeVerdes <- nroBolitas(Verde)
    ))
}

🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹
type Carta is record {
    /*
        PROPÓSITO:
            * Modelar cartas españolas de Truco.
        INVARIANTE DE REPRESENTACIÓN:
            * El número está comprendido entre 1 y 7 o entre 10 y 12.
    */

    field palo // Un valor de tipo Palo
    field número // Un valor de tipo Número.
}

function asDeEspadas() {
    /*
        PROPÓSITO:
            * Describe el as de espadas.
        TIPO: Carta
        PRECONDICIONES:
            * No tiene (es una función total).
    */
    
    return (Carta(palo <- Espadas, numero <- 1))
}

// Funciones observadoras 

function envidoSimpleCon_Y_(carta1, carta2) {
    /*
        PROPÓSITO:
            * Describe el valor del envido simple de las dos cartas dadas.
        PARÁMETROS:
            * carta1: Carta 
            * carta2: Carta
        TIPO: Número.
        PRECONDICIONES:
            * Las cartas dadas deben ser del mismo palo y no deben ser figuras.
    */
    
    return (número(carta1) + número(carta2) + 20)
}

function la_Y_LaSonDelMismoPalo(carta1, carta2) {
    /*
        PROPÓSITO:
            * Indica si las cartas dadas son del mismo palo.
        PARÁMETROS:
            * carta1: Carta
            * carta2: Carta
        TIPO: Booleano
        PRECONDICIONES:
            * No tiene (es una función total).
    */
    
    return (palo(carta1) == palo(carta2))
}

//🔸 Variantes

type Palo is variant {
    /*
        PROPÓSITO:
            * Modela los distintos palos de las cartas españolas.
    */

    case Basto  {}
    case Espada {}
    case Oro    {}
    case Copa   {}
}

function anchoDe_(paloAUsar) {
    /*
        PROPÓSITO:
            * Describe el ancho de **paloAUsar**.
        PARÁMETROS:
            * palo: Palo
        TIPO: Carta
        PRECONDICIONES:
            * No tiene (es una función total).
    */
    
    return (Carta(palo <- paloAUsar, numero <- 1))
}

function códigoDelPalo_(palo) {
    /*
        PROPÓSITO:
            * Describe el código del palo dado.
        PARÁMETROS:
            * palo: Palo
        TIPO: Número.
        PRECONDICIONES:
            * No tiene (es una función total).
    */
    
    return (choose 100 when (palo == Basto)
                   200 when (palo == Copa)
                   300 when (palo == Espada)
                   200 when (palo == Oro)
                   boom("Esto NO debería pasar. ¿Alteraste los palos?") otherwise 
    )
}

function siguientePalo_(palo) {
    /*
        PROPÓSITO:
            * Describe el palo siguiente al dado.
        PARÁMETROS:
            * palo: Palo
        TIPO: Palo
        PRECONDICIONES:
            * No tiene (es una función total).
    */
    
    return (choose Copa   when (palo == Basto)
                   Espada when (palo == Copa)
                   Oro    when (palo == Espada)
                   Basto  when (palo == Oro)
                   boom("Esto NO debería pasar. ¿Alteraste los palos?") otherwise
    )
}

procedure PonerLosAnchos() {
    /*
        PROPÓSITO:
            * Pone los cuatro anchos en el tablero.
        PRECONDICIONES:
            * Debe haber al menos tres celdas lindantes a la actual al Este.
        OBSERVACIONES:
            * Recorrido de transformación sobre los palos. 
    */
    
    paloActual := Basto

    while (paloActual != Oro) {
        PonerCarta(anchoDe_(paloActual))
        Mover(Este)
        paloActual := siguientePalo_(paloActual)
    }

    PonerCarta(anchoDe_(paloActual))
}

// Se puede construir un registro basándose en un registro dado.
function la_ConvertidaAOro(cartaAnterior) {
    /*
        PROPÓSITO:
            * Describe la carta anterior convertida a Oro.
        PARÁMETROS:
            * cartaAnterior: Carta
        TIPO: Carta
        PRECONDICIONES:
            * No tiene (es una función total).
    */
    
    return (Carta(palo <- Oro, número <- número(cartaAnterior)))
}

// Usando una notación especial:

function la_ConvertidaAOroII(cartaAnterior) {
    /*...*/
    
    return (Carta(cartaAnterior | palo <- Oro))
}

// Otro ejemplo...

function la_SinLasRojas(celdaAnterior) {
    /*
        PROPÓSITO:
            * Describe una celda resultante al sacar todas las bolitas rojas de la celda dada.
        PARÁMETROS:
            * celdaAnterior: Celda.
        TIPO: Celda.
        PRECONDICIONES:
            * No tiene (es una función total).
    */
    
    return (Celda(celdaAnterior | cantidadDeRojas <- 0))
}

function la_ConDiezAzulesMás(celdaAnterior) {
    /*
        PROPÓSITO:
            * Describe una celda resultante al agregar diez bolitas azules más a la celda dada.
        PARÁMETROS:
            * celdaAnterior: Celda.
        TIPO: Celda.
        PRECONDICIONES:
            * No tiene (es una fucnión total).
    */
    
    return (Celda(celdaAnterior | cantidadDeAzules <- cantidadDeAzules(celdaAnterior) + 10))
}

//🔸 Registros anidados

type Jugador is record {
    /*
        PROPÓSITO:
            * Modela un jugador.
        INV. REP.:
            * **nombre** no es vacío.
            * **iniciativa** está entre cero y cien.
            * **fuerza** es mayor o igual a cero.
    */

    field nombre        // String
    field vida          // Número
    field fuerza        // Número
    field ataqueBásico  // Ataque
    field iniciativa    // Número
}

type Ataque is variant {
    /*
        PROPÓSITO:
            * Modela un tipo de ataque.
    */

    case Puñetazo  {}
    case Patada    {}
    case Mordisco  {}
    case Cabezazo  {}
    case Rodillazo {}
}

type Equipo is record {
    /*
        PROPÓSITO:
            * Modela un equipo de juego.
        INV. REP.:
            * Los tres jugadores del equipo son diferentes.
    */

    field jugadorIzquierdo  // Jugador
    field jugadorCentro     // Jugador
    field jugadorDerecho    // Jugador
}