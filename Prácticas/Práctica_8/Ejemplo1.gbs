// Escribir una funci칩n celdaActual que describa la representaci칩n de la celda actual como valor del tipo Celda.

// A modo de ejemplo introductorio

type Carta is record {
    /*
        PROP칍SITO:
            * Modelar cartas espa침olas de Truco.
        INVARIANTE DE REPRESENTACI칍N:
            * El n칰mero est치 comprendido entre 1 y 7 o entre 10 y 12.
    */

    field palo // Un valor de tipo Palo
    field n칰mero // Un valor de tipo N칰mero.
}

type Celda is record {
    /*
        PROP칍SITO:
            * Modelar una celda del tablero.
        INVARIANTE DE REPRESENTACI칍N:
            * Los n칰meros son todos mayores o iguales a cero.
    */

    field cantidadDeAzules  // Un valor de tipo N칰mero.
    field cantidadDeNegras  // Un valor de tipo N칰mero.
    field cantidadDeRojas   // Un valor de tipo N칰mero.
    field cantidadDeVerdes  // Un valor de tipo N칰mero.
}

function celdaActual() {
    /*
        PROP칍SITO:
            * Describe la celda actual como un registro de tipo Celda.
        TIPO: Celda.
        PRECONDICIONES:
            * No tiene (es una funcipon total).
    */
    
    return (Celda(
        cantidadDeAzules <- nroBolitas(Azul),
        cantidadDeNegras <- nroBolitas(Negro),
        cantidadDeRojas  <- nroBolitas(Rojo),
        cantidadDeVerdes <- nroBolitas(Verde)
    ))
}

游댳游댳游댳游댳游댳游댳游댳游댳游댳游댳游댳游댳游댳游댳游댳游댳游댳游댳游댳游댳游댳游댳游댳游댳游댳游댳游댳游댳游댳游댳游댳游댳游댳游댳
// Funciones observadoras 

function envidoSimpleCon_Y_(carta1, carta2) {
    /*
        PROP칍SITO:
            * Describe el valor del envido simple de las dos cartas dadas.
        PAR츼METROS:
            * carta1: Carta 
            * carta2: Carta
        TIPO: N칰mero.
        PRECONDICIONES:
            * Las cartas dadas deben ser del mismo palo y no deben ser figuras.
    */
    
    return (n칰mero(carta1) + n칰mero(carta2) + 20)
}