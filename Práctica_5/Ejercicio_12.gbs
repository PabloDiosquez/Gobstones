// En este ejercicio utilizaremos el tablero de Gobstones para representar cuentas
// bancarias. Cada celda representará a una cuenta bancaria, y en cada una de ellas
// puede haber dinero en distintas monedas, que representaremos con distintos
// colores:
// ● bolitas negras para pesos argentinos
// ● bolitas verdes para dólares estadounidenses.
// ● bolitas azules para euros.
// ● bolitas rojas para yuanes chinos.
// Se pueden hacer tres operaciones: depósitos, extracciones y conversiones a divisa
// extranjera. Las extracciones pueden hacerse en cualquier moneda, pero los
// depósitos siempre serán en pesos.

// Se pueden hacer tres operaciones: depósitos, extracciones y conversiones a divisa
// extranjera. Las extracciones pueden hacerse en cualquier moneda, pero los
// depósitos siempre serán en pesos.
// En el caso en que se quiera depositar un monto en una moneda extranjera, se
// aplicará automáticamente la conversión a pesos según el precio de venta dado en la
// siguiente tabla:

// Precios de venta
// 1 dólar 80 pesos
// 1 euro 90 pesos
// 1 yuan 12 pesos

// En cuanto a la conversión a divisa extranjera, el banco actualmente aplica las
// siguientes tarifas para la compra de divisa:

// Precios de compra
// 100 pesos 1 dólar
// 115 pesos 1 euro
// 17 pesos 1 yuan

// Realizar los siguientes procedimientos para poder manipular la cuenta:

// Depositar_EnMoneda_ComoPesos(cantidadADepositar, moneda),
// que dada una cantidad de dinero a depositar y un color que representa la
// moneda en la que está representado ese monto, agrega a la cuenta la
// cantidad de pesos equivalente a lo indicado para depositar. En este
// procedimiento hay que aplicar la conversión indicada para el precio de venta.

procedure Depositar_EnMoneda_ComoPesos(cantidadADepositar, moneda) {
    /*
        PROPÓSITO:
            * Agrega a la cuenta actual la cantidad de pesos equivalente a la cantidad a depositar dada, de acuerdo con el precio de venta.
        PARÁMETROS:
            * cantidadADepositar: Número.
            * moneda: Color.
        PRECONDICIONES:
            * **cantidadADepositar** debe ser un número mayor a cero.
    */
    if (esDolar(moneda))
    then {
        DepositarEnLaCuenta_Pesos(cantidadEnPesosEquivalenteA_Dólares(cantidadADepositar))
    }
    else if (esEuro(moneda))
    then {
        DepositarEnLaCuenta_Pesos(cantidadEnPesosEquivalenteA_Euros(cantidadADepositar))
    }
    else if (esYuan(moneda))
    then {
        DepositarEnLaCuenta_Pesos(cantidadEnPesosEquivalenteA_Yuanes(cantidadADepositar))
    }
}

procedure DepositarEnLaCuenta_Pesos(cantidadDePesos) {
    /*
        PROPÓSITO:
            * Agrega a la cuenta actual **cantidadDePesos** pesos.
        PARÁMETROS:
            * cantidadDePesos: Número.
        PRECONDICIONES:
            * **cantidadDePesos** debe ser mayor a cero.
    */
    Poner_DeColor_(cantidad, Negro)
}

function cantidadEnPesosEquivalenteA_Dólares(cantidadAConvertir) {
    /*
        PROPÓSITO:
            * Determina la cantidad de pesos equivalente a **cantidadAConvertir** dólares. 
        PARÁMETROS:
            * cantidadAConvertir: Número.
        TIPO: Número.
        PRECONDICIONES:
            * No tiene.
    */
    return (cantidadAConvertir*80)
}

function cantidadEnPesosEquivalenteA_Euros(cantidadAConvertir) {
    /*
        PROPÓSITO:
            * Determina la cantidad de pesos equivalente a **cantidadAConvertir** euros. 
        PARÁMETROS:
            * cantidadAConvertir: Número.
        TIPO: Número.
        PRECONDICIONES:
            * No tiene.
    */
    return (cantidadAConvertir*90)
}

function cantidadEnPesosEquivalenteA_Yuanes(cantidadAConvertir) {
    /*
        PROPÓSITO:
            * Determina la cantidad de pesos equivalente a **cantidadAConvertir** yuanes. 
        PARÁMETROS:
            * cantidadAConvertir: Número.
        TIPO: Número.
        PRECONDICIONES:
            * No tiene.
    */
    return (cantidadAConvertir*12)
}

function esDolar(moneda) {
    /*
        PROPÓSITO:
            * Indica si la moneda **moneda** es el dólar.
        PARÁMETROS:
            * moneda: Color
        TIPO: Booleano.
        PRECONDICIONES:
            * No tiene (es una función total).
    */
    return (moneda == Verde)
}

function esEuro(moneda) {
    /*
        PROPÓSITO:
            * Indica si la moneda **moneda** es el euro.
        PARÁMETROS:
            * moneda: Color
        TIPO: Booleano.
        PRECONDICIONES:
            * No tiene (es una función total).
    */  
    return (moneda == Azul)
}

function esYuan(moneda) {
    /*
        PROPÓSITO:
            * Indica si la moneda **moneda** es el yuan.
        PARÁMETROS:
            * moneda: Color
        TIPO: Booleano.
        PRECONDICIONES:
            * No tiene (es una función total).
    */
    return (moneda == Rojo)
}

procedure Poner_DeColor_(n,c) {
    /*
    */
    repeat(n) {
        Poner(c)
    }
}

// ExtraerHasta_EnMoneda_(cantidadAExtraer, moneda), que dada
// una cantidad de dinero a extraer y un color que representa la moneda en la
// que se va a extraer, remueve de la cuenta la cantidad que se indica. Si no
// hubiera tanto dinero como el solicitado, se extrae todo lo que haya.

procedure ExtraerHasta_EnMoneda_(cantidadAExtraer, moneda) {
    /*
        PROPÓSITO:
            *  Extrae de la cuenta la cantidad que se indica en la moneda dada. Si no hubiera tanto dinero como el solicitado, se extrae todo lo que haya.
        PARÁMETROS:
            * cantidadAExtraer: Número
            * moneda: Color
        PRECONDICIONES:
            * **cantidadAExtraer** debe ser un número mayor o igual a cero.
    */
    if (cantidadEnMoneda_EnLaCuentaActual(moneda) >= cantidadAExtraer){
        ExtraerExactamente_EnMoneda_(cantidadAExtraer, moneda)
    }
    else {
        ExtraerTodoEnMoneda_(moneda)
    }
}

procedure ExtraerExactamente_EnMoneda_(cantidadAExtraer, moneda) {
    /*
        PROPÓSITO:
            * Extrae exactamente **cantidadAExtraer** unidades de la moneda dada.
        PARÁMETROS:
            * cantidadAExtraer: Número
            * moneda: Color
        PRECONDICIONES:
            * En la cuenta actual debe haber, al menos, **cantidadAExtraer** unidades de la moneda dada.
            * **cantidadAExtraer** debe ser un número mayor o igual a cero.
    */
    Sacar_DeColor_(cantidadAExtraer, moneda)
}

procedure ExtraerTodoEnMoneda_(moneda) {
    /*
        PROPÓSITO:
            * Extrae todas las unidades de la moneda dada.
        PARÁMETROS:
            * moneda: Color
        PRECONDICIONES:
            * No tiene
    */
    Sacar_DeColor_(cantidadEnMoneda_EnLaCuentaActual(moneda), moneda)
}

function cantidadEnMoneda_EnLaCuentaActual(moneda) {
    /*
        PROPÓSITO:
            * Describe la cantidad de la moneda dada que hay en la cuenta actual.
        PARÁMETROS:
            * moneda: Color
        TIPO: Número.
        PRECONDICIONES:
            * No tiene (es una función total).
    */
    return (nroBolitas(moneda))
}

procedure Sacar_DeColor_(n, c) {
    /*
    */
    repeat (n) {
        Sacar(c)
    }
}

// ConvertirHasta_PesosA_(pesosAConvertir, moneda), que dada
// una cantidad de pesos a convertir y un color que representa la moneda en la
// cual se quiere convertir, remueve los pesos de la cuenta y agrega la moneda
// solicitada. Si en la cuenta hubiera menos pesos de lo solicitado, se convierte
// todo lo que haya.

procedure ConvertirHasta_PesosA_(pesosAConvertir, moneda) {
    /*
        PROPÓSITO:
            * Remueve **pesosAConvertir** pesos de la cuenta actual y agrega en la moneda solicitada la cantidad equivalente en pesos. Si en la cuenta hubiera menos pesos de lo solicitado, se convierte todo lo que haya.
        PARÁMETROS:
            * pesosAConvertir: Número
            * moneda: Color
        PRECONDICIONES:
            * **pesosAConvertir** debe ser un número mayor a cero.
    */
    if (cantidadEnLaCuentaActualEnMoneda_(Negro) >= pesosAConvertir){
        ExtraerExactamente_EnMoneda_(pesosAConvertir,Negro)
        DepositarEnLaCuentaMoneda_EquivalenteA_Pesos(moneda, pesosAConvertir)
    }
    else {
        ExtraerTodoEnMoneda_(Negro)
        DepositarEnLaCuentaMoneda_EquivalenteA_Pesos(moneda, cantidadEnMoneda_EnLaCuentaActual(Negro))
    }
}

procedure DepositarEnLaCuentaMoneda_EquivalenteA_Pesos(moneda, cantidadDePesos) {
    /*
        PROPÓSITO:
            * Deposita en la cuenta actual una cantidad equivalente a **cantidadDePesos** en la moneda dada, según el precio de venta.
        PARÁMETROS:
            * moneda: Color
            * cantidadDePesos: Número
        PRECONDICIONES:
            * **cantidadDePesos** debe ser un número mayor o igual a cero.
    */
    if (esDolar(moneda)){
            DepositarEnLaCuenta_EnMoneda_(cantidadEnDólaresEquivalenteA_Pesos(cantidadDePesos),moneda)
        }
        elseif (esEuro(moneda)) {
            DepositarEnLaCuenta_EnMoneda_(cantidadEnEurosEquivalenteA_Pesos(cantidadDePesos),moneda)
        }
        elseif(esYuan(moneda)){
            DepositarEnLaCuenta_EnMoneda_(cantidadEnYuanesEquivalenteA_Pesos(cantidadDePesos),moneda)
    }
}

procedure DepositarEnLaCuenta_EnMoneda_(cantidadADepositar, moneda) {
    /*
        PROPÓSITO:
            * Deposita en la cuenta actual **cantidadADepositar** en la moneda dada.
        PARÁMETROS:
            * cantidadAAgregar: Número
            * moneda: Color
        PRECONDICIONES:
            * **cantidadAAgregar** debe ser un número mayor o igual a cero.
    */
    Poner_DeColor_(cantidadADepositar, moneda)
}


function cantidadEnDólaresEquivalenteA_Pesos(cantidadEnPesos) {
    /*
        PROPÓSITO:
            * Describe la cantidad en dólares equivalente a **cantidadEnPesos** pesos de acuerdo al precio de venta.
        PARÁMETROS:
            * cantidadEnPesos: Número - Describe la cantidad de pesos para el cálculo de la equivalencia en dólares.
        TIPO: Número.
        PRECONDICIONES:
            * **cantidadEnPesos** debe ser un número mayor o igual a cero.
    */
    return (cantidadEnPesos div 100)
}

function cantidadEnEurosEquivalenteA_Pesos(cantidadEnPesos) {
    /*
        PROPÓSITO:
            * Describe la cantidad en euros equivalente a **cantidadEnPesos** pesos de acuerdo al precio de venta.
        PARÁMETROS:
            * cantidadEnPesos: Número - Describe la cantidad de pesos para el cálculo de la equivalencia en euros.
        TIPO: Número.
        PRECONDICIONES:
            * **cantidadEnPesos** debe ser un número mayor o igual a cero.
    */
    return (cantidadEnPesos div 115)
}

function cantidadEnYuanesEquivalenteA_Pesos(cantidadEnPesos) {
    /*
        PROPÓSITO:
            * Describe la cantidad en yuanes equivalente a **cantidadEnPesos** pesos de acuerdo al precio de venta.
        PARÁMETROS:
            * cantidadEnPesos: Número - Describe la cantidad de pesos para el cálculo de la equivalencia en yuanes.
        TIPO: Número.
        PRECONDICIONES:
            * **cantidadEnPesos** debe ser un número mayor o igual a cero.
    */
    return (cantidadEnPesos div 17)
}

// RealizarCorridaCambiaria(), que dado un tablero de 1 única fila y 10
// columnas, donde cada celda representa una cuenta bancaria, se realiza una
// corrida cambiaria, donde en cada cuenta se cambia la totalidad de los pesos
// a dólares.

procedure RealizarCorridaCambiaria() {
    /*
        PROPÓSITO:
            * Realiza una corrida bancaria cambiando la totalidad de los pesos de cada cuenta a dólares, en un tablero de 1 única fila y 10 columnas.
        PRECONDICIONES:
            * Deben existir desde la celda actual, al menos 10 celdas lindantes a la misma en dirección Este.
    */
    repeat (9) {
        CambiarDólaresAPesosEnLaCuentaActual()
        ExtraerTodoEnMoneda_(Verde)
        Mover(Este)
    }
    CambiarDólaresAPesosEnLaCuentaActual()
    ExtraerTodoEnMoneda_(Verde)
}

procedure CambiarDólaresAPesosEnLaCuentaActual() {
    /*
        PROPÓSITO:
            * Cambia el total de dólares de la celda actual a su equivalente en pesos.
        PRECONDICIONES:
            * No tiene.
    */
    DepositarEnLaCuenta_Pesos(cantidadEnPesosEquivalenteA_Dólares(cantidadEnMoneda_EnLaCuentaActual(Verde)))
}