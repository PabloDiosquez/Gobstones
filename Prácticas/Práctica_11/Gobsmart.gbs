// Los directivos del supermercado GobsMart nos piden modelar el funcionamiento de las cajas
// de cobro en una sucursal. Para esto usaremos los siguientes tipos:

type TipoDePago is variant {
    /* PROP: 
        * Modelar Tipos de pago aceptados.
    */

    case Tarjeta {}
    case MartPago {}
    case Efectivo {}
}

type Producto is record{
    /* 
    PROP: 
        * Modelar productos.
    INV.REP.: 
        * precio > 0 
    */

    field nombre // String
    field marca // String
    field precio // Número
}

type Cliente is record {
    /* PROP: 
        * Modelar clientes.
    */

    field dni // String
    field tipoDePago // TipoDePago
    field productos // [Producto]
}

type Caja is record {
    /* 
    PROP: 
    * Modelar cajas.
    INV.REP.: 
    * número > 0
    * facturado >= 0
    */

    field número // Número
    field clientesEsperando // [Cliente]
    field aceptaPagos // [TipoDePago]
    field esRápida // Bool
    field facturado // Número
}

// 1. Armar ejemplos para visualizar el modelo y sus datos.

// Productos
function botellaDeAguaVillaDelSur(){
    /*  Proposito: describe un producto de agua.
        Precondicion: ninguna.
        Tipo: Producto*/
    return(Producto(nombre <- "agua",
                    marca  <- "Villa del Sur",
                    precio <- 45))
}

function quesoFresco() {
    return (Producto(
        nombre <- "Queso fresco",
        marca <- "La Serenísima",
        precio <- 1000
    ))
}

function arvejas() {
    return (Producto(
        nombre <- "Arvejas",
        marca <- "Día",
        precio <- 150
    ))
}

function azucar() {
    return (Producto(
        nombre <- "Azucar",
        marca <- "Marolio",
        precio <- 500
    ))
}

// Clientes

function clienteJubilado() {
    return (Cliente(
        dni <- "123456",
        tipoDePago <- Efectivo,
        productos <- [quesoFresco(), arvejas()]
    ))
}

function cliente1(){
    /*  Proposito: describe un cliente.
        Precondicion: ninguna.
        Tipo: Cliente*/
        return(Cliente( dni <- 31444,
                        tipoDePago <- Tarjeta,
                        productos <- [botellaDeAguaVillaDelSur(), azucar()]))
}

//Cajas

function caja1(){
    /*  Proposito: describe la Caja 1.
        Precondicion: ninguna
        Tipo: Caja*/
    return(Caja( número <- 1
                 clientesEsperando <- [cliente1(), clienteJubilado()]
                 aceptaPagos <- [Tarjeta, MartPago,Efectivo]
                 esRápida <- True
                 facturado <- 2))
}

// 2. Implementar las siguientes funciones:
// a) cantidadDeClientesEsperandoEn_, que dada una caja, describe la
// cantidad de clientes que están esperando en la misma.

function cantidadDeClientesEsperandoEn_(caja) {
    /*
        PROPÓSITO:
            * Describe la cantidad de clientes que están esperando en la caja dada.
        PARÁMETROS:
            * caja: Caja
        TIPO: Número
        PRECONDICIONES:
            * No tiene (es una función total).
        OBSERVACIONES:
            * Recorrido de totalización sobre la lista de clientes de la caja dada, para contarlos.
    */
    
    // clientesVistosAlMomento := 0

    // foreach cliente in clientesEsperando(caja) {
    //     clientesVistosAlMomento := clientesVistosAlMomento + 1
    // }
    // return (clientesVistosAlMomento)

    return (longitudDe_(clientesEsperando(caja)))
}

// b) cajaMenosOcupadaDe_, que dada una lista de cajas describe la caja con
// menos clientes esperando entre todas las de esa lista.

function cajaMenosOcupadaDe_(cajas) {
    /*
        PROPÓSITO:
            * Describe la caja con menos clientes esperando de la lista de cajas dadas.
        PARÁMETROS:
            * cajas: [Caja]
        TIPO: Caja
        PRECONDICIONES:
            * La lista de cajas dada no debe ser vacía.
        OBSERVACIONES:
            * Recorrido de mínimos.
    */
    
    cajaConMenosClientesEsperandoAlMomento := primero(cajas)

    foreach caja in resto(cajas) {
        cajaConMenosClientesEsperandoAlMomento := cajaConMenosClientesEsperandoEntre_Y_(cajaConMenosClientesEsperandoAlMomento, caja)
    }
    return (cajaConMenosClientesEsperandoAlMomento)
}

function cajaConMenosClientesEsperandoEntre_Y_(caja1, caja2) {
    /*
        PROPÓSITO:
            * Describe la caja con menos clientes esperando entre las dos cajas dadas.
        PARÁMETROS:
            * caja1: Caja
            * caja2: Caja
        TIPO: Caja
        PRECONDICIONES:
            * No tiene (es una función total).
        OBSERVACIONES:
            * Describe la segunda caja si tienen la misma cantidad de clientes.
    */
    
    return (choose caja1 when (cantidadDeClientesEsperandoEn_(caja1) < cantidadDeClientesEsperandoEn_(caja2))
                   caja2 otherwise 
    )
}

// c) gobsMart_conIngresoDe_aCaja_, que dada una lista de cajas, un cliente y
// un número de caja, describe la misma lista de cajas pero actualizando la caja del
// número dado para registrar que el cliente dado ingresó en la misma. Tener en
// cuenta que el cliente se debe agregar al final de la cola de espera.

function gobsMart_conIngresoDe_aCaja_(cajas, cliente, nroCaja) {
    /*
        PROPÓSITO:
            * Describe la lista de cajas con el cliente dado agregado a la caja de número **nroCaja** de la lista dada.
        PARÁMETROS:
            * cajas: [Caja]
            * cliente: Cliente
            * nroCaja: Número
        TIPO: [Caja]
        PRECONDICIONES:
            * El número de caja dado debe ser un número de las cajas en listaDeCajas.
            * La lista de cajas debe tener al menos un elemento.
            * Las cajas en la lista dada deben tener un número único.
    */
    
    cajasARecorrer  := cajas
    cajasObservadas := []

    while (número(primero(cajasARecorrer)) /= nroCaja) {
        cajasObservadas := cajasObservadas ++ [primero(cajasARecorrer)]
        cajasARecorrer := resto(cajasARecorrer)
    }
    return (cajasObservadas ++ [caja_ConNuevoCliente(primero(cajasARecorrer), cliente)] ++ resto(cajasARecorrer))
}

function caja_ConNuevoCliente(caja, cliente) {
    /*
        PROPÓSITO:
            * Describe una caja con el cliente dado agregado a su lista de clientes.
        PARÁMETROS:
            * caja: Caja
            * cliente: Cliente
        TIPO: Caja
        PRECONDICIONES:
            * No tiene (es una función total).
    */
    
    return (Caja(caja | clientesEsperando <- clientesEsperando(caja) ++ [cliente]))
}

// d) gobsMart_conIngresosDe_, que dada una lista de cajas y una lista de
// clientes, describe una lista de cajas actualizada, donde cada cliente de la lista
// dada ingresó a una caja que acepta el medio de pago que posee, y que esté
// menos ocupada en el momento que ingresa.

function gobsMart_conIngresoDe_(cajas, clientes) {
    /*
        PROPÓSITO:
            * Describe una lista de cajas actualizada, donde cada cliente de la lista dada ingresó a una caja de la lista de cajas dada que acepta el medio de pago que posee, y que esté menos ocupada en el momento que ingresa.
        PARÁMETROS:
            * cajas: [Caja]
            * clientes: [Cliente]
        TIPO: [Caja]
        PRECONDICIONES:
            * Al menos una caja de la lista de cajas debe aceptar el medio de pago del cliente dado.
            * Las cajas en la lista dada deben tener un número único.
    */

    cajasConNuevosClientes := clientes 

    foreach cliente in clientes {
        cajasConNuevosClientes := cajas_ConNuevoCliente_(cajasConNuevosClientes, cliente)
    }
    
    return (cajasConNuevosClientes)
}

function cajas_ConNuevoCliente_(cajas, cliente) {
    /*
        PROPÓSITO:
            * Describe una lista de cajas actualizada con el agregado de un nuevo cliente.
        PARÁMETROS:
            * cajas: [Caja]
            * cliente: Cliente
        TIPO: [Caja]
        PRECONDICIONES:
            * Al menos una caja de la lista de cajas debe aceptar el medio de pago del cliente dado.
            * La lista de cajas debe tener al menos un elemento.
            * Las cajas en la lista dada deben tener un número único.
    */

    cajaMenosOcupadaQueAceptaElTipoDePago := cajaMenosOcupadaDe_(cajasDe_ConTipoDePago_(cajas,tipoDePago(cliente)))
    
    return (gobsMart_conIngresoDe_aCaja_(cajas, cliente, número(cajaMenosOcupadaQueAceptaElTipoDePago)))
}

function cajasDe_ConTipoDePago_(cajas, tipoDePago) {
    /*
        PROPÓSITO:
            * Describe la lista de cajas de **cajas** que acepta el tipo de pago dado.
        PARÁMETROS:
            * cajas: [Caja]
            * tipoDePago: TipoDePago
        TIPO: [Caja]
        PRECONDICIONES:
            * No tiene (es una función total).
        OBSERVACIONES:
            * Recorrido de filtrado sobre la lista de cajas dadas de aquellas que aceptan el tipo de pago dado.
    */
    
    cajasConTipoDePagoDadoAlMomento := []

    foreach caja in cajas {
        cajasConTipoDePagoDadoAlMomento := cajasConTipoDePagoDadoAlMomento ++ singular_Si_(caja, acepta_ElTipoDePago_(caja, tipoDePago))
    }

    return (cajasConTipoDePagoDadoAlMomento)
}

function acepta_ElTipoDePago_(caja, tipoDePago) {
    /*
        PROPÓSITO:
            * Indica si la caja dada acepta el tipo de pago dado.
        PARÁMETROS:
            * caja: Caja
            * tipoDePago: TipoDePago
        TIPO: Booleano
        PRECONDICIONES:
            * No tiene (es una función total).
    */

    tiposDePagoAceptados := aceptaPagos(caja)

    while (not esVacía(tiposDePagoAceptados) && primero(tiposDePagoAceptados) /= tipoDePago) {
        tiposDePagoAceptados := resto(tiposDePagoAceptados)
    }
    return (not esVacía(tiposDePagoAceptados))
}

// e) caja_conPrimeroFacturado, que dada una caja, describe la caja resultante
// de facturar al primero de los clientes de la caja dada (o sea, el cliente se retiró y
// la caja actualizó sus datos). Se puede suponer que el cliente eligió bien la caja
// de acuerdo a su tipo de pago.

function caja_conPrimeroFacturado(caja) {
    /*
        PROPÓSITO:
            * Describe la caja resultante de actualizar el total facturado por el primer cliente de la caja dada.
        PARÁMETROS:
            * caja: Caja
        TIPO: Caja
        PRECONDICIONES:
            * La lista de clientes esperando de la caja dada no debe ser vacía.
        OBSERVACIONES:
            * Se supone que el cliente eligió bien la caja de acuerdo a su tipo de pago.
    */

    primerCliente := primero(clientesEsperando(caja))

    totalFacturadoPrimerCliente := 0

    foreach producto in productos(primerCliente) {
        totalFacturadoPrimerCliente := totalFacturadoPrimerCliente + precio(producto)
    }
    
    return (Caja(caja | clientesEsperando <- resto(clientesEsperando)
            ,           facturado <- facturado(caja) + totalFacturadoPrimerCliente)
    )
}

// f) gobsMart_conCliente_cambiaACaja_, que dada una lista de cajas, el DNI
// de un cliente y un número de caja, describe la lista de cajas actualizada, donde
// el cliente con el DNI dado se cambió al número de caja dado. Se puede suponer
// que existe un cliente con el DNI dado esperando en alguna de las cajas del
// gobsMart.

function gobsMart_conCliente_cambiaACaja_(cajas, dni, nroCaja) {
    /*
        PROPÓSITO:
            * Describe la lista de cajas actualizada donde el cliente con el DNI dado, se cambió al número de caja dado de la lista de cajas dadas.
        PARÁMETROS:
            * cajas: [Caja]
            * dni: String
            * nroCaja: Número
        TIPO: [Caja]
        PRECONDICIONES:
            * Existe un cliente con el DNI dado esperando en alguna de las cajas del gobsMart.
            * Existe una caja con el número dado en el gobsMart.

    */

    cajasARecorrer := cajas

    while(not clienteConDni_estáEnLaListaDeClientesDe_(primero(cajasARecorrer))) {
        cajasARecorrer := resto(cajasARecorrer)
    }
    
    return (gobsMart_conIngresoDe_aCaja_(gobsMart_SinClienteConDni_(cajas, dni), clienteConDni_En_(dni, primero(cajasARecorrer)), nroCaja))
}

function gobsMart_SinClienteConDni_(cajas, dni) {
    /*
        PROPÓSITO:
            * Decribe la lista de cajas actualizada sin el cliente de DNI dado.
        PARÁMETROS:
            * cajas: [Caja]
            * dni: String
        TIPO: [Caja]
        PRECONDICIONES:
            * Existe un cliente con el DNI dado esperando en alguna de las cajas del gobsMart.
            * El DNI dado debe ser el de uno de los clientes de las cajas de la lista de cajas dada.
    */

    cajasARecorrer  := cajas
    cajasObservadas := []
    while (dni(primero(clientesEsperando(primero(cajasARecorrer)))) /= dni) {
        cajasObservadas := cajasObservadas ++ [primero(cajasARecorrer)]
        cajasARecorrer  := resto(cajasARecorrer)
    }

    return (cajasObservadas ++ resto(cajasARecorrer))
}

function clienteConDni_En_(dni, caja) {
    /*
        PROPÓSITO:
            * Describe el cliente de DNI dado presente en la lista de clientes de la caja dada.
        PARÁMETROS:
            * dni: String
            * caja: Caja
        TIPO: Cliente
        PRECONDICIONES:
            * El DNI dado debe ser el de un cliente de la caja dada.
    */
    
    clientesARecorrer := clientesEsperando(caja)

    while (dni(primero(clientesARecorrer)) /= dni) {
        clientesARecorrer := resto(clientesARecorrer)
    }

    return (primero(clientesARecorrer))
}

function clienteConDni_estáEnLaListaDeClientesDe_(dni, caja) {
    /*
        PROPÓSITO:
            * Indica si el cliente de DNI dado está en la lista de clientes de la caja dada.
        PARÁMETROS:
            * dni: String
            * caja: Caja
        TIPO: Booleano
        PRECONDICIONES:
            * El DNI dado no debe ser vacío.
    */
    
    clientesARecorrer := clientesEsperando(caja)

    while (not esVacía(clientesARecorrer) && dni(primero(clientesARecorrer)) /= dni) {
        clientesARecorrer := resto(clientesARecorrer)
    }

    return (not esVacía(clientesARecorrer))
}

// g) fila_ConAumentoDePrecioAMarolio, que dada una lista de clientes,
// describe la lista de clientes dada donde se aumente en 10 pesos todos los
// productos de la marca “Marolio” que tengan en su poder.

function fila_ConAumentoDePrecioAMarolio(clientes) {
    /*
        PROPÓSITO:
            * Describe la lista de clientes dada, actualizada con un aumento en 10 pesos de todos los productos de la marca “Marolio” que tengan en su poder. 
        PARÁMETROS:
            * clientes: [Cliente]
        TIPO: [Cliente]
        PRECONDICIONES:
            * No tiene (es una función total).
    */

    clientesConPreciosActualizados := []
    foreach cliente in clientes {
        clientesConPreciosActualizados := clientesConPreciosActualizados ++ [cliente_ConAumentoEnProductosDeMarca_En_Pesos(cliente, "Marolio", 10)]
    }
    return (clientesConPreciosActualizados)
}

function cliente_ConAumentoEnProductosDeMarca_En_Pesos(cliente, marca, cantidadDePesos) {
    /*
        PROPÓSITO:
            * Describe el cliente dado con un aumento en **cantidadDePesos** pesos de todos los productos de la marca dada que tenga en su poder.
        PARÁMETROS:
            * cliente: Cliente
            * marca: String
            * cantidadDePesos: Número
        TIPO: Cliente
        PRECONDICIONES:
            * **cantidadDePesos** debe ser > 0.
    */
    
    productosConPreciosActualizados := []
    foreach producto in productos(cliente){
        productosConPreciosActualizados := productosConPreciosActualizados ++ [producto_ConPrecioAumentadoEn_SiEsDeMarca_(producto, cantidadDePesos, marca)]
    }
    return (Cliente(cliente | productos <- productosConPreciosActualizados))
}

function producto_ConPrecioAumentadoEn_SiEsDeMarca_(producto, cantidadDePesos, marca) {
    /*
        PROPÓSITO:
            * Describe el producto con el precio aumentado en **cantidadDePesos** pesos si es de la marca dada; en caso contrario, describe el producto con el precio sin alterar.
        PARÁMETROS:
            * producto: Producto
            * cantidadDePesos: Número
            * marca: String
        TIPO: Producto
        PRECONDICIONES:
            * **cantidadDePesos** debe ser > 0.
    */
    
    return (choose Producto(producto | precio <- precio(producto) + pesos) when (marca(producto) == marca)
                   producto otherwise)
}


// FUNCIONES AUXILIARES 🐱‍🚀

function longitudDe_(lista) {
    /*
        PROPÓSITO:
            * Describe la longitud de la lista dada.
        PARÁMETROS:
            * lista: [Elemento]
        TIPO: Número.
        PRECONDICIONES:
            * No tiene (es una función total).
    */
    
    cantidadDeElementosAlMomento := 0
    foreach elemento in lista {
        cantidadDeElementosAlMomento := cantidadDeElementosAlMomento + 1
    }
    return (cantidadDeElementosAlMomento)
}

function singular_Si_(elemento, condición) {
    /*
        PROPÓSITO:
            * Describe la lista formada únicamente por el elemento dado si se cumple la condición dada; en caso contrario, describe la lista vacía.
        PARÁMETROS:
            * elemento: Elemento
            * condición: Booleano
        TIPO: [Elemento]
        PRECONDICIONES:
            * No tiene (es una función total).
    */
    
    return (choose [elemento] when(condición)
                   []         otherwise
    )
}