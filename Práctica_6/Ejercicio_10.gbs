// El casino, parte 1
// En este ejercicio el tablero tiene información sobre las apuestas de diferentes
// jugadores en un casino, para un juego de extracción de números. En la mesa del
// juego hay una cantidad de jugadores, cada uno identificado por un número. Cada
// celda del tablero representa una apuesta, de la siguiente forma.
// ● Bolitas rojas: el número de jugador.
// ● Bolitas azules: el número apostado.
// ● Bolitas verdes: el monto apostado, donde cada bolita verde es un peso.
// Puede haber varias apuestas del mismo apostador, a distintos números.
// A modo de ejemplo, se muestra uno de los posibles tableros que modela la siguiente
// situación:
// ● El jugador 1 apostó 19 pesos al 48.
// ● El jugador 2 apostó 22 pesos al 7 y 13 pesos al 13.
// ● El jugador 3 apostó 5 pesos al 15.
// ● Queda espacio para registrar dos apuestas más.

// Escribir las siguientes operaciones. En cada caso, recordar escribir primero el
// contrato, y expresar la estrategia usando subtareas (preferentemente con la
// metodología top-down).
// a. AgregarApuestaDe_Al_Para_(monto, nroApostado, nroJugador)
// que agrega la apuesta indicada en alguna celda vacía, la cual debe existir.

function colorJugador() {
    /*
        PROPÓSITO:
            * Describe el color que representa al jugador que hizo la apuesta.
        TIPO: Color.
        PRECONDICIONES:
            * No tiene.
    */
    return (Rojo)
}

function colorNroApostado() {
    /*
        PROPÓSITO:
            * Describe el color que representa el número apostado.
        TIPO: Tipo
        PRECONDICIONES:
            * No tiene.
    */
    
    return (Azul)
}

function colorMonto() {
    /*
        PROPÓSITO:
            * Describe el color que representa al monto apostado.
        TIPO: Color.
        PRECONDICIONES:
            * No tiene.
    */
    return (Verde)
}

function nroApostado() {
    /*
        PROPÓSITO:
            * Describe el número apostado en la celda actual.
        TIPO: Número.
        PRECONDICIONES:
            * Debe haber una apuesta en la celda actual.
    */
    return (nroBolitas(colorNroApostado()))
}

function monto() {
    /*
        PROPÓSITO:
            * Describe el monto de la apuesta en la celda actual.
        PRECONDICIONES:
            * Debe haber una apuesta en la celda actual.
    */ 
    return (nroBolitas(colorMonto()))
}

function hayApuesta() {
    /*
        PROPÓSITO:
            * Indica si hay una apuesta en la celda actual.
        TIPO: Booleano.
        PRECONDICIONES:
            * No tiene.
    */ 
    return (not esCeldaVacía())
}


procedure AgregarApuestaDe_Al_Para_(monto, nroApostado, nroJugador) {
    /*
        PROPÓSITO:
            * Agrega la apuesta indicada en alguna celda vacía.
        PARÁMETROS:
            * monto: Número - Describe el monto de la apuesta.
            * nroApostado: Número - Describe el número que apuesta el jugador.
            * nroJugador: Número - Describe el número del jugador que hizo la apuesta.
        PRECONDICIONES:
            * Debe haber al menos una celda vacía.
    */
    IrAUnaCeldaVacia()
    AgregarApuestaDe_Al_Para_EnLaCeldaActual(monto, nroApostado, nroJugador) 
}

procedure IrAUnaCeldaVacia() {
    /*
        PROPÓSITO: 
            * Ubica el cabezal en una celda vacía.
        PRECONDICIONES:
            * Debe haber al menos una celda vacía en el tablero.
        OBSERVACIONES:
            * Recorrido de búsqueda por celdas en el tablero.
    */
    IrAPrimeraCeldaEnUnRecorridoAl_Y_(Este, Norte)
    while (not esCeldaVacía()) {
        IrASiguienteCeldaEnUnRecorridoAl_Y_(Este, Norte)
    }
}

procedure AgregarApuestaDe_Al_Para_EnLaCeldaActual(monto, nroApostado, nroJugador) {
    /*
        PROPÓSITO:
            * Agrega la apuesta indicada en la celda actual.
        PARÁMETROS:
            * monto: Número - Describe el monto de la apuesta.
            * nroApostado: Número - Describe el número que apuesta el jugador.
            * nroJugador: Número - Describe el número del jugador que hizo la apuesta.
        PRECONDICIONES:
            * La celda actual debe estar vacía.
    */
    AgregarJugador_(nroJugador)
    AgregarNúmeroApostado_(nroApostado)
    AgregarMonto_(monto)
}

procedure AgregarJugador_(nroJugador) {
    /*
        PROPÓSITO:
            * Agrega el jugador número **nroJugador** en la celda actual.
        PARÁMETROS:
            * nroJugador: Número - Describe el número del jugador que hizo la apuesta..
        PRECONDICIONES:
            * La celda actual debe estar vacía.
    */
    Poner_DeColor(nroJugador, colorJugador())
}

procedure AgregarNúmeroApostado_(nroApostado) {
    /*
        PROPÓSITO:
            * Agrega el número apostado.
        PARÁMETROS:
            * nroApostado: Número - Describe el número que apuesta el jugador.
        PRECONDICIONES:
            * Debe haber un jugador en la celda actual.
    */
    Poner_DeColor(nroApostado, colorNroApostado())
}

procedure AgregarMonto_(monto) {
    /*
        PROPÓSITO:
            * Agrega el monto de la apuesta.
        PARÁMETROS:
            * monto: Número - Describe el monto de la apuesta.
        PRECONDICIONES:
            * Debe haber un jugador en la celda actual.
    */
    Poner_DeColor(monto, colorMonto())
}

// b. PagarYCobrarAl_(nroQueSalió), que pague las apuestas que
// acertaron, y retire el total del dinero de las que no acertaron (solamente el
// dinero). Se paga 5 veces el monto de la apuesta; por ejemplo, para una
// apuesta de 3 pesos se pagan 15, quedando 18 pesos en la celda.

procedure PagarYCobrarAl_(nroQueSalió) {
    /*
        PROPÓSITO:
            * Paga las apuestas que acertaron y retira el total del dinero de las que no acertaron.
        PARÁMETROS:
            * nroQueSalió: Número - Describe el número que salió en la apuesta.
        PRECONDICIONES:
            * En el tablero debe haber una representación válida de una mesa de apuestas.
    */
    IrAPrimeraCeldaEnUnRecorridoAl_Y_(Este, Norte)
    while (haySiguienteCeldaEnUnRecorridoAl_Y_(Este, Norte)) {
        PagarYCobrarAl_SiHayApuestaEnLaCeldaActual(nroQueSalió)
        IrASiguienteCeldaEnUnRecorridoAl_Y_(Este, Norte)
    }
    PagarYCobrarAl_EnLaCeldaActual(nroQueSalió)
}

procedure PagarYCobrarAl_SiHayApuestaEnLaCeldaActual(nroQueSalió) {
    /*
        PROPÓSITO:
            * Si en la celda actual hay una apuesta, paga si el **nroQueSalió** es el número apostado o en caso contrario, retira todo el dinero de la apuesta.
        PARÁMETROS:
            * nroQueSalió: Número - Describe el número que salió en la apuesta.
        PRECONDICIONES:
            * No tiene.
    */
    if (hayApuesta()) {
        PagarYCobrarAl_EnLaCeldaActual(nroQueSalió)
    }
}

procedure PagarYCobrarAl_EnLaCeldaActual(nroQueSalió) {
    /*
        PROPÓSITO:
            * Paga si el **nroQueSalió** es el número apostado en la celda actual o en caso contrario, retira todo el dinero de la apuesta.
        PARÁMETROS:
            * nroQueSalió: Número - Describe el número que salió en la apuesta.
        PRECONDICIONES:
            * Debe haber una apuesta en la celda actual.
    */
    if (nroQueSalió == nroApostado()) {
        PagarApuesta()
    }
    else {
        ExtraerDineroDeLaCuenta()
    }
}

procedure PagarApuesta() {
    /*
        PROPÓSITO:
            * Paga la apuesta realizada por el jugador en la celda actual.
        PRECONDICIONES:
            * Debe haber una apuesta en la celda actual.
        OBSERVACIONES:
            * Se paga 5 veces el monto de la apuesta; por ejemplo, para una
              apuesta de 3 pesos se pagan 15, quedando 18 pesos en la celda.
    */
    Poner_DeColor(totalAPagar(monto()), colorMonto())
}

function totalAPagar(monto) {
    /*
        PROPÓSITO:
            * Describe el total a pagar de acuerdo al monto en la celda actual.
        PARÁMETROS:
            * monto: Número - Describe el monto realizado en la apuesta.
        TIPO: Número.
        PRECONDICIONES:
            * **monto** debe ser un número mayor o igual a cero.
    */
    return (monto + monto*5)
}


// c. RecogerPropinas(), que extrae un peso de cada celda donde haya al
// menos 15 pesos.
// d. SeVaElJugador_(nroJugador), que borra todas las celdas que registran
// una apuesta del jugador indicado.
// e. DuplicarApuestasAl_(nroApostado), que duplica el monto de las
// apuestas al número indicado.
// f. DuplicarApuestasDelJugador_(nroJugador), que duplica el monto
// de las apuestas que hizo el jugador indicado.
// g. CambiarNroApostadoDel_Al_(nroAnterior, nroNuevo), que
// cambia todas las apuestas de nroAnterior para que pasen a apostar a
// nroNuevo.
// h. AumentarEn_LaApuestaDelJugador_Al_(monto, nroJugador,
// nroApostado), que agrega el monto indicado a la apuesta de este jugador
// al número dado.
// i. BuscarApuestaDelJugador_Al_(nroJugador, nroApostado), que
// posiciona el cabezal en una celda que sea el registro de una apuesta del
// jugador y número apostado indicados. Si no se ha registrado una apuesta
// con estas características, el cabezal debe ubicarse en el extremo noreste.