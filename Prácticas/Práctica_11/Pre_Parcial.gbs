type ProtectoraDeAnimales is record {
/*
    PROPÓSITO: Modela una entidad protectora de animales.
    Inv. Rep.:
    * No hay dos animales con el mismo nombre.
    * No hay dos adoptantes con el mismo DNI
    * No hay dos cuidadores con el mismo nombre
    */

    field animales // [Animal]
    field cuidadores // [Cuidador]
    field adopciones // [Adopcion]
    field adoptantes // [Adoptante]
}

type Animal is record {
/*
    PROPÓSITO: Modela un Animal.
    INV.REP:
    * El campo nombre no puede estar
    vacio
    * mesesDeEdad es un número mayor o
    igual a cero.
    */

    field nombre // String
    field especie // Especie
    field mesesDeEdad // Número
    field vacunas // [Vacuna]
    field enRecuperacion // Booleano
}

type Adopción is record {
/*
    PROPÓSITO: Modela una adopción.
    INV.REP:
    * El campo dniAdoptante no puede estar
    vacio
    * El campo nombreAnimal no puede estar
    vacio
    */

    field dniAdoptante // String
    field nombreAnimal // String
    field fechaAdopcion // Fecha
}

type Cuidador is record {
/*
    PROPÓSITO: Modela un Cuidador.
    INV.REP:
    * El campo nombre no puede estar
    vacío
    * No hay dos animalesACargo
    iguales
    */

    field nombre // String
    field animalesACargo // [String]
}

type Especie is variant {
/*
    PROPÓSITO: Modela las especies de
    animales.
    */

    case Perro {}
    case Gato {}
    case Conejo {}
    case Pájaro {}
}

type TipoDeVacuna is variant {
/*
    PROPÓSITO: Modela los tipos de
    vacunas.
    */
    case Antirrábica {}
    case TripleFelina {}
    case Polivalente {}
    case Moquillo {}
}

type Adoptante is record {
/*
    PROPÓSITO: Modela los adoptantes.
    INV.REP:
    * El campo dni no puede estar vacío
    * El campo teléfono no puede estar vacío
    * El campo dirección no puede estar vacío
    */

    field dni // String
    field teléfono // String
    field dirección // String
}

type Vacuna is record {
    /*
    PROPÓSITO: Modela una Vacuna.
    */

    field tipo // TipoDeVacuna
    field fechaAplicacion //Fecha
}

// Punto 1)
// Escriba la función protectoraConAnimalesVacunadosConAntirrabicaSiCorrespondeEn_ que dada una
// protectora, describe la protectora con todos los animales que tienen más de 2 meses de edad con la Antirrábica
// incluida en sus vacunas, esta vacuna se aplica una unica vez, si ya fue aplicada, no debe aplicarse nuevamente.
// Para solucionar este problema puede hacer uso de la función primitiva contieneLaVacuna_En_, que dado un tipo
// de vacuna y una lista de vacunas, indica si la vacuna con el tipo dado existe en la lista dada.

function protectoraConAnimalesVacunadosConAntirrabicaSiCorrespondeEn_(protectora) {
    /*
        PROPÓSITO:
            * Describe la protectora de animales con todos los animales que tienen más de 2 meses de edad con la Antirrábica incluída en sus vacunas.
        PARÁMETROS:
            * protectora: ProtectoraDeAnimales
        TIPO: ProtectoraDeAnimales
        PRECONDICIONES:
            * No tiene (es una función total).
        OBSERVACIONES:
            * Recorrido de transformación sobre la lista de animales de la protectora.
    */
    
    animalesDeMásDeDosMesesConLaAntirrábicaAlMomento := []

    foreach animal in animales(protectora) {
        animalesDeMásDeDosMesesConLaAntirrábicaAlMomento := animalesDeMásDeDosMesesConLaAntirrábicaAlMomento ++
        [animal_VacunadoCon_Si_(animal, Antirrábica, _tieneMásDe_MesesDeEdad(animal, 2) && not contieneLaVacuna_En_(Antirrábica, vacunas(animal)))]
    }

    return (ProtectoraDeAnimales(protectora | animales <- animalesDeMásDeDosMesesConLaAntirrábicaAlMomento))
}

function animal_VacunadoCon_Si_(animal, tipoDeVacuna, condición) {
    /*
        PROPÓSITO:
            * Describe el animal que resulta de aplicar la vacuna del tipo dado al animal dado si se cumple la condición dada; en caso contrario, describe al animal original.
        PARÁMETROS:
            * animal: Animal
            * tipoDeVacuna: TipoDeVacuna
            * condición: Booleano
        TIPO: Animal
        PRECONDICIONES:
            * No tiene (es una función total).
    */
    
    return (choose Animal(animal | vacunas <- 
                                        vacunas(animal) ++ [vacunaDeTipo_En_(tipo, fechaActual())]) when (condición)
                   animal otherwise
    )
    
}

function vacunaDeTipo_En_(tipoDeVacuna, fecha) {
    /*
        PROPÓSITO:
            * Describe la vacuna del tipo dado en la fecha dada.
        PARÁMETROS:
            * tipo: TipoDeVacuna
            * fecha: Fecha
        TIPO: Vacuna
        PRECONDICIONES:
            * No tiene (es una función total).
    */
    
    return (
            Vacuna(
                tipo <- tipoDeVacuna
            ,   fechaAplicacion <- fecha
         )
    )
}

function _tieneMásDe_MesesDeEdad(animal, meses) {
    /*
        PROPÓSITO:
            * Indica si la edad del animal dado es mayor al número de meses dado.
        PARÁMETROS:
            * animal: Animal
            * meses: Número
        TIPO: Booleano
        PRECONDICIONES:
            * **meses** debe ser >= 0.
    */
    
    return (mesesDeEdad(animal) > meses)
}

// Punto 2)
// Escriba la función nombreDeAnimalesDisponiblesParaAdopcionEn_ que dada una protectora, describe una lista
// con los nombres de los animales que están aptos para ser adoptados. Un animal está apto para ser adoptado
// cuando tiene más de 2 meses de edad, no está en recuperación ,cuando entre sus vacunas tiene :
// - Para los gatos: La antirrábica, la triple felina y la de moquillo
// - Para los perros: la antirrábica, la polivalente y la del moquillo
// - para los conejos: la antirrábica y el moquillo
// - para los pájaros: ninguna.
// Como estrategia pensar una subtarea que dado un animal, reconoce la especie del animal y en base a esto evaluar
// si tiene las vacunas necesarias para ser adoptado.

function nombreDeAnimalesDisponiblesParaAdopcionEn_(protectora) {
    /*
        PROPÓSITO:
            * Describe una lista con los nombres de los animales que están aptos para ser adoptados en la protectora dada.
        PARÁMETROS:
            * protectora: ProtectoraDeAnimales
        TIPO: [String]
        PRECONDICIONES:
            * No tiene (es una función total).
        OBSERVACIONES:
            * Recorrido de filtrado de los nombres de los animales de la protectora aptos para ser adoptados.
    */
    
    animalesAptosParaSerAdoptadosAlMomento := []

    foreach animal in animales(protectora) {
        animalesAptosParaSerAdoptadosAlMomento := animalesAptosParaSerAdoptadosAlMomento ++ 
        singular_Si_(animal, es_AptoParaSerAdoptado(animal))
    }

    return (nombresDe_(animalesAptosParaSerAdoptadosAlMomento))
}

function es_AptoParaSerAdoptado(animal) {
    /*
        PROPÓSITO:
            * Indica si el animal dado es apto para ser adoptado.
        PARÁMETROS:
            * animal: Animal
        TIPO: Booleano
        PRECONDICIONES:
            * No tiene (es una función total).
    */
    
    return (_tieneMásDe_MesesDeEdad(animal, 2) && not enRecuperacion(animal) && tiene_LasVacunasNecesariasParaSerAdoptado(animal))
}

function tiene_LasVacunasNecesariasParaSerAdoptado(animal) {
    /*
        PROPÓSITO:
            * Indica si el animal dado tiene las vacunas para ser adoptado, según los requerimientos de su especie.
        PARÁMETROS:
            * animal: Animal
        TIPO: Booleano
        PRECONDICIONES:
            * No tiene (es una función total).
        OBSERVACIONES:
            * Recorrido de búsqueda sobre la lista de tipos de vacunas necesarias para la adopción del animal dado.
    */

    vacunasNecesariasPorRecorrer := vacunasDe_NecesariasParaSerAdoptado(animal)

    while (not esVacía(vacunasNecesariasPorRecorrer) && contieneLaVacuna_En_(primero(vacunasNecesariasPorRecorrer, vacunas(animal)))) {
        vacunasNecesariasPorRecorrer := resto(vacunasNecesariasPorRecorrer)
    }

    return (esVacía(vacunasNecesariasPorRecorrer))
}

function vacunasDe_NecesariasParaSerAdoptado(animal) {
    /*
        PROPÓSITO:
            * Describe la lista de los tipos de vacunas necesarias para que el animal dado esté apto para ser adoptado, según los requerimientos de su especie.
        PARÁMETROS:
            * animal: Animal
        TIPO: [TipoDeVacuna]
        PRECONDICIONES:
            * No tiene (es una función total).
    */
    
    return (choose [Antirrábica, TripleFelina, Moquillo] when (esGato(animal))
                   [Antirrábica, Polivalente, Moquillo]  when (esPerro(animal))
                   [Antirrábica, Moquillo]               when (esConejo(animal))
                   []                                    otherwise 
    )
}

function nombresDe_(animales) {
    /*
        PROPÓSITO:
            * Describe la lista de nombres de los animales dados.
        PARÁMETROS:
            * animales: [Animal]
        TIPO: [String]
        PRECONDICIONES:
            * No tiene (es una función total).
    */
    
    nombresDeLosAnimalesAlMomento := []

    foreach animal in animales {
        nombresDeLosAnimalesAlMomento := nombresDeLosAnimalesAlMomento ++ [nombre(animal)]
    }

    return (nombresDeLosAnimalesAlMomento)
}

function esGato(animal) {
    /*
        PROPÓSITO:
            * Indica si el animal dado es un gato.
        PARÁMETROS:
            * animal: Animal
        TIPO: Booleano
        PRECONDICIONES:
            * No tiene (es una función total).
    */
    
    return (especie(animal) == Gato)
}

function esPerro(animal) {
    /*
        PROPÓSITO:
            * Indica si el animal dado es un perro.
        PARÁMETROS:
            * animal: Animal
        TIPO: Booleano
        PRECONDICIONES:
            * No tiene (es una función total).
    */
    
    return (especie(animal) == Perro)
}

function esGato(animal) {
    /*
        PROPÓSITO:
            * Indica si el animal dado es un conejo.
        PARÁMETROS:
            * animal: Animal
        TIPO: Booleano
        PRECONDICIONES:
            * No tiene (es una función total).
    */
    
    return (especie(animal) == Conejo)
}

// Punto 3)
// Escriba la función animalesDelCuidador_QueFueronAdoptadosEn_ que dado el nombre de un cuidador y
// una protectora, describe la lista de animales que fueron adoptados y estaban a cargo del cuidador dado. Tener en
// cuenta que podrían existir cuidadores que aun no participaron de ninguna adopción.

function animalesDelCuidador_QueFueronAdoptadosEn_(nombreCuidador, protectora) {
    /*
        PROPÓSITO:
            * Describe la lista de animales que fueron adoptados y que estaban a cargo del cuidador dado.
        PARÁMETROS:
            * nombreCuidador: String
            * protectora: ProtectoraDeAnimales
        TIPO: [Animal]
        PRECONDICIONES:
            * Debe existir el cuidador con el nombre dado en la protectora.
    */
    
    animalesAdoptadosCuidadosPorElCuidadorDado := []

    foreach animal in animales(protectora) {
        animalesAdoptadosCuidadosPorElCuidadorDado := animalesAdoptadosCuidadosPorElCuidadorDado ++
        singular_Si_(animal, _FueAdoptadoEn_(animal, protectora) && _EstabaACargoDe_En_(animal, nombreCuidador, protectora))
    }

    return (animalesAdoptadosCuidadosPorElCuidadorDado)
}

function _FueAdoptadoEn_(animal, protectora) {
    /*
        PROPÓSITO:
            * Indica si el animal figura en la lista de adopciones de la protectora.
        PARÁMETROS:
            * animal: Animal
            * protectora: ProtectoraDeAnimales
        TIPO: Booleano
        PRECONDICIONES:
            * No tiene (es una función total).
    */
    
    adopcionesPorRecorrer := adopciones(protectora) 

    while (not esVacía(adopcionesPorRecorrer) && nombreAnimal(primero(adopcionesPorRecorrer)) /= nombre(animal)) {
        adopcionesPorRecorrer := resto(adopcionesPorRecorrer)
    }

    return (not esVacía(adopcionesPorRecorrer))
}

function _EstabaACargoDe_En_(animal, nombreCuidador, protectora) {
    /*
        PROPÓSITO:
            * Indica si el animal dado estaba a cargo del cuidador de nombre dado en la protectora de animales dada.
        PARÁMETROS:
            * animal: Animal
            * nombreCuidador: String
            * protectora: ProtectoraDeAnimales
        TIPO: Booleano
        PRECONDICIONES:
            * Debe existir el cuidador con el nombre dado en la protectora.
    */
    
    cuidadoresPorRecorrer := cuidadores(protectora)

    while (not esVacía(cuidadoresPorRecorrer) && not contiene_A_(nombre(animal), animalesACargo(cuidador))) {
        cuidadoresPorRecorrer := resto(cuidadores)
    }

    return (not esVacía(cuidadoresPorRecorrer))
}

// Punto 4) (Extra)
// Escriba la funcion animalesRecuperadosAdoptadosPor_En_ que dado una lista de dnis de adoptadores
// comprometidos con la protectora y se ofrecieron a cuidar animales animales que aún no se recuperaron; y una
// protectora, describiendo una lista de esos animales que ahora se encuentran recuperados.

function animalesRecuperadosAdoptadosPor_En_(dnisAdoptantes, protectora) {
    /*
        PROPÓSITO:
            * 
        PARÁMETROS:
            * dnisAdoptadores: [Número]
            * protectora: ProtectoraDeAnimales
        TIPO: Tipo
        PRECONDICIONES:
            * ....
    */
    
    return ()
}