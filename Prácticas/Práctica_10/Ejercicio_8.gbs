// Construir las funciones:
// a. sumatoriaDe_, que dada una lista de N√∫meros, describa la suma de todos los
// elementos de la misma.
// Por ejemplo, sumatoriaDe_([1,10,15,7,9]) describe el n√∫mero 42,
// porque 1+10+15+7+9 es igual a 42;

function sumatoriaDe_(listaDeN√∫meros) {
    /*
        PROP√ìSITO:
            * Describe la suma de todos los elementos de la lista dada.
        PAR√ÅMETROS:
            * listaDeN√∫meros: [N√∫mero].
        TIPO: N√∫mero.
        PRECONDICIONES:
            * No tiene (es una funci√≥n total).
    */
    
    n√∫merosPorSumar := listaDeN√∫meros

    sumatoriaHastaAhora := 0

    while (not esVac√≠a(n√∫merosPorSumar)) {
        
        sumatoriaHastaAhora := sumatoriaHastaAhora + primero(n√∫merosPorSumar)

        n√∫merosPorSumar := resto(n√∫merosPorSumar)
    }

    return (sumatoriaHastaAhora)
}

// b. productoriaDe_, que dada una lista de N√∫meros, describa el producto de
// todos los elementos de la misma.
// Por ejemplo, productoriaDe_([1,5,7,9]) describe el n√∫mero 315, porque
// 1*5*7*9 es igual a 315.

function productoriaDe_(listaDeN√∫meros) {
    /*
        PROP√ìSITO:
            * Describe el producto de los elementos de la lista dada.
        PAR√ÅMETROS:
            * listaDeN√∫meros: [N√∫mero].
        TIPO: N√∫mero.
        PRECONDICIONES:
            * La lista dada no debe ser vac√≠a.
    */
    
    n√∫merosPorMultiplicar := listaDeN√∫meros

    productoHastaAhora := 1

    while (not esVac√≠a(n√∫merosPorMultiplicar)) {
        
        productoHastaAhora := productoHastaAhora * primero(n√∫merosPorMultiplicar)

        n√∫merosPorMultiplicar := resto(n√∫merosPorMultiplicar)
    }

    return (productoHastaAhora)
}

// c. cantidadDeBolitas_DelTablero, que dado un color, indique la cantidad
// total de bolitas de ese color que hay en el tablero. ¬øPuede hacerse reutilizando
// c√≥digo ya hecho?
// AYUDA: pensar en combinar algunas de las funciones hechas en ejercicios
// anteriores con alguna de las de este.

function cantidadDeBolitas_DelTablero(colorBuscado) {
    /*
        PROP√ìSITO:
            * Describe la cantidad total de bolitas de color **colorBuscado** que hay en el tablero.
        PAR√ÅMETROS:
            * colorBuscado: Color.
        TIPO: N√∫mero.
        PRECONDICIONES:
            * No tiene (es una funci√≥n total).
    */
    
    return (sumatoriaDe_(aparicionesDeColor_(colorBuscado)))
}

// FUNCIONES AUXILIARES üë∑üèº‚Äç‚ôÇÔ∏è

function aparicionesDeColor_(colorBuscado) {
    /*
        PROP√ìSITO:
            * Describe una lista de n√∫meros que indican, para cada una de las celdas del tablero recorridas en direcci√≥n principal Norte y direcci√≥n secundaria Oeste, la cantidad de bolitas del color buscado en ese celda del tablero.
        PAR√ÅMETROS:
            * colorBuscado: Color.
        TIPO: [N√∫mero].
        PRECONDICIONES:
            * No tiene (es una funci√≥n total).
        OBSERVACIONES:
            * Recorrido de ...
    */

    listaDeCantidadesDelColorBuscado := []

    IrAPrimeraCeldaEnUnRecorridoAl_Y_(Norte, Oeste)

    while (haySiguienteCeldaEnUnRecorridoAl_Y_(Norte, Oeste)) {
        listaDeCantidadesDelColorBuscado := listaDeCantidadesDelColorBuscado ++ [nroBolitas(colorBuscado)]

        IrASiguienteCeldaEnUnRecorridoAl_Y_(Norte, Oeste)
        
    }

    return (listaDeCantidadesDelColorBuscado ++ [nroBolitas(colorBuscado)])
}