// Escribir las funciones dadas a continuaci√≥n, que reciben como par√°metros una lista de
// n√∫meros que representa las cantidades de bolitas rojas de una fila cualquiera:
// a. las3PrimerasDe_ConLaMismaCantidad, que indica si las primeras 3 celdas
// al Oeste de la fila representada ten√≠an la misma cantidad de bolitas rojas al
// momento en que la fila fue le√≠da.

function las3PrimerasDe_ConLaMismaCantidad(listaDeRojasEnLaFila) {
    /*
        PROP√ìSITO:
            * Indica si las primeras 3 celdas al Oeste de la fila representada por la lista dada ten√≠an la misma cantidad de bolitas rojas al momento en que la fila fue le√≠da.
        PAR√ÅMETROS:
            * listaDeRojasEnLaFila: [N√∫mero].
        TIPO: Booleano.
        PRECONDICIONES:
            * **listaDeRojasEnLaFila** debe tener al menos 3 elementos.
    */
    
    return (
            primero(listaDeRojasEnLaFila) == segundo(listaDeRojasEnLaFila) &&
            segundo(listaDeRojasEnLaFila) == tercero(listaDeRojasEnLaFila)
           )
}

// b. las3PrimerasDe_ConDistintasCantidades que indica si en las primeras 3
// celdas al Oeste hay diferente cantidad de bolitas de rojas (es decir, son todas
// distintas).


function las3PrimerasDe_ConDistintasCantidades(listaDeRojasEnLaFila) {
    /*
        PROP√ìSITO:
            * Indica si en las primeras 3 celdas al Oeste de la fila representada por la lista dada ten√≠an distinta cantidad de bolitas rojas (todas distintas) al momento en que la fila fue le√≠da.
        PAR√ÅMETROS:
            * listaDeRojas: [N√∫mero].
        TIPO: Booleano.
        PRECONDICIONES:
            * **listaDeRojasEnLaFila** debe tener al menos 3 elementos.
    */
    
    return (
            sonDistintos_Y_(primero(listaDeRojasEnLaFila, segundo(listaDeRojasEnLaFila))) &&
            sonDistintos_Y_(segundo(listaDeRojasEnLaFila, tercero(listaDeRojasEnLaFila))) &&
            sonDistintos_Y_(primero(listaDeRojasEnLaFila), tercero(listaDeRojasEnLaFila))
           )
}


// c. hayAlgunaCantidadIgualEnLas3PrimerasDe_ que determine si en alg√∫n
// caso hay la misma cantidad de bolitas de dos colores (por ejemplo, la primera y
// la tercera celda tienen la misma cantidad de bolitas rojas, o la segunda y la
// tercera, etc.).




// FUNCIONES AUXILIARES ü•®

function segundo(lista) {
    /*
        PROP√ìSITO: 
            * Describe el segundo elemento de la lista dada.
        PAR√ÅMETROS:
            * lista: [Elemento].
        TIPO: Elemento.
        PRECONDICIONES:
            * La lista dada debe tener al menos 2 elementos.
    */
    
    return (primero(resto(lista)))
}

function tercero(lista) {
    /*
        PROP√ìSITO: 
            * Describe el tercer elemento de la lista dada.
        PAR√ÅMETROS:
            * lista: [Elemento].
        TIPO: Elemento.
        PRECONDICIONES:
            * La lista dada debe tener al menos 3 elementos.
    */
    
    return (primero(resto(resto(lista))))
}

function sonDistintos_Y_(elemento1, elemento2) {
    /*
        PROP√ìSITO:
            * Indica si los elementos dados son distintos.
        PAR√ÅMETROS:
            * elemento1: Elemento.
            * elemento2: Elemento.
        TIPO: Booleano.
        PRECONDICIONES:
            * Los elementos dados deben ser del mismo tipo.
    */
    
    return (elemento1 /= elemento2)
}