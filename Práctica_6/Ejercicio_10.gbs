// El casino, parte 1
// En este ejercicio el tablero tiene información sobre las apuestas de diferentes
// jugadores en un casino, para un juego de extracción de números. En la mesa del
// juego hay una cantidad de jugadores, cada uno identificado por un número. Cada
// celda del tablero representa una apuesta, de la siguiente forma.
// ● Bolitas rojas: el número de jugador.
// ● Bolitas azules: el número apostado.
// ● Bolitas verdes: el monto apostado, donde cada bolita verde es un peso.
// Puede haber varias apuestas del mismo apostador, a distintos números.
// A modo de ejemplo, se muestra uno de los posibles tableros que modela la siguiente
// situación:
// ● El jugador 1 apostó 19 pesos al 48.
// ● El jugador 2 apostó 22 pesos al 7 y 13 pesos al 13.
// ● El jugador 3 apostó 5 pesos al 15.
// ● Queda espacio para registrar dos apuestas más.

// Escribir las siguientes operaciones. En cada caso, recordar escribir primero el
// contrato, y expresar la estrategia usando subtareas (preferentemente con la
// metodología top-down).
// a. AgregarApuestaDe_Al_Para_(monto, nroApostado, nroJugador)
// que agrega la apuesta indicada en alguna celda vacía, la cual debe existir.

function colorJugador() {
    /*
        PROPÓSITO:
            * Describe el color que representa al jugador que hizo la apuesta.
        TIPO: Color.
        PRECONDICIONES:
            * No tiene.
    */
    return (Rojo)
}

function colorNroApostado() {
    /*
        PROPÓSITO:
            * Describe el color que representa el número apostado.
        TIPO: Tipo
        PRECONDICIONES:
            * No tiene.
    */
    
    return (Azul)
}

function colorMonto() {
    /*
        PROPÓSITO:
            * Describe el color que representa al monto apostado.
        TIPO: Color.
        PRECONDICIONES:
            * No tiene.
    */
    return (Verde)
}

function nroJugador() {
    /*
        PROPÓSITO:
            * Decribe el número que representa al jugador en la celda actual.
        TIPO: Número.
        PRECONDICIONES:
            * Debe haber una apuesta válida en la celda actual.
    */
    return (nroBolitas(colorJugador()))
}

function nroApostado() {
    /*
        PROPÓSITO:
            * Describe el número apostado en la celda actual.
        TIPO: Número.
        PRECONDICIONES:
            * Debe haber una apuesta válida en la celda actual.
    */
    return (nroBolitas(colorNroApostado()))
}

function monto() {
    /*
        PROPÓSITO:
            * Describe el monto de la apuesta en la celda actual.
        PRECONDICIONES:
            * Debe haber una apuesta válida en la celda actual.
    */ 
    return (nroBolitas(colorMonto()))
}

function hayApuesta() {
    /*
        PROPÓSITO:
            * Indica si hay una apuesta en la celda actual.
        TIPO: Booleano.
        PRECONDICIONES:
            * No tiene.
    */ 
    return (hayJugador() && hayNroApostado() && hayMonto())
}

procedure AgregarApuestaDe_Al_Para_(monto, nroApostado, nroJugador) {
    /*
        PROPÓSITO:
            * Agrega la apuesta indicada en alguna celda vacía.
        PARÁMETROS:
            * monto: Número - Describe el monto de la apuesta.
            * nroApostado: Número - Describe el número que apuesta el jugador.
            * nroJugador: Número - Describe el número del jugador que hizo la apuesta.
        PRECONDICIONES:
            * Debe haber al menos una celda vacía.
    */
    IrAUnaCeldaVacia()
    AgregarApuestaDe_Al_Para_EnLaCeldaActual(monto, nroApostado, nroJugador) 
}

procedure IrAUnaCeldaVacia() {
    /*
        PROPÓSITO: 
            * Ubica el cabezal en una celda vacía.
        PRECONDICIONES:
            * Debe haber al menos una celda vacía en el tablero.
        OBSERVACIONES:
            * Recorrido de búsqueda por celdas en el tablero.
    */
    IrAPrimeraCeldaEnUnRecorridoAl_Y_(Este, Norte)
    while (not esCeldaVacía()) {
        IrASiguienteCeldaEnUnRecorridoAl_Y_(Este, Norte)
    }
}

procedure AgregarApuestaDe_Al_Para_EnLaCeldaActual(monto, nroApostado, nroJugador) {
    /*
        PROPÓSITO:
            * Agrega la apuesta indicada en la celda actual.
        PARÁMETROS:
            * monto: Número - Describe el monto de la apuesta.
            * nroApostado: Número - Describe el número que apuesta el jugador.
            * nroJugador: Número - Describe el número del jugador que hizo la apuesta.
        PRECONDICIONES:
            * La celda actual debe estar vacía.
            * El jugador que agrega la apuesta no debe tener una apuesta con el mismo número.
    */
    AgregarJugador_(nroJugador)
    AgregarNúmeroApostado_(nroApostado)
    AgregarMonto_(monto)
}

procedure AgregarJugador_(nroJugador) {
    /*
        PROPÓSITO:
            * Agrega el jugador número **nroJugador** en la celda actual.
        PARÁMETROS:
            * nroJugador: Número - Describe el número del jugador que hizo la apuesta.
        PRECONDICIONES:
            * La celda actual debe estar vacía.
    */
    Poner_DeColor(nroJugador, colorJugador())
}

procedure AgregarNúmeroApostado_(nroApostado) {
    /*
        PROPÓSITO:
            * Agrega el número apostado.
        PARÁMETROS:
            * nroApostado: Número - Describe el número que apuesta el jugador.
        PRECONDICIONES:
            * Debe haber un jugador en la celda actual.
    */
    Poner_DeColor(nroApostado, colorNroApostado())
}

procedure AgregarMonto_(monto) {
    /*
        PROPÓSITO:
            * Agrega el monto de la apuesta.
        PARÁMETROS:
            * monto: Número - Describe el monto de la apuesta.
        PRECONDICIONES:
            * Debe haber un jugador en la celda actual.
    */
    Poner_DeColor(monto, colorMonto())
}

// b. PagarYCobrarAl_(nroQueSalió), que pague las apuestas que
// acertaron, y retire el total del dinero de las que no acertaron (solamente el
// dinero). Se paga 5 veces el monto de la apuesta; por ejemplo, para una
// apuesta de 3 pesos se pagan 15, quedando 18 pesos en la celda.

procedure PagarYCobrarAl_(nroQueSalió) {
    /*
        PROPÓSITO:
            * Paga las apuestas que acertaron al **nroQueSalió** y retira el total del dinero de las que no acertaron.
        PARÁMETROS:
            * nroQueSalió: Número - Describe el número que resultó ganador.
        PRECONDICIONES:
            * Debe existir en el tablero una representación válida de apuestas.
        OBSERVACIONES:
            * Recorrido de transformación (procesamiento).
    */
    IrAPrimeraCeldaEnUnRecorridoAl_Y_(Este, Norte)
    while (haySiguienteCeldaEnUnRecorridoAl_Y_(Este, Norte)) {
        PagarYCobrarAl_SiHayApuestaEnLaCeldaActual(nroQueSalió)
        IrASiguienteCeldaEnUnRecorridoAl_Y_(Este, Norte)
    }
    PagarYCobrarAl_EnLaCeldaActual(nroQueSalió)
}

procedure PagarYCobrarAl_SiHayApuestaEnLaCeldaActual(nroQueSalió) {
    /*
        PROPÓSITO:
            * Si en la celda actual hay una apuesta, paga si el **nroQueSalió** es el número apostado o en caso contrario, retira todo el dinero de la apuesta.
        PARÁMETROS:
            * nroQueSalió: Número - Describe el número que salió en la apuesta.
        PRECONDICIONES:
            * Si existe una apuesta debe ser una apuesta válida.
    */
    if (hayApuesta()) {
        PagarYCobrarAl_EnLaCeldaActual(nroQueSalió)
    }
}

procedure PagarYCobrarAl_EnLaCeldaActual(nroQueSalió) {
    /*
        PROPÓSITO:
            * Paga si el **nroQueSalió** es el número apostado en la celda actual o en caso contrario, retira todo el dinero de la apuesta.
        PARÁMETROS:
            * nroQueSalió: Número - Describe el número que salió en la apuesta.
        PRECONDICIONES:
            * Debe haber una apuesta válida en la celda actual.
    */
    if (nroQueSalió == nroApostado()) {
        PagarApuesta()
    }
    else {
        ExtraerDineroDeLaCuenta()
    }
}

procedure PagarApuesta() {
    /*
        PROPÓSITO:
            * Paga la apuesta realizada por el jugador en la celda actual.
        PRECONDICIONES:
            * Debe haber una apuesta válida en la celda actual.
        OBSERVACIONES:
            * Se paga 5 veces el monto de la apuesta; por ejemplo, para una
              apuesta de 3 pesos se pagan 15, quedando 18 pesos en la celda.
    */
    Poner_DeColor(totalAPagar(monto()), colorMonto())
}

function totalAPagar(monto) {
    /*
        PROPÓSITO:
            * Describe el total a pagar por una apuesta ganadora de acuerdo al monto en la celda actual.
        PARÁMETROS:
            * monto: Número - Describe el monto realizado en la apuesta.
        TIPO: Número.
        PRECONDICIONES:
            * **monto** debe ser un número mayor o igual a cero.
    */
    return (monto*5)
}

procedure ExtraerDineroDeLaCuenta() {
    /*
        PROPÓSITO: 
            * Extrae todo el dinero de la cuenta actual.
        PRECONDICIONES:
            * Debe haber una apuesta en la celda actual.
    */
    SacarTodasLasDeColor_(colorMonto())
}

// c. RecogerPropinas(), que extrae un peso de cada celda donde haya al
// menos 15 pesos.

procedure RecogerPropinas() {
    /*
        PROPÓSITO:
            * Extrae un peso de cada celda donde haya al menos quince pesos.
        PRECONDICIONES:
            * Debe haber una representación válida de una mesa de apuestas en el tablero.
        OBSERVACIONES:
        * Recorrido de procesamiento.
    */
    IrAPrimeraCeldaEnUnRecorridoAl_Y_(Este, Norte)
    while (haySiguienteCeldaEnUnRecorridoAl_Y_(Este,Norte)){
        Sacar_Si(colorMonto(), monto() >= 15)
        IrASiguienteCeldaEnUnRecorridoAl_Y_(Este,Norte)
    }
    Sacar_Si(colorMonto(), monto() >= 15)
}

procedure Sacar_Si(color, condición) {
    /*
        PROPÓSITO:
            * Saca una bolita de color **color** si se cumple la condición dada.
        PARÁMETROS:
            * color: Color - Describe el color de la bolita a sacar.
            * condición: Booleano - Describe una condición a evaluar.
        PRECONDICIONES:
            * Debe haber al menos una bolita de color **color** en la celda actual.
    */
    if (condición){
        Sacar(color)
    }
}

// d. SeVaElJugador_(nroJugador), que borra todas las celdas que registran
// una apuesta del jugador indicado.

procedure SeVaElJugador_(nroJugador) {
    /*
        PROPÓSITO:
            * Borra todas las celdas que registran una apuesta del jugador **nroJugador**.
        PARÁMETROS:
            * nroJugador: Número - Describe el número del jugador a borrar de la mesa de apuestas.
        PRECONDICIONES:
            * Debe haber una representación válida de una mesa de apuestas en el tablero.
        OBSERVACIONES:
            * Recorrido de procesamiento.
    */
    IrAPrimeraCeldaEnUnRecorridoAl_Y_(Este,Norte)
    while (haySiguienteCeldaEnUnRecorridoAl_Y_(Este,Norte)) {
        SeVaElJugador_SiEstáEnLaCeldaActual(nroJugador)
        IrASiguienteCeldaEnUnRecorridoAl_Y_(Este,Norte)
    }
    SeVaElJugador_SiEstáEnLaCeldaActual(nroJugador)
}

procedure SeVaElJugador_SiEstáEnLaCeldaActual(nroJugador) {
    /*
        PROPÓSITO:
            * Borra la celda actual si registra una apuesta del jugador **nroJugador**.
        PARÁMETROS:
            * nroJugador: Número - Describe el número del jugador a borrar de la celda actual.
        PRECONDICIONES:
            * **nroJugador** debe ser mayor o igual a cero.
    */
    if (nroJugador() == nroJugador) {
        BorrarRegistroDeApuesta()
    }
}

procedure BorrarRegistroDeApuesta() {
    /*
        PROPÓSITO:
            * Borra el registro de apuesta de la celda actual.
        PRECONDICIONES:
            * Debe haber una apuesta válida en la celda actual.
    */
    SacarTodasLasDeColor_(colorJugador())
    SacarTodasLasDeColor_(colorNroApostado())
    SacarTodasLasDeColor_(colorMonto())
}

// e. DuplicarApuestasAl_(nroApostado), que duplica el monto de las
// apuestas al número indicado.

procedure DuplicarApuestasAl_(nroApostado) {
    /*
        PROPÓSITO:
            * Duplica el monto de las apuestas al número **nroApostado**.
        PARÁMETROS:
            * nroApostado: Número - Describe el número a buscar en la mesa de apuestas.
        PRECONDICIONES:
            * Debe haber una representación válida de una mesa de apuestas en el tablero.
        OBSERVACIONES:
            * Recorrido de procesamiento.
    */
    IrAPrimeraCeldaEnUnRecorridoAl_Y_(este,Norte)
    while (haySiguienteCeldaEnUnRecorridoAl_Y_(Este,Norte)) {
        DuplicarApuestasAl_SiEstáEnLaCeldaActual(nroApostado)
        IrASiguienteCeldaEnUnRecorridoAl_Y_(Este,Norte)
    }
    DuplicarApuestasAl_SiEstáEnLaCeldaActual(nroApostado)
}

procedure DuplicarApuestasAl_SiEstáEnLaCeldaActual(nroApostado) {
    /*
        PROPÓSITO:
            * Duplica el monto de la apuesta al número **nroApostado** si está en la celda actual.
        PARÁMETROS:
            * nroApostado: Número - Describe el número a validad en la celda actual.
        PRECONDICIONES:
            * Debe haber una apuesta válida en la celda actual o debe ser una celda vacía.
    */
    if (nroApostado() == nroApostado) {
        Poner_DeColor(monto(), colorMonto())
    }
}

// f. DuplicarApuestasDelJugador_(nroJugador), que duplica el monto
// de las apuestas que hizo el jugador indicado.

procedure DuplicarApuestasAl_(nroJugador) {
    /*
        PROPÓSITO:
            * Duplica el monto de las apuestas que hizo el jugador **nroJugador**.
        PARÁMETROS:
            * nroJugador: Número - Describe el jugador al que se le quiere duplicar las apuestas.
        PRECONDICIONES:
            * Debe haber una representación válida de una mesa de apuestas en el tablero.
        OBSERVACIONES:
            * Recorrido de procesamiento.
    */
    IrAPrimeraCeldaEnUnRecorridoAl_Y_(Este,Norte)
    while (haySiguienteCeldaEnUnRecorridoAl_Y_(Este,Norte)) {
        DuplicarApuestaDelJugador_SiEstáEnLaCeldaActual(nroJugador)
        IrASiguienteCeldaEnUnRecorridoAl_Y_(Este,Norte)
    }
    DuplicarApuestaDelJugador_SiEstáEnLaCeldaActual(nroJugador)
}

procedure DuplicarApuestaDelJugador_SiEstáEnLaCeldaActual(nroJugador) {
    /*
        PROPÓSITO:
            * Duplica el monto de la apuesta del jugador **nroJugador** si está en la celda actual.
        PARÁMETROS:
            * nroJugador: Número - Describe el jugador al que se le quiere duplicar la apuesta.
        PRECONDICIONES:
            * Debe haber una apuesta válida en la celda actual.
    */
    if (nroJugador() == nroJugador) {
        DuplicarMontoDeLaApuestaActual()
    }
}

procedure DuplicarMontoDeLaApuestaActual() {
    /*
        PROPÓSITO:
            * Duplica el monto de la apuesta de la celda actual.
        PRECONDICIONES:
            * Debe haber una apuesta válida en la celda actual.
    */
        Poner_DeColor(monto(), colorMonto())
}

// g. CambiarNroApostadoDel_Al_(nroAnterior, nroNuevo), que
// cambia todas las apuestas de nroAnterior para que pasen a apostar a
// nroNuevo.

procedure CambiarNroApostadoDel_Al_(nroAnterior, nroNuevo) {
    /*
        PROPÓSITO:
            * Cambia todas las apuestas del número **nroAnterior** para que pasen a apostar por el **nroNuevo**.
        PARÁMETROS:
            * nroAnterior: Número - Describe el número que se va a cambiar en las apuestas.
            * nroNuevo: Número - Describe el número nuevo por el que se va a apostar.
        PRECONDICIONES:
            * El tablero debe tener una representación válida de una mesa de apuestas.
        OBSERVACIONES:
            * Recorrido de procesamiento.
    */
    IrAPrimeraCeldaEnUnRecorridoAl_Y_(Este,Norte)
    while (haySiguienteCeldaEnUnRecorridoAl_Y_(Este,Norte)) {
        CambiarNroApostadoDel_Al_SiEstáEnLaCeldaActual(nroAnterior,nroNuevo)
        IrASiguienteCeldaEnUnRecorridoAl_Y_(Este,Norte)
    }
    CambiarNroApostadoDel_Al_EnLaCeldaActual(nroAnterior,nroNuevo)
}

procedure CambiarNroApostadoDel_Al_SiEstáEnLaCeldaActual(nroAnterior,nroNuevo) {
    /*
        PROPÓSITO:
            * Cambia la apuesta del número **nroAnterior** por la del número **nroNuevo** en caso de que esté en la celda actual.
        PARÁMETROS:
            * nroAnterior: Número - Describe el número que se va a cambiar en las apuestas.
            * nroNuevo: Número - Describe el número nuevo por el que se va a apostar.
        PRECONDICIONES:
            * Debe haber una apuesta válida en la celda actual.
    */
    if (nroApostado() == nroAnterior) {
        
    }
    
}

// h. AumentarEn_LaApuestaDelJugador_Al_(monto, nroJugador,
// nroApostado), que agrega el monto indicado a la apuesta de este jugador
// al número dado.
// i. BuscarApuestaDelJugador_Al_(nroJugador, nroApostado), que
// posiciona el cabezal en una celda que sea el registro de una apuesta del
// jugador y número apostado indicados. Si no se ha registrado una apuesta
// con estas características, el cabezal debe ubicarse en el extremo noreste.

procedure BuscarApuestaDelJugador_Al_(nroJugador, nroApostado) {
    /*
        PROPÓSITO:
            * Ubica el cabezal en una celda que sea el registro de una apuesta del jugador **nroJugador** al número **nroApostado**. Si no se ha registrado una apuesta como la mencionada, el cabezal se ubica en el extremo noreste.
        PARÁMETROS:
            * nroJugador: Número - Describe al jugador que realiza la apuesta.
            * nroApostado: Número - Describe al número por el cual se ha apostado.
        PRECONDICIONES:
            * Debe haber una representación válida de una mesa de apuesta en el tablero.
            * Un mismo jugador no puede apostar al mismo número en apuestas diferentes.
        OBSERVACIONES:
            * Recorrido de búsqueda.
    */
    IrAPrimeraCeldaEnUnRecorridoAl_Y_(Este,Norte)
    while (not esElJugador_ConLaApuesta_(nroJugador, nroApostado) && haySiguienteCeldaEnUnRecorridoAl_Y_(Este,Norte)){
        IrASiguienteCeldaEnUnRecorridoAl_Y_(Este,Norte)
    }
}

function esElJugador_ConLaApuesta_(nroJugador, nroApostado) {
    /*
        PROPÓSITO:
            * Indica si el jugador **nroJugador** con una apuesta al número **nroApostado** están en la celda actual.
        PARÁMETROS:
            * nroJugador: Número - Describe el número de jugador a validar.
            * nroApostado: Número - Describe el número apostado a validar.
        TIPO: Booleano.
        PRECONDICIONES:
            * Debe haber una apuesta válida en la celda actual.
    */
    return (nroJugador() == nroJugador && nroApostado() == nroApostado)
}