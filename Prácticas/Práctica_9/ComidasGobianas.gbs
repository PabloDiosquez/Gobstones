// Comidas Gobianas üç©ü•êü•ïüç±

type ComidaGobiana is record {
    /*
        PROP√ìSITO:
            * Modela una comida que come un gobiano.
        INV. DE REP.:
            * calor√≠as es un n√∫mero mayor a cero.
    */

    field nombre   // String
    field origen   // Continente
    field calor√≠as // N√∫mero
}

type Continente is variant {
    /*
        PROP√ìSITO:
            * Modela un continente de donde puede proceder una comida gobiana.
    */

    case √Åfrica     {}
    case Am√©rica    {}
    case Asia       {}
    case Europa     {}
    case Ocean√≠a    {}
}

// Ejercicio 1)
// Como primer ejercicio queremos modelar dos de las comidas Gobianas m√°s t√≠picas, las Bolitas de Fraile, y las Bolitas de Queso. Las primeras son una comida originaria de Am√©rica, y tiene 500 calor√≠as. La segunda, son de Europa, y tienen tan s√≥lo 150 calor√≠as. Se pide implementar entonces:
// a. bolitasDeFraile, una funci√≥n que describe la comida gobiana Bolitas de Fraile.
// b. bolitasDeQueso, una funci√≥n que describe la comida gobiana Bolitas de Queso.

// 1) a.

function bolitasDeFraile() {
    /*
        PROP√ìSITO:
            * Describe la comida gobiana Bolitas de Fraile, de Am√©rica con 500 calor√≠as.
        TIPO: ComidaGobiana.
        PRECONDICIONES:
            * No tiene (es una funci√≥n total).
    */
    
    return (
        ComidaGobiana(
                        nombre   <- "Bolitas de Fraile",
                        origen   <- Am√©rica,
                        calor√≠as <- 500
                    )
    )
}

// 1) b.

function bolitasDeQueso() {
    /*
        PROP√ìSITO:
            * Describe la comida gobiana Bolitas de Queso, de Europa con 150 calor√≠as.
        TIPO: ComidaGobiana.
        PRECONDICIONES:
            * No tiene (es una funci√≥n total).
    */
    
    return (
        ComidaGobiana(
                        nombre   <- "Bolitas de Queso",
                        origen   <- Europa,
                        calor√≠as <- 150
                    )
    )
}

// Ejercicio 2)
// Deseamos determinar si, dadas dos comidas gobianas, la primera tiene m√°s calor√≠as que la segunda. Para ello, realizar la funci√≥n tieneM√°sCalor√≠as_Que_ que dadas dos comidas gobianas, indica si la primera tiene m√°s calor√≠as que la segunda.

function tieneM√°sCalor√≠as_Que_(primerComida, segundaComida) {
    /*
        PROP√ìSITO:
            * Dadas dos comidas gobianas, indica si la primer comida tiene m√°s calor√≠as que la segunda comida.
        PAR√ÅMETROS:
            * primerComida:  ComidaGobiana.
            * segundaComida: ComidaGobiana.
        TIPO: Booleano.
        PRECONDICIONES:
            * No tiene (es una funci√≥n total).
    */
    
    return (calor√≠as(primerComida) > calor√≠as(segundaComida))
}