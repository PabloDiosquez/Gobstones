// Construir el procedimiento Poner_Bolitas_EnElTablero, que dada una lista de
// n√∫meros y un color, recorre el tablero con direcci√≥n principal Norte y direcci√≥n
// secundaria Oeste y pone en cada celda la cantidad de bolitas del color dado, seg√∫n el
// elemento en la posici√≥n correspondiente. Si hubiera menos n√∫meros que celdas, en las
// celdas restantes no se pondr√°n bolitas, y si hubiera m√°s n√∫meros que celdas, se
// ignoran los n√∫meros sobrantes.






// FUNCIONES AUXILARES üê±‚Äçüèç

procedure IrAPrimeraCeldaEnUnRecorridoAl_Y_(dirPrincipal, dirSecundaria) {
    /*
        PROP√ìSITO:
            * Ubica el cabezal en el inicio de un recorrido de direcciones **dirPrincipal** y **dirSecundaria**.
        PAR√ÅMETROS:
            * dirPrincipal: Direcci√≥n - La primera direcci√≥n del recorrido.
            * dirSecundaria: Direcci√≥n - La segunda direcci√≥n del recorrido.
        PRECONDICIONES:
            * Las direcciones dadas no deben ser ni iguales ni opuestas.
    */
    IrAlBorde(opuesto(dirPrincipal))
    IrAlBorde(opuesto(dirSecundaria))
}

function haySiguienteCeldaEnUnRecorridoAl_Y_(dirPrincipal, dirSecundaria) {
    /*
        PROP√ìSITO:
            * Indica si existe una celda siguiente en un recorrido de direcciones **dirPrincipal** y **dirSecundaria**.
        PAR√ÅMETROS:
            * dirPrincipal: Direcci√≥n - La primera direcci√≥n del recorrido.
            * dirSecundaria: Direcci√≥n - La segunda direcci√≥n del recorrido.
        TIPO: Booleano.
        PRECONDICIONES:
            * Las direcciones dadas no deben ser ni iguales ni opuestas.
    */  
    return (puedeMover(dirPrincipal) || puedeMover(dirSecundaria))
}

procedure IrASiguienteCeldaEnUnRecorridoAl_Y_(dirPrincipal, dirSecundaria) {
    /*
        PROP√ìSITO:
            * Mueve el cabezal a la siguiente celda de un recorrido de direcciones **dirPrincipal** y **dirSecundaria**.
        PAR√ÅMETROS:
            * dirPrincipal: Direcci√≥n - Describe la primera direcci√≥n del recorrido.
            * dirSecundaria: Direcci√≥n - Describe la segunda direcci√≥n del recorrido.
        PRECONDICIONES:
            * Debe existir al menos una celda siguiente en el recorrido.
            * Las direcciones dadas no deben ser ni iguales ni opuestas.
    */
    if (puedeMover(dirPrincipal)){
        Mover(dirPrincipal)
    }
    else {
        IrAlBorde(opuesto(dirPrincipal))
        Mover(dirSecundaria)
    }
}