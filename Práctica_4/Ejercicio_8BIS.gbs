// Suponiendo que se está programando un juego donde en las celdas del tablero se
// representan Soldados (los aliados con una bolita de color Negro y los enemigos con
// una bolita de color Rojo por cada soldado), escribir los siguientes procedimientos:
// a. EnviarAliadosParaDuplicarEnemigos(), que agrega soldados aliados
// en la celda actual en cantidad suficiente para que haya el doble de aliados
// que de soldados enemigos. 👉🏼 Hecho con anterioridad.
// b. PelearLaBatalla(), que simula una batalla, suponiendo que hay
// suficiente cantidad de soldados aliados como para ganar la batalla. Durante
// una batalla, 2 soldados enemigos pelean contra 3 soldados aliados y todos
// mueren. Por ejemplo, si hay 6 enemigos y 10 aliados, mueren los 6 enemigos
// y 9 de los aliados; si hay 11 enemigos y 21 aliados, mueren los 11 enemigos
// y 15 soldados aliados. 👉🏼 Cambio de estrategia.
// Ayuda: ¿qué cuenta hay que hacer para saber cuántos soldados aliados
// morirán?

// Parte II
// Hay dos formas de pensar este ejercicio:
// 1) Calcular cuántos aliados y cuántos enemigos deben morir. Para esto te recomiendo buscar el patrón armando varios casos. Por ejemplo, si hay dos enemigos, ¿cuántos aliados deben morir? ¿Y si en lugar de dos hay cuatro? ¿Y si hay seis?

// 2) Pensar a la batalla como una secuencia de enfrentamientos, donde cada enfrentamiento mata dos enemigos y tres aliados. ¿Cuántos enfrentamientos se pueden realizar? ¿Qué pasa en cada enfrentamiento?

// b.
procedure PelearLaBatalla() {
    /*
        PROPÓSITO:
            * Simula una batalla, suponiendo que hay suficiente cantidad de soldados aliados como para ganarla. 
        PRECONDICIONES:
            * En la celda actual debe existir una cantidad suficiente de soldados aliados como para ganar la batalla.
        OBSERVACIONES: 
            * Durante una batalla, 2 soldados enemigos pelean contra 3 soldados aliados y todos mueren. 
    */
    repeat (cantidadDeEnfrentamientos()) {
        Sacrificar3SoldadosAliados()
        EliminarEnemigos()
    }
}

procedure Sacrificar3SoldadosAliados() {
    /*
        PROPÓSITO:
            * Sacrifica a 3 soldados aliados para eliminar 2 soldados enemigos en cada enfrentamiento.
        PRECONDICIONES:
            * Debe haber al menos 3 soldados aliados en la celda actual.
        OBSERVACIONES: 
            * Durante una batalla, 2 soldados enemigos pelean contra 3 soldados aliados y todos mueren.
    */
    Sacar_DeColor_(3, Negro)
}

procedure EliminarEnemigos() {
    /*
        PROPÓSITO:
            * Elimina a 2 soldados enemigos de la celda actual, en caso de que la cantidad de enemigos sea mayor o igual a 2. En caso contrario, sólo elimina a 1 soldado enemigo.
        PRECONDICIONES:
            * Debe haber al menos un soldado enemigo en la celda actual.
    */
    if (cantidadDeEnemigos() >= 2) {
        Sacar_DeColor_(2, Rojo)
    }
    else{
        Sacar(Rojo)
    }
}

function cantidadDeEnemigos() {
    /*
        PROPÓSITO:
            * Indica la cantidad de soldados enemigos en la celda actual.
        TIPO: Número.
        PRECONDICIONES:
            * No tiene (es una función total).
    */
    return (nroBolitas(Rojo))
}

function cantidadDeEnfrentamientos() {
    /*
        PROPÓSITO:
            * Indica la cantidad de enfrentamientos de cada batalla.
        TIPO: Número.
        PRECONDICIONES:
            * No tiene (es una función total).
        OBSERVACIONES:
            * Cantidad de enfrentamientos: 2 enemigos y 3 aliados 👉🏼 1 enfrentamiento
            * Cantidad de enfrentamientos: 3 enemigos y al menos (3 div 2) * 3 aliados 👉🏼 2 enfrentamientos
            * Cantidad de enfrentamientos: 4 enemigos y al menos (4 div 2) * 3 aliados 👉🏼 2 enfrentamientos
            * Cantidad de enfrentamientos: 5 enemigos y al menos (5 div 2) * 3 aliados 👉🏼 3 enfrentamientos
            * Cantidad de enfrentamientos: 6 enemigos y al menos (6 div 2) * 3 aliados 👉🏼 3 enfrentamientos
            * Cantidad de enfrentamientos: 9 enemigos y al menos (9 div 2) * 3 aliados 👉🏼 5 enfrentamientos
            * Cantidad de enfrentamientos: 11 enemigos y al menos (9 div 2) * 3 aliados 👉🏼 6 enfrentamientos
            * Cantidad de enfrentamientos: x enemigos y al menos (x div 2) * 3 aliados 👉🏼 x div 2 + x mod 2 enfrentamientos
    */
    return (cantidadDeEnemigos() div 2 + cantidadDeEnemigos() mod 2)
}

procedure Sacar_DeColor_(cantidad, color) {
    repeat(cantidad) {
        Sacar(color)
    }
}