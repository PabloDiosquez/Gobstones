// Suponiendo que se está programando un juego donde en las celdas del tablero se
// representan Soldados (los aliados con una bolita de color Negro y los enemigos con
// una bolita de color Rojo por cada soldado), escribir los siguientes procedimientos:
// a. EnviarAliadosParaDuplicarEnemigos(), que agrega soldados aliados
// en la celda actual en cantidad suficiente para que haya el doble de aliados
// que de soldados enemigos.
// b. PelearLaBatalla(), que simula una batalla, suponiendo que hay
// suficiente cantidad de soldados aliados como para ganar la batalla. Durante
// una batalla, 2 soldados enemigos pelean contra 3 soldados aliados y todos
// mueren. Por ejemplo, si hay 6 enemigos y 10 aliados, mueren los 6 enemigos
// y 9 de los aliados; si hay 11 enemigos y 21 aliados, mueren los 11 enemigos
// y 15 soldados aliados.
// Ayuda: ¿qué cuenta hay que hacer para saber cuántos soldados aliados
// morirán?

// b.
procedure PelearLaBatalla() {
    /*
        PROPÓSITO:
            * Simula una batalla, suponiendo que hay suficiente cantidad de soldados aliados como para ganarla. Durante una batalla, 2 soldados enemigos pelean contra 3 soldados aliados y todos mueren.
        PRECONDICIONES:
            * En la celda actual debe existir una cantidad suficiente de soldados aliados como para ganar la batalla.
    */
    IniciarSecuenciaDe_Enfrentamientos()
}

procedure IniciarSecuenciaDe_Enfrentamientos() {
    /*
        PROPÓSITO:
            * Inicia una secuencia de enfrentamientos que simulan una batalla entre soldados aliados y enemigos.
        PRECONDICIONES:
            * Deben existir en la celda actual la cantidad suficiente de soldados aliados como para eliminar a todos los soldados enemigos.
    */
    repeat (cantidadDeEnfrentamientos()) {
        SacrificarAliadosNecesarios()
        EliminarEnemigos()
    }
}

procedure SacrificarAliadosNecesarios() {
    /*
        PROPÓSITO:
            * Sacrifica a los soldados aliados necesarios para eliminar 2 soldados enemigos en cada enfrentamiento.
        PRECONDICIONES:
            * Debe haber al menos 3 soldados aliados en la celda actual.
    */
    Sacar_DeColor_(3, Negro)
}

procedure EliminarEnemigos() {
    /*
        PROPÓSITO:
            * Elimina a los soldados enemigos de la celda actual.
        PRECONDICIONES:
            * No tiene.
    */
    if (cantidadDeEnemigos() >= 2) {
        Sacar_DeColor_(2, Rojo)
    }
    else{
        Sacar(Rojo)
    }
}

function cantidadDeEnemigos() {
    /*
        PROPÓSITO:
            * Indica la cantidad de soldados enemigos en la celda actual.
        TIPO: Número.
        PRECONDICIONES:
            * No tiene (es una función total).
    */
    return (nroBolitas(Rojo))
}

function cantidadDeEnfrentamientos() {
    /*
        PROPÓSITO:
            * Indica la cantidad de enfrentamientos de cada batalla.
        TIPO: Número.
        PRECONDICIONES:
            * No tiene (es una función total).
        OBSERVACIONES:
            * Cantidad de enfrentamientos: 2 enemigos y 3 aliados 👉🏼 1 enfrentamiento
            * Cantidad de enfrentamientos: 3 enemigos y al menos (3 div 2) * 3 aliados 👉🏼 2 enfrentamientos
            * Cantidad de enfrentamientos: 4 enemigos y al menos (4 div 2) * 3 aliados 👉🏼 2 enfrentamientos
            * Cantidad de enfrentamientos: 5 enemigos y al menos (5 div 2) * 3 aliados 👉🏼 3 enfrentamientos
            * Cantidad de enfrentamientos: 6 enemigos y al menos (6 div 2) * 3 aliados 👉🏼 3 enfrentamientos
            * Cantidad de enfrentamientos: 9 enemigos y al menos (9 div 2) * 3 aliados 👉🏼 5 enfrentamientos
            * Cantidad de enfrentamientos: 11 enemigos y al menos (9 div 2) * 3 aliados 👉🏼 6 enfrentamientos
            * Cantidad de enfrentamientos: x enemigos y al menos (x div 2) * 3 aliados 👉🏼 x div 2 + x mod 2 enfrentamientos
    */
    return (cantidadDeEnemigos() div 2 + cantidadDeEnemigos() mod 2)
}

procedure Sacar_DeColor_(cantidad, color) {repeat(cantidad) {Sacar(color)}}