// Se desea modelar una parte de un juego de Pókemon mediante los siguientes tipos:

type TipoDePókemon is variant{
    /* 
    PROPÓSITO:
        * Modelar los tipos de Pókemon posibles */
    case Tierra {}
    case Agua {}
    case Fuego {}
}

type Pókemon is record {
    /*
     PROPÓSITO: 
        *Modelar un Pókemon
    INV.REP.: 
        * La fuerza y el nivel son mayores o iguales a 0
        * Si está debilitado, su fuerza es cero.
     */

    field tipo // TipoDePókemon
    field fuerza // Número
    field estáVivo // Booleano.
    field nivel // Número
}

// Ejercicios con Registros y Variantes
// Definir las siguientes funciones:
// a) _esMásFuerteQue_, que dados dos Pókemon indica si el primero tiene más
// fuerza que el segundo.

function _esMásFuerteQue_(pókemon1, pókemon2) {
    /*
        PROPÓSITO:
            * Indica si el primer pókemon dado tiene más fuerza que el segundo dado.
        PARÁMETROS:
            * pókemon1: Pókemon
            * pókemon2: Pókemon
        TIPO: Booleano
        PRECONDICIONES:
            * No tiene (es una función total).
    */
    
    return (fuerza(pókemon1) > fuerza(pókemon2))
}

// b) esDeMayorNivel_Que_, que dados dos Pókemon indica si el si el primero
// tiene un nivel más alto que el segundo.

function esDeMayorNivel_Que_(pókemon1, pókemon2) {
    /*
        PROPÓSITO:
            * Indica si el primer pókemon dado tiene un nivel más alto que el segundo pókemon dado.
        PARÁMETROS:
            * pókemon1: Pókemon
            * pókemon2: Pókemon
        TIPO: Booleano
        PRECONDICIONES:
            * No tiene (es una función total).
    */
    
    return (nivel(pókemon1) > nivel(pókemon2))
}

// c) pókemon_PotenciadoEn_, que dado un Pókemon y un número, describe el
// Pókemon resultante de multiplicar la fuerza y el nivel del Pókemon dado por ese
// número.

function pókemon_PotenciadoEn_(pókemon, número) {
    /*
        PROPÓSITO:
            * Describe el pókemon resultante de multiplicar la fuerza y el nivel del pókemon dado por el número dado.
        PARÁMETROS:
            * pókemon: Pókemon
            * número: Número
        TIPO: Pókemon
        PRECONDICIONES:
            * **número** debe ser >= 0.
    */
    
    return (
        Pokémon(pókemon | 
                          fuerza <- fuerza(pókemon)*número
                        , nivel  <- nivel(pókemon)*número 
        )
    )
}

// d) pókemon_ConValoresDuplicados, que dado un Pókemon, describe el
// Pókemon resultante de duplicar la fuerza y el nivel del Pokémon dado.

function pókemon_ConValoresDuplicados(pókemon) {
    /*
        PROPÓSITO:
            * Describe el pókemon que resulta de duplicar los valores de fuerza y de nivel del pókemon dado.
        PARÁMETROS:
            * pókemon: Pókemon
        TIPO: Pókemon
        PRECONDICIONES:
            * No tiene (es una función total).
    */
    
    return (pókemon_PotenciadoEn_(pókemon, 2))
}

// e) pókemon_PotenciadoSiEsDeTipo_En(pokémon , tipo,n), que dado un
// Pókemon, un tipo de Pókemon y un número, describe el Pokémon resultante de
// potenciar el dado en el número dado, solamente si es del tipo recibido, y el
// original si no.
// f) pókemon_Derrotado, que dado un Pókemon, describe el Pokémon resultante
// de debilitar al Pókemon dado (o sea, su fuerza será 0 y su estado, debilitado).