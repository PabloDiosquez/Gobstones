// Declarar un tipo de registros llamado Empleado que contenga la identidad del
// empleado modelada con el registro Persona, el puesto dentro de la empresa,
// representado por un tipo variante llamado Puesto dado a continuación, y un sueldo
// modelado como un número en centavos.

type Puesto is variant {
    /* PROPÓSITO: 
        *Modelar los diferentes puestos que hay dentro de una empresa de software.
    */
        case GestorDeProyecto   {}
        case LíderDeProyecto    {}
        case Desarrollador      {}
        case Operador           {}
}

type Empleado is record {
    /*
        PROPÓSITO:
            * Modela un empleado de una empresa de software.
        INV. REP.:
            * El campo sueldo debe ser mayor o igual a cero.
    */

        field identidad     // Persona
        field puesto        // Puesto
        field sueldo        // Número 
}

// Implementar las siguientes funciones:
// a. empleado_ConSueldoActualizadoA_, que dado un empleado y un
// nuevo sueldo, describa al empleado con el sueldo actualizado.

function empleado_ConSueldoActualizadoA_(empleado, nuevoSueldo) {
    /*
        PROPÓSITO:
            * Describe al empleado que resulta de actualizar el sueldo del empleado dado con el nuevo sueldo dado. 
        PARÁMETROS:
            * empleado:     Empleado.
            * nuevoSueldo:  Número.
        TIPO: Empleado.
        PRECONDICIONES:
            * **nuevoSueldo** debe ser mayor o igual a cero.
    */
    
    return (Empleado(empleado | sueldo <- nuevoSueldo))
}

// b. empleado_ConNuevoPuesto_, que dado un empleado y un nuevo puesto,
// describa al empleado con el puesto actualizado.

function empleado_ConNuevoPuesto_(empleado, nuevoPuesto) {
    /*
        PROPÓSITO:
            * Describe al empleado que resulta de actualizar el puesto del empleado dado con el nuevo puesto dado.
        PARÁMETROS:
            * empleado:     Empleado.
            * nuevoPuesto:  Puesto.
        TIPO: Empleado.
        PRECONDICIONES:
            * No tiene (es una fucnión total). 
    */
    
    return (Empleado(empleado | puesto <- nuevoPuesto))
}

// c. categoríaDelPuesto_, que dado un valor de tipo puesto devuelve su
// categoría según la siguiente tabla:

                        // GestorDeProyecto 4
                        // LíderDeProyecto 3
                        // Desarrollador 2
                        // Operador 1

function categoríaDelPuesto_(puesto) {
    /*
        PROPÓSITO:
            * Describe la categoría del puesto dado.
        PARÁMETROS:
            * puesto: Puesto.
        TIPO: Número.
        PRECONDICIONES:
            * No tiene (es una función total).
    */
    
    return (choose  1 when (puesto == Operador)
                    2 when (puesto == Desarrollador)
                    3 when (puesto == LíderDeProyecto)
                    4 when (puesto == Operador)
                    boom("Algo salió mal. ¿Alteraste los puestos?") otherwise
    )
}

// d. empleadoConMayorCargoEntre_Y_, que dados dos empleados describa
// el empleado de mayor categoría entre ellos.

function empleadoConMayorCargoEntre_Y_(empleado1, empleado2) {
    /*
        PROPÓSITO:
            * Describe al empleado de mayor categoría de los dos empleados dados.
        PARÁMETROS:
            * empleado1: Empleado.
            * empleado2: Empleado.
        TIPO: Empleado.
        PRECONDICIONES:
            * No tiene (es una función total).
    */

    return (choose empleado1 when (categoríaDelEmpleado_(empleado1) > categoríaDelEmpleado_(empleado2))
                   empleado2 otherwise
    )
}

function categoríaDelEmpleado_(empleado) {
    /*
        PROPÓSITO:
            * Describe la categoría del puesto del empleado dado.
        PARÁMETROS:
            * empleado: Empleado.
        TIPO: Número.
        PRECONDICIONES:
            * No tiene (es una función total).
    */
    
    return (categoríaDelPuesto_(puesto(empleado)))
}

// e. tienenIgualSueldo_Y_, que dados dos empleados indique si ambos
// cobran lo mismo.

function tienenIgualSueldo_Y_(empleado1, empleado2) {
    /*
        PROPÓSITO:
            * Indica si los dos empleados dados tienen el mismo sueldo.
        PARÁMETROS:
            * empleado1: Empleado.
            * empleado2: Empleado.
        TIPO: Booleano.
        PRECONDICIONES:
            * No tiene (es una función total).
    */

    return (sueldo(empleado1) == sueldo(empleado2))
}

// f. empleado_ConAumentoEn_PorBonoDeFinalizaciónDeProyecto, que
// dado un empleado y un porcentaje de aumento describa al empleado con el
// sueldo actualizado en ese porcentaje. El porcentaje de aumento es un
// número del 0 al 100. El monto en el que se incrementa depende del
// porcentaje (i.e. si el porcentaje es 20%, cuando el sueldo es 100, el nuevo
// sueldo es 120, cuando el sueldo es 200 el nuevo sueldo es 240, y cuando el
// sueldo es 150, el nuevo sueldo es 180).

function empleado_ConAumentoEn_PorBonoDeFinalizaciónDeProyecto(empleado, porcentajeDeAumento) {
    /*
        PROPÓSITO:
            * Describe al empleado que resulta de actualizar el sueldo del empleado dado con el porcentaje dado.
        PARÁMETROS:
            * empleado: Empleado.
            * porcentajeDeAumento: Número.
        TIPO: Empleado.
        PRECONDICIONES:
            * El **porcentajeDeAumento** es un número comprendido entre 0 y 100.
    */
    
    return (Empleado(empleado | sueldo <- (sueldo(empleado)*porcentajeDeAumento) div 100))
}

function sueldoDeEmpleado_ActualizadoEn_PorCiento(empleado, porcentajeDeAumento) {
    /*
        PROPÓSITO:
            * Describe el sueldo actualizado del empleado dado en el porcentaje de acuerdo al porcentaje de aumento dado.
        PARÁMETROS:
            * empleado:            Empleado.
            * porcentajeDeAumento: Número.
        TIPO: Número.
        PRECONDICIONES:
            * **porcentajeDeAumento** debe ser mayor o igual a cero.
    */
    
    return (sueldo(empleado) + (sueldo(empleado)*porcentajeDeAumento) div 100))
}