// Declarar el registro Coordenada que representa una coordenada del tablero con los
// campos fila y columna, donde la coordenada del origen tiene fila 0 y columna 0.

type Coordenada is record {
    /*
        PROPÓSITO:
            * Modela las coordenadas del tablero de Gobstones.
        INV. REP.:
            * Los campos fila y columna deben ser >= 0.
    */

    field fila    // Un valor de tipo Número.
    field columna // Un valor de tipo Número.
}


// Implementar las siguientes operaciones:
// a. coordenada__, que dado los números x e y retorne una nueva coordenada
// con fila en y y columna en x.

function coordenada__(x, y) {
    /*
        PROPÓSITO:
            * Describe una coordenada con fila en el segundo valor dado y columna en el primer valor dado. 
        PARÁMETROS:
            * x: Número.
            * y: Número.
        TIPO: Coordenada.
        PRECONDICIONES:
            * Los valores dados deben ser >= 0.
    */
    
    return (Coordenada(fila <- y, columna <- x))
}
// b. esCoordenadaOrigen_, que denote si es la coordenada del origen, si es la
// que tiene fila y columna en 0.

function esCoordenadaOrigen_(coordenada) {
    /*
        PROPÓSITO:
            * Indica si la coordenada dada es la coordenada del origen.
        PARÁMETROS:
            * coordenada: Coordenada.
        TIPO: Booleano.
        PRECONDICIONES:
            * No tiene (es una función total).
        OBSERVACIONES:
            * La coordenada del origen tiene fila y columna en 0.
    */
    
    return (fila(coordenada) == 0 && columna(coordenada == 0))
}

// c. es_MayorCoordenadaA_, que, dadas dos coordenadas determina si la
// primera aparece después de la segunda en un recorrido que va primero hacia
// el Norte y luego hacia el Este. Es decir, es_MayorCoordenadaA_(c1, c2)
// es verdadero cuando la columna de c1 es mayor que la de c2, o cuando
// estando en la misma columna, la fila de c1 es mayor que la de c2.

function es_MayorCoordenadaA_(coord1, coord2) {
    /*
        PROPÓSITO:
            * Indica si la primer coordenada dada aparece después de la segunda en un recorrido que va primero hacia el Norte y luego hacia el Este.
        PARÁMETROS:
            * coord1:  Coordenada.
            * coord2:  Coordenada.
        TIPO: Booleano.
        PRECONDICIONES:
            * No tiene (es una función total).
    */
    
    return (columna(coord1) > columna(coord2) || (columna(coord1) == columna(coord2) && fila(coord1) > fila(coord2)))
}

// d. coordenadaActual, que describa la coordenada en la que se encuentra el
// cabezal.

function coordenadaActual() {
    /*
        PROPÓSITO:
            * Describe la coordenada en la que se encuentra el cabezal.
        TIPO: Coordenada.
        PRECONDICIONES:
            * No tiene (es una función total).
    */
    
    return (Coordenada(fila <- coordenadaY(), columna <- coordenadaX()))
}

function coordenadaX() {
    /*
        PROPÓSITO:
            * Describe la coordenada columna de la celda en la que se encuentra el cabezal.
        TIPO: Número.
        PRECONDICIONES:
            * No tiene (es una función total).
    */
    
    return (nroColumnas() - distanciaAlBorde_(Este) - 1)
}

function coordenadaY() {
    /*
        PROPÓSITO:
            * Describe la coordenada fila de la celda en la que se encuentra el cabezal.
        TIPO: Número.
        PRECONDICIONES:
            * No tiene (es una función total).
    */
    
    return (nroFilas() - distanciaAlBorde_(Norte) - 1)
}

// e. últimaCoordenada, que describa la última coordenada del tablero en un
// recorrido hacia el Noreste.

function últimaCoordenada() {
    /*
        PROPÓSITO:
            * Describre la última coordenada del tablero en un recorrido hacia el Noreste.
        TIPO: Coordenada.
        PRECONDICIONES:
            * No tiene (es una función total).
    */
    
    IrALaÚltimaCelda()

    return (coordenadaActual())
}

// f. IrACoordenada_, que, dada una coordenada posicione el cabezal en la
// celda correspondiente del tablero.

procedure IrACoordenada_(coordenada) {
    /*
        PROPÓSITO:
            * Ubica el cabezal en la celda correspondiente a la coordenada dada.
        PARÁMETROS:
            * coordenada: Coordenada.
        PRECONDICIONES:
            * La coordenada dada debe ser una coordenada válida en el tablero actual.
    */
    
    IrAlBorde(Oeste)
    IrAlBorde(Sur)

    Mover_VecesHacia_(columna(coordenada), Este)
    Mover_VecesHacia_(fila(coordenada), Norte)
}

// g. siguienteCoordenadaA_, que, dada una coordenada describa la siguiente
// coordenada en un recorrido que va primero hacia el Norte y luego hacia el
// Este.

function siguienteCoordenadaA_(coordenada) {
    /*
        PROPÓSITO:
            * Describe la coordenada siguiente de la dada, en un recorrido que va primero hacia el Norte y luego hacia el Este.
        PARÁMETROS:
            * coordenada: Coordenada.
        TIPO: Coordenada.
        PRECONDICIONES:
            * La coordenada dada no debe describir una celda del borde Norte ni del borde Este.
    */
    
    return (Coordenada(
        fila    <- fila(coordenada) + 1,              
        columna <- columna(coordenada) + 1                    
        )
    )
}

// h. reflejoDe_, que dada una coordenada describa la coordenada que se
// obtiene de intercambiar la fila y la columna.

function reflejoDe_(coordenada) {
    /*
        PROPÓSITO:
            * Describe la coordenada que resulta de intercambiar fila y columna de la coordenada dada.
        PARÁMETROS:
            * coordenada: Coordenada.
        TIPO: Coordenada.
        PRECONDICIONES:
            * No tiene (es una función total).
    */
    
    return (Coordenada(
        fila    <- columna(coordenada)              
        columna <- fila(coordenada))
    )
}

// 🔹 Funciones auxiliares

function nroColumnas() {
    /*
        PROPÓSITO:
            * Describe el número de columnas del tablero actual.
        TIPO: Número.
        PRECONDICIONES:
            * No tiene (es una función total).
        OBSERVACIONES:
            * Recorrido sobre las columnas del tablero, buscando contarlas.   
    */
    IrAlBorde(Oeste)
    cantidadDeColumnasYaVistas := 0
    while (puedeMover(Este)) {
        cantidadDeColumnasYaVistas := cantidadDeColumnasYaVistas + 1
        Mover(Este)
    }
    return (cantidadDeColumnasYaVistas + 1)
}

function nroFilas() {
    /*
        PROPÓSITO:
            * Describe el número de filas en el tablero actual.
        TIPO: Número.
        PRECONDICIONES:
            * No tiene (es una función total).
        OBSERVACIONES:
            * Recorrido sobre las filas del tablero, buscando contarlas.
    */
    IrAlBorde(Norte)
    cantidadDeFilasYaVistas := 0
    while (puedeMover(Sur)) {
        cantidadDeFilasYaVistas := cantidadDeFilasYaVistas + 1
        Mover(Sur)
    }
    return (cantidadDeFilasYaVistas + 1)
}

function distanciaAlBorde_(dirección) {
    /*
        PROPÓSITO:
            * Describe la cantidad de celdas que hay entre la celda actual y el borde **dirección**.
        PARÁMETROS:
            * dirección: Dirección
        TIPO: Número.
        PRECONDICIONES:
            * No tiene (es una función total).
        OBSERVACIONES:
            * Recorrido sobre las celdas del tablero en una dirección fija, buscando contarlas.
    */
    
    totalDeCeldasHastaAhora := 0

    while (puedeMover(dirección)){
        totalDeCeldasHastaAhora := totalDeCeldasHastaAhora + 1
        Mover(dirección)
    }

    return (totalDeCeldasHastaAhora)
}

procedure IrALaÚltimaCelda() {
    /*
        PROPÓSITO:
            * Mueve el cabezal a la última celda en un recorrido hacia el Noreste.
        PRECONDICIONES:
            * No tiene (es una función total).
    */
    
    IrAlBorde(Este)
    IrAlBorde(Norte)
}

// a.
procedure IrAPrimeraCeldaEnUnRecorridoAl_Y_(dirPrincipal, dirSecundaria) {
    /*
        PROPÓSITO:
            * Ubica el cabezal en el inicio de un recorrido de direcciones **dirPrincipal** y **dirSecundaria**.
        PARÁMETROS:
            * dirPrincipal: Dirección - La primera dirección del recorrido.
            * dirSecundaria: Dirección - La segunda dirección del recorrido.
        PRECONDICIONES:
            * Las direcciones dadas no deben ser ni iguales ni opuestas.
    */
    IrAlBorde(opuesto(dirPrincipal))
    IrAlBorde(opuesto(dirSecundaria))
}

// b.
function haySiguienteCeldaEnUnRecorridoAl_Y_(dirPrincipal, dirSecundaria) {
    /*
        PROPÓSITO:
            * Indica si existe una celda siguiente a la celda actual en un recorrido de direcciones **dirPrincipal** y **dirSecundaria**.
        PARÁMETROS:
            * dirPrincipal: Dirección - La primera dirección del recorrido.
            * dirSecundaria: Dirección - La segunda dirección del recorrido.
        TIPO: Booleano.
        PRECONDICIONES:
            * Las direcciones dadas no deben ser ni iguales ni opuestas.
    */  
    return (puedeMover(dirPrincipal) || puedeMover(dirSecundaria))
}

// c.
procedure IrASiguienteCeldaEnUnRecorridoAl_Y_(dirPrincipal, dirSecundaria) {
    /*
        PROPÓSITO:
            * Mueve el cabezal a la siguiente celda de la celda actual en un recorrido de direcciones **dirPrincipal** y **dirSecundaria**.
        PARÁMETROS:
            * dirPrincipal: Dirección - Describe la primera dirección del recorrido.
            * dirSecundaria: Dirección - Describe la segunda dirección del recorrido.
        PRECONDICIONES:
            * Debe existir al menos una celda siguiente en el recorrido.
            * Las direcciones dadas no deben ser ni iguales ni opuestas.
    */
    if (puedeMover(dirPrincipal)){
        Mover(dirPrincipal)
    }
    else {
        IrAlBorde(opuesto(dirPrincipal))
        Mover(dirSecundaria)
    }
}