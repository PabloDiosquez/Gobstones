// Suponiendo que se está programando un juego donde en las celdas del tablero se
// representan Soldados (los aliados con una bolita de color Negro y los enemigos con
// una bolita de color Rojo por cada soldado), escribir los siguientes procedimientos:
// a. EnviarAliadosParaDuplicarEnemigos(), que agrega soldados aliados
// en la celda actual en cantidad suficiente para que haya el doble de aliados
// que de soldados enemigos.
// b. PelearLaBatalla(), que simula una batalla, suponiendo que hay
// suficiente cantidad de soldados aliados como para ganar la batalla. Durante
// una batalla, 2 soldados enemigos pelean contra 3 soldados aliados y todos
// mueren. Por ejemplo, si hay 6 enemigos y 10 aliados, mueren los 6 enemigos
// y 9 de los aliados; si hay 11 enemigos y 21 aliados, mueren los 11 enemigos
// y 15 soldados aliados.
// Ayuda: ¿qué cuenta hay que hacer para saber cuántos soldados aliados
// morirán?

// a. 
procedure EnviarAliadosParaDuplicarEnemigos() {
    /*
        PROPÓSITO:
            * Agrega soldados aliados en la celda actual en cantidad suficiente para que haya el doble de aliados que de soldados enemigos.
        PRECONDICIONES:
            * La cantidad de soldados aliados debe ser menor que el doble de la cantidad de soldados enemigos. De lo contrario, ya hay suficientes soldados aliados para duplicar a los enemigos.
    */
    Agregar_SoldadosAliados(2*nroBolitas(Rojo) - nroBolitas(Negro))
}

procedure Agregar_SoldadosAliados(númeroDeSoldadosAliados) {
    /*
        PROPÓSITO:
            * Agrega en la celda actual **númeroDeSoldadosAliados** soldados aliados.
        PARÁMETROS:
            * númeroDeSoldadosAliados: Número - Describe la cantidad de soldados aliados a agregar.
        PRECONDICIONES:
            * La cantidad dada debe ser un número mayor o igual a cero.
        OBSERVACIONES:
            * Un soldado aliado se representa con una bolita de color Negro.
    */
    Poner_DeColor_(cantidad, Negro)
}

procedure Poner_DeColor_(cantidad, color) {
    /*
        PROPÓSITO:
            * Pone **cantidad** bolitas de color **color** en la celda actual.
        PARÁMETROS:
            * cantidad: Número - Describe la cantidad de bolitas a poner.
            * color: Color - Describe el color de las bolitas a poner.
        PRECONDICIONES:
            * No tiene.
    */
    repeat(cantidad) {
        Poner(color)
    }
}

// b.

procedure PelearLaBatalla() {
    /*
        PROPÓSITO:
            * Simula una batalla en la celda actual, suponiendo que hay suficiente cantidad de soldados aliados como para ganarla.
        PRECONDICIONES:
            * En la celda actual debe existir una cantidad suficiente de soldados aliados como para ganar la batalla.
            * Deben existir al menos dos soldados enemigos en la celda actual.
        OBSERVACIONES:
            * Durante una batalla, 2 soldados enemigos pelean contra 3 soldados aliados y todos mueren. 
    */
    SacrificarAliadosNecesariosParaEliminar_Enemigos(nroBolitas(Rojo))
    EliminarEnemigos()
}

procedure SacrificarAliadosNecesariosParaEliminar_Enemigos (cantidad) {
    /*
        PROPÓSITO:
            * Sacrifica la cantidad necesaria de soldados aliados para eliminar todos los soldados enemigos de la celda actual.
        PARÁMETROS:
            * cantidad: Número - Describe la cantidad de soldados enemigos a eliminar.
        PRECONDICIONES:
            * La cantidad dada debe ser un número mayor o igual a cero.
    */
    Sacar_DeColor_(cantidad div 2 * 3,Negro)
}

procedure EliminarEnemigos() {
    /*
        PROPÓSITO:
            * Elimina todos los soldados enemigos de la celda actual.
        PRECONDICIONES:
            * No tiene.
        OBSERVACIONES:
            * Los soldados enemigos se representan con bolitas de color Rojo. Una bolita por cada soldado.
    */
    SacarTodasLasDeColor_(Rojo)
}

procedure SacarTodasLasDeColor_(color) {
    /*
        PROPÓSITO:
            * Saca todas las bolitas de color **color** de la celda actual.
        PARÁMETROS:
            * color: Color - Describe las bolitas a sacar de la celda actual.
        PRECONDICIONES:
            * No tiene.
    */
    Sacar_DeColor_(nroBolitas(color), color)
}

procedure Sacar_DeColor_(cantidad, color) {
    /*
    */
    repeat(cantidad) {
        Sacar(color)
    }
}